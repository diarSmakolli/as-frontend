import React, { useState, useEffect, useCallback } from "react";
import { useParams, useNavigate } from "react-router-dom";
import {
  Box,
  Flex,
  Heading,
  Text,
  Badge,
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
  Button,
  useToast,
  Spinner,
  VStack,
  HStack,
  Divider,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  TableContainer,
  Avatar,
  Icon,
  Card,
  CardBody,
  CardHeader,
  Menu,
  MenuButton,
  MenuList,
  MenuItem,
  IconButton,
  Tooltip,
  useDisclosure,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalFooter,
  ModalBody,
  ModalCloseButton,
  FormControl,
  FormLabel,
  FormHelperText,
  Input,
  Select,
  Textarea,
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
  Skeleton,
  SkeletonText,
  Tag,
  chakra,
  Center,
  SimpleGrid,
  Grid,
  GridItem,
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  useColorModeValue,
  Stat,
  StatLabel,
  StatNumber,
  StatHelpText,
  Wrap,
  WrapItem,
  Popover,
  PopoverTrigger,
  PopoverContent,
  PopoverHeader,
  PopoverBody,
  PopoverArrow,
  PopoverCloseButton,
  useBreakpointValue,
} from "@chakra-ui/react";
import { motion } from "framer-motion";
import {
  FiMoreVertical,
  FiEdit,
  FiLock,
  FiUnlock,
  FiCheckCircle,
  FiXCircle,
  FiKey,
  FiClock,
  FiActivity,
  FiUser,
  FiCalendar,
  FiMail,
  FiPhone,
  FiCheckSquare,
  FiRotateCcw,
  FiLogOut,
  FiEye,
  FiAlertCircle,
  FiChevronDown,
  FiChevronUp,
  FiAlertTriangle,
  FiX,
  FiFileText,
  FiSearch,
  FiFilter,
  FiRefreshCw,
  FiServer,
  FiCpu,
  FiGlobe,
  FiArrowLeft,
  FiSmartphone,
  FiTablet,
  FiMonitor,
  FiInbox,
  FiHome,
  FiUsers,
  FiInfo,
  FiShield,
  FiBriefcase,
  FiMapPin,
  FiAlertOctagon,
} from "react-icons/fi";
import { useAuth } from "../authContext/authContext";
import { administrationService } from "../services/administrationService";
import { handleApiError } from "../../../commons/handleApiError";
import InfiniteScroll from "react-infinite-scroll-component";
import EditAccountModal from "../administrations-management/components/EditAccountModal";
import ResetPasswordModal from "../administrations-management/components/ResetPasswordModal";
import { usePreferences } from "../authContext/preferencesProvider";
import { customToastContainerStyle } from "../../../commons/toastStyles";
import Loader from "../../../commons/Loader";
import SidebarContent from "../layouts/SidebarContent";
import MobileNav from "../layouts/MobileNav";
import SettingsModal from "../components/settings/SettingsModal";
import {
  formatRelativeTime,
  formatOptions,
  formatWithTimezone,
} from "../../../commons/formatOptions";

// Motion components with Chakra
const MotionBox = motion(Box);
const MotionFlex = motion(Flex);
const MotionCard = motion(Card);

// EmptyState component definition
const EmptyState = ({
  icon = FiInbox,
  title = "No Data Found",
  message = "There are no items to display.",
  action = null,
}) => {
  return (
    <Box
      p={8}
      textAlign="center"
      borderRadius="md"
      bg="gray.800"
      border="1px dashed"
      borderColor="gray.700"
    >
      <VStack spacing={3}>
        <Icon as={icon} fontSize="3xl" color="gray.400" />
        <Text fontWeight="bold" color="white">
          {title}
        </Text>
        <Text color="gray.400">{message}</Text>
        {action && <Box mt={2}>{action}</Box>}
      </VStack>
    </Box>
  );
};

const AdministrationDetails = () => {
  const { accountId } = useParams();
  const navigate = useNavigate();
  const toast = useToast();
  const { account, isLoading: isAuthLoading } = useAuth();
  const { currentTimezone } = usePreferences();
  const [isSettingsOpen, setIsSettingsOpen] = useState(false);
  const [isFilterOpen, setIsFilterOpen] = useState(false);

  // State for user details
  const [userDetails, setUserDetails] = useState(null);
  const [isLoadingDetails, setIsLoadingDetails] = useState(true);

  // State for sessions data
  const [sessions, setSessions] = useState([]);
  const [sessionsPage, setSessionsPage] = useState(1); // Next page to fetch
  const [hasMoreSessions, setHasMoreSessions] = useState(true);
  const [isLoadingSessions, setIsLoadingSessions] = useState(false);
  const [totalSessions, setTotalSessions] = useState(0);

  // State for activities data
  const [activities, setActivities] = useState([]);
  const [activitiesPage, setActivitiesPage] = useState(1); // Next page to fetch
  const [hasMoreActivities, setHasMoreActivities] = useState(true);
  const [isLoadingActivities, setIsLoadingActivities] = useState(false);
  const [totalActivities, setTotalActivities] = useState(0);

  // Modal states
  const {
    isOpen: isEditModalOpen,
    onOpen: onEditModalOpen,
    onClose: onEditModalClose,
  } = useDisclosure();

  const {
    isOpen: isResetPasswordModalOpen,
    onOpen: onResetPasswordModalOpen,
    onClose: onResetPasswordModalClose,
  } = useDisclosure();

  // Filters for activities
  const [activityFilters, setActivityFilters] = useState({
    type: "",
    action: "",
    action_type: "",
    from_date: "",
    to_date: "",
  });

  // Page animations
  const fadeIn = {
    initial: { opacity: 0 },
    animate: { opacity: 1 },
    transition: { duration: 0.4 },
  };

  const slideUp = {
    initial: { opacity: 0, y: 20 },
    animate: { opacity: 1, y: 0 },
    transition: { duration: 0.4 },
  };

  const staggerContainer = {
    animate: { transition: { staggerChildren: 0.1 } },
  };

  // Responsive adjustments
  const avatarSize = useBreakpointValue({ base: "xl", md: "2xl" });

  // Fetch user details
  const fetchUserDetails = useCallback(async () => {
    if (!accountId) return;

    setIsLoadingDetails(true);
    try {
      const response = await administrationService.getUserDetails(accountId);
      setUserDetails(response.data.data);
    } catch (error) {
      handleApiError(error, toast);
      navigate("/administrations-console");
    } finally {
      setIsLoadingDetails(false);
    }
  }, [accountId, navigate, toast]);

  // Fetch sessions
  const fetchSessions = useCallback(
    async (reset = false) => {
      const pageToFetch = reset ? 1 : sessionsPage;

      if (!accountId || isLoadingSessions || (!reset && !hasMoreSessions)) {
        if (!reset && !hasMoreSessions) setIsLoadingSessions(false);
        return;
      }

      setIsLoadingSessions(true);
      try {
        const response = await administrationService.getUserSessions(accountId, {
          page: pageToFetch,
          limit: 10,
          sortBy: "created_at",
          sortOrder: "DESC",
        });

        const { sessions: newSessions, total_items, total_pages, current_page } =
          response.data.data;

        setTotalSessions(total_items);

        if (reset) {
          setSessions(newSessions);
        } else {
          setSessions((prev) => [...prev, ...newSessions]);
        }

        setHasMoreSessions(current_page < total_pages);
        if (current_page < total_pages) {
          setSessionsPage(current_page + 1);
        } else {
          setSessionsPage(total_pages + 1); // Or just total_pages, if preferred
        }
      } catch (error) {
        handleApiError(error, toast);
        setHasMoreSessions(false);
      } finally {
        setIsLoadingSessions(false);
      }
    },
    [accountId, toast, sessionsPage, isLoadingSessions, hasMoreSessions]
  );

  // Fetch activities
  const fetchActivities = useCallback(
    async (reset = false) => {
      const pageToFetch = reset ? 1 : activitiesPage;

      if (!accountId || isLoadingActivities || (!reset && !hasMoreActivities)) {
        if (!reset && !hasMoreActivities) setIsLoadingActivities(false);
        return;
      }

      setIsLoadingActivities(true);
      try {
        const response = await administrationService.getUserActivities(accountId, {
          page: pageToFetch,
          limit: 10,
          sortBy: "created_at",
          sortOrder: "DESC",
          ...activityFilters,
        });

        const {
          activities: newActivities,
          total_items,
          total_pages,
          current_page,
        } = response.data.data;

        setTotalActivities(total_items);

        if (reset) {
          setActivities(newActivities);
        } else {
          setActivities((prev) => [...prev, ...newActivities]);
        }

        setHasMoreActivities(current_page < total_pages);
        if (current_page < total_pages) {
          setActivitiesPage(current_page + 1);
        } else {
          setActivitiesPage(total_pages + 1); // Or just total_pages
        }
      } catch (error) {
        handleApiError(error, toast);
        setHasMoreActivities(false);
      } finally {
        setIsLoadingActivities(false);
      }
    },
    [
      accountId,
      toast,
      activitiesPage,
      isLoadingActivities,
      activityFilters,
      hasMoreActivities,
    ]
  );

  // Handle filter changes
  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setActivityFilters((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  // Apply filters
  const applyFilters = () => {
    setActivitiesPage(1);
    fetchActivities(true);
  };

  // Reset filters
  const resetFilters = () => {
    setActivityFilters({
      type: "",
      action: "",
      action_type: "",
      from_date: "",
      to_date: "",
    });
    setActivitiesPage(1);
    fetchActivities(true);
  };

  // Account action handlers
  const handleLockAccount = async () => {
    try {
      await administrationService.lockAccount(accountId);
      toast({
        title: "Account locked",
        description: "The account has been locked successfully.",
        status: "success",
        duration: 5000,
        isClosable: true,
      });
      fetchUserDetails();
    } catch (error) {
      handleApiError(error, toast);
    }
  };

  const handleUnlockAccount = async () => {
    try {
      await administrationService.unlockAccount(accountId);
      toast({
        title: "Account unlocked",
        description: "The account has been unlocked successfully.",
        status: "success",
        duration: 5000,
        isClosable: true,
      });
      fetchUserDetails();
    } catch (error) {
      handleApiError(error, toast);
    }
  };

  const handleVerifyAccount = async () => {
    try {
      await administrationService.verifyAccount(accountId);
      toast({
        title: "Account verified",
        description: "The account has been verified successfully.",
        status: "success",
        duration: 5000,
        isClosable: true,
      });
      fetchUserDetails();
    } catch (error) {
      handleApiError(error, toast);
    }
  };

  const handleUnverifyAccount = async () => {
    try {
      await administrationService.unverifyAccount(accountId);
      toast({
        title: "Account unverified",
        description: "The account has been unverified successfully.",
        status: "success",
        duration: 5000,
        isClosable: true,
      });
      fetchUserDetails();
    } catch (error) {
      handleApiError(error, toast);
    }
  };

  const handleUserUpdate = async (userData) => {
    try {
      await administrationService.updateUserDetails(accountId, userData);
      toast({
        title: "Account updated",
        description: "The account details have been updated successfully.",
        status: "success",
        duration: 5000,
        isClosable: true,
      });
      fetchUserDetails();
      onEditModalClose();
    } catch (error) {
      handleApiError(error, toast);
    }
  };

  const handlePasswordReset = async (passwordData) => {
    try {
      await administrationService.resetPassword(accountId, passwordData);
      toast({
        title: "Password reset",
        description: "The password has been reset successfully.",
        status: "success",
        duration: 5000,
        isClosable: true,
      });
      onResetPasswordModalClose();
    } catch (error) {
      handleApiError(error, toast);
    }
  };

  // Format activity type for display
  const formatActivityType = (type) => {
    let colorScheme = "gray";
    switch (type) {
      case "Authentication":
        colorScheme = "blue";
        break;
      case "Create":
        colorScheme = "green";
        break;
      case "Modify":
        colorScheme = "orange";
        break;
      case "Delete":
        colorScheme = "red";
        break;
      case "Lock":
        colorScheme = "red";
        break;
      case "UnLock":
        colorScheme = "green";
        break;
      case "Verify":
        colorScheme = "teal";
        break;
      case "Unverify":
        colorScheme = "yellow";
        break;
      case "Terminate":
        colorScheme = "purple";
        break;
      default:
        break;
    }
    return (
      <Badge colorScheme={colorScheme} px={2} py={0.5} borderRadius="md">
        {type}
      </Badge>
    );
  };

  // Load data on mount
  useEffect(() => {
    if (accountId) {
      fetchUserDetails();
    }
  }, [accountId, fetchUserDetails]);

  // Load initial sessions data when userDetails are available (assuming Sessions tab is default)
  useEffect(() => {
    if (userDetails && accountId) {
      if (sessions.length === 0 && hasMoreSessions && !isLoadingSessions) {
        fetchSessions(true);
      }
    }
  }, [
    userDetails,
    accountId,
    sessions.length,
    hasMoreSessions,
    isLoadingSessions,
    fetchSessions,
  ]);

  // Load initial sessions and activities data when tabs are selected
  const handleTabChange = (index) => {
    if (index === 0) {
      // Sessions tab
      if (sessions.length === 0 && hasMoreSessions && !isLoadingSessions) {
        fetchSessions(true);
      }
    } else if (index === 1) {
      // Activities tab
      if (activities.length === 0 && hasMoreActivities && !isLoadingActivities) {
        fetchActivities(true);
      }
    }
  };

  if (isAuthLoading) {
    return <Loader />;
  }

  if (isLoadingDetails) {
    return (
      <Box minH="100vh" bg="rgb(25,25,25)">
        <SidebarContent onSettingsOpen={() => setIsSettingsOpen(true)} />
        <MobileNav onSettingsOpen={() => setIsSettingsOpen(true)} />
        <Box ml={{ base: 0, md: 60 }} p="5">
          <Skeleton height="50px" width="200px" mb={6} />
          <SkeletonText mt="4" noOfLines={6} spacing="4" skeletonHeight="4" />
        </Box>
      </Box>
    );
  }

  if (!userDetails) {
    return (
      <Box minH="100vh" bg="rgb(25,25,25)">
        <SidebarContent onSettingsOpen={() => setIsSettingsOpen(true)} />
        <MobileNav onSettingsOpen={() => setIsSettingsOpen(true)} />
        <Box ml={{ base: 0, md: 60 }} p="5">
          <Alert status="error" variant="solid" borderRadius="md">
            <AlertIcon />
            <AlertTitle mr={2}>User Not Found</AlertTitle>
            <AlertDescription>
              The requested user could not be found.
            </AlertDescription>
          </Alert>
          <Button
            mt={4}
            leftIcon={<FiArrowLeft />}
            onClick={() => navigate("/administrations-console")}
          >
            Back to User List
          </Button>
        </Box>
      </Box>
    );
  }

  return (
    <Box minH="100vh" bg="rgb(25,25,25)">
      <SidebarContent onSettingsOpen={() => setIsSettingsOpen(true)} />
      <MobileNav onSettingsOpen={() => setIsSettingsOpen(true)} />
      <SettingsModal
        isOpen={isSettingsOpen}
        onClose={() => setIsSettingsOpen(false)}
      />

      <MotionBox 
        ml={{ base: 0, md: 60 }} 
        p={{ base: 4, md: 6 }}
        {...fadeIn}
      >
        {/* Breadcrumb Navigation */}
        <Breadcrumb 
          fontSize="sm" 
          color="gray.400" 
          mb={6} 
          separator={<Icon as={FiChevronDown} color="gray.600" />}
        >
          <BreadcrumbItem>
            <BreadcrumbLink as={Box} onClick={() => navigate("/")}><Icon as={FiHome} mr={1} />Home</BreadcrumbLink>
          </BreadcrumbItem>
          <BreadcrumbItem>
            <BreadcrumbLink as={Box} onClick={() => navigate("/administrations-console")}><Icon as={FiUsers} mr={1} />Users</BreadcrumbLink>
          </BreadcrumbItem>
          <BreadcrumbItem isCurrentPage>
            <BreadcrumbLink color="blue.400" fontWeight="medium">
              {userDetails?.preferred_name || `${userDetails?.first_name} ${userDetails?.last_name}` || "User Details"}
            </BreadcrumbLink>
          </BreadcrumbItem>
        </Breadcrumb>

        <MotionFlex 
          direction="column"
          {...staggerContainer}
        >
          {/* Header Section */}
          <MotionFlex 
            justify="space-between" 
            align="center" 
            mb={6} 
            {...slideUp}
          >
            <Heading size="lg" color="white" fontWeight="semibold">
              User Profile
            </Heading>
            <Button
              leftIcon={<FiArrowLeft />}
              onClick={() => navigate("/administrations-console")}
              colorScheme="blue"
              variant="outline"
              size="sm"
              _hover={{ bg: "blue.800", borderColor: "blue.500" }}
            >
              Back to List
            </Button>
          </MotionFlex>

          {/* User Info Section */}
          <MotionCard
            bg="rgb(36,36,36)"
            borderColor="gray.700"
            borderWidth="1px"
            borderRadius="xl"
            overflow="hidden"
            {...slideUp}
            transition={{ delay: 0.1 }}
            mb={6}
            boxShadow="lg"
          >
            {/* Card Header with background gradient */}
            <Box 
              position="relative"
              h="100px"
              bgGradient={`linear(to-r, ${
                userDetails?.role === 'global-administrator' ? 'purple.900' :
                userDetails?.role === 'administrator' ? 'blue.900' :
                userDetails?.role === 'supplier' ? 'green.900' : 'gray.800'
              }, rgb(36,36,36))`}
            >
              <Menu>
                <MenuButton
                  as={IconButton}
                  icon={<FiMoreVertical />}
                  variant="ghost"
                  aria-label="Options"
                  color="white"
                  position="absolute"
                  top={4}
                  right={4}
                  _hover={{ bg: "whiteAlpha.200" }}
                />
                <MenuList bg="rgb(36,36,36)" borderColor="gray.700">
                  <MenuItem
                    icon={<FiEdit />}
                    onClick={onEditModalOpen}
                    color="gray.300"
                    bg="transparent"
                    _hover={{ bg: "gray.700" }}
                  >
                    Edit Account
                  </MenuItem>
                  {userDetails?.is_locked ? (
                    <MenuItem
                      icon={<FiUnlock />}
                      onClick={handleUnlockAccount}
                      color="gray.300"
                      bg="transparent"
                      _hover={{ bg: "gray.700" }}
                    >
                      Unlock Account
                    </MenuItem>
                  ) : (
                    <MenuItem
                      icon={<FiLock />}
                      onClick={handleLockAccount}
                      color="gray.300"
                      bg="transparent"
                      _hover={{ bg: "gray.700" }}
                    >
                      Lock Account
                    </MenuItem>
                  )}
                  {userDetails?.is_verified ? (
                    <MenuItem
                      icon={<FiXCircle />}
                      onClick={handleUnverifyAccount}
                      color="gray.300"
                      bg="transparent"
                      _hover={{ bg: "gray.700" }}
                    >
                      Unverify Account
                    </MenuItem>
                  ) : (
                    <MenuItem
                      icon={<FiCheckCircle />}
                      onClick={handleVerifyAccount}
                      color="gray.300"
                      bg="transparent"
                      _hover={{ bg: "gray.700" }}
                    >
                      Verify Account
                    </MenuItem>
                  )}
                  <MenuItem
                    icon={<FiKey />}
                    onClick={onResetPasswordModalOpen}
                    color="gray.300"
                    bg="transparent"
                    _hover={{ bg: "gray.700" }}
                  >
                    Reset Password
                  </MenuItem>
                </MenuList>
              </Menu>
            </Box>

            <CardBody pt={0} mt="-50px">
              <Flex 
                direction={{ base: "column", md: "row" }} 
                align={{ base: "center", md: "flex-start" }}
                gap={6}
              >
                {/* Avatar Section */}
                <VStack spacing={3} align="center">
                  <Avatar
                    size={avatarSize}
                    name={`${userDetails?.first_name} ${userDetails?.last_name}`}
                    bg={
                      userDetails?.role === 'global-administrator' ? 'purple.500' :
                      userDetails?.role === 'administrator' ? 'blue.500' :
                      userDetails?.role === 'supplier' ? 'green.500' : 'gray.500'
                    }
                    color="white"
                    border="4px solid"
                    borderColor="rgb(36,36,36)"
                    boxShadow="xl"
                  />
                  <VStack spacing={1}>
                    <Text 
                      fontWeight="bold" 
                      fontSize={{ base: "xl", md: "2xl" }} 
                      color="white"
                      textAlign="center"
                    >
                      {userDetails?.preferred_name || `${userDetails?.first_name} ${userDetails?.last_name}`}
                    </Text>
                    <Tag
                      size="md"
                      colorScheme={
                        userDetails?.role === 'global-administrator' ? 'purple' :
                        userDetails?.role === 'administrator' ? 'blue' :
                        userDetails?.role === 'supplier' ? 'green' : 'gray'
                      }
                      borderRadius="full"
                      px={3}
                      py={1}
                    >
                      <Icon 
                        as={
                          userDetails?.role === 'global-administrator' ? FiShield :
                          userDetails?.role === 'administrator' ? FiCpu :
                          userDetails?.role === 'supplier' ? FiBriefcase : FiUser
                        } 
                        mr={1} 
                      />
                      {userDetails?.role
                        ?.replace(/-/g, " ")
                        .replace(/\b\w/g, (l) => l.toUpperCase())}
                    </Tag>
                    {/* Status Indicators */}
                    <HStack spacing={2} mt={2} wrap="wrap" justify="center">
                      <StatusBadge 
                        isActive={!userDetails?.is_inactive}
                        isLocked={userDetails?.is_locked}
                        isVerified={userDetails?.is_verified}
                      />
                    </HStack>
                  </VStack>
                </VStack>

                {/* User details grid */}
                <Box flex="1" mt={{ base: 4, md: 0 }}>
                  <SimpleGrid 
                    columns={{ base: 1, sm: 2 }} 
                    spacing={5}
                    bg="gray.800"
                    p={4}
                    borderRadius="lg"
                    boxShadow="inner"
                  >
                    <InfoItem 
                      icon={FiUser} 
                      label="Full Name" 
                      value={`${userDetails?.first_name} ${userDetails?.last_name}`} 
                    />
                    <InfoItem 
                      icon={FiMail} 
                      label="Email" 
                      value={userDetails?.email}
                    />
                    <InfoItem 
                      icon={FiPhone} 
                      label="Phone" 
                      value={userDetails?.phone_number || "Not provided"} 
                    />
                    <InfoItem 
                      icon={FiMapPin} 
                      label="Location" 
                      value={userDetails?.last_login_location || "Unknown"} 
                    />
                    <InfoItem 
                      icon={FiClock} 
                      label="Last Login" 
                      value={
                        userDetails?.last_login_time
                          ? formatWithTimezone(
                              userDetails?.last_login_time,
                              formatOptions.FULL_DATE_TIME,
                              currentTimezone
                            )
                          : "Never"
                      } 
                      tooltip={
                        userDetails?.last_login_time 
                          ? formatRelativeTime(userDetails?.last_login_time) 
                          : "User has never logged in"
                      }
                    />
                    <InfoItem 
                      icon={FiCalendar} 
                      label="Member Since" 
                      value={
                        userDetails?.created_at
                          ? formatWithTimezone(
                              userDetails?.created_at,
                              formatOptions.FULL_DATE_TIME,
                              currentTimezone
                            )
                          : "Unknown"
                      } 
                      tooltip={
                        userDetails?.created_at 
                          ? formatRelativeTime(userDetails?.created_at) 
                          : ""
                      }
                    />
                  </SimpleGrid>

                  {/* Activity Stats */}
                  <SimpleGrid 
                    columns={{ base: 2, md: 3 }} 
                    spacing={4} 
                    mt={4}
                  >
                    <StatCard
                      label="Sessions"
                      value={totalSessions}
                      icon={FiServer}
                      color="blue"
                    />
                    <StatCard
                      label="Activities"
                      value={totalActivities}
                      icon={FiActivity}
                      color="green"
                    />
                    <StatCard
                      label="Status"
                      value={
                        userDetails?.is_locked 
                          ? "Locked" 
                          : userDetails?.is_inactive 
                          ? "Inactive" 
                          : "Active"
                      }
                      icon={
                        userDetails?.is_locked 
                          ? FiLock 
                          : userDetails?.is_inactive 
                          ? FiAlertOctagon
                          : FiCheckCircle
                      }
                      color={
                        userDetails?.is_locked 
                          ? "red" 
                          : userDetails?.is_inactive 
                          ? "orange" 
                          : "green"
                      }
                    />
                  </SimpleGrid>
                </Box>
              </Flex>
            </CardBody>
          </MotionCard>

          {/* Tabs Section */}
          <MotionBox 
            {...slideUp} 
            transition={{ delay: 0.2 }}
          >
            <Tabs
              isLazy
              variant="soft-rounded"
              colorScheme="blue"
              onChange={handleTabChange}
              size="md"
            >
              <TabList borderColor="gray.700" mb={4} overflowX="auto" py={2}>
                <Tab
                  color="gray.300"
                  _selected={{ color: "white", bg: "blue.500" }}
                  fontWeight="medium"
                  mr={2}
                  px={5}
                >
                  <Icon as={FiServer} mr={2} />
                  Sessions {totalSessions > 0 && (
                    <Badge ml={2} colorScheme="blue" borderRadius="full">{totalSessions}</Badge>
                  )}
                </Tab>
                <Tab
                  color="gray.300"
                  _selected={{ color: "white", bg: "blue.500" }}
                  fontWeight="medium"
                  px={5}
                >
                  <Icon as={FiActivity} mr={2} />
                  Activities {totalActivities > 0 && (
                    <Badge ml={2} colorScheme="blue" borderRadius="full">{totalActivities}</Badge>
                  )}
                </Tab>
              </TabList>

              <TabPanels>
                {/* Sessions Tab */}
                <TabPanel px={0}>
                  <MotionCard
                    bg="rgb(36,36,36)"
                    borderColor="gray.700"
                    borderWidth="1px"
                    borderRadius="lg"
                    overflow="hidden"
                    {...slideUp}
                    mb={6}
                  >
                    <CardHeader pb={0}>
                      <Flex justify="space-between" align="center">
                        <Heading size="md" color="white" fontWeight="medium">
                          User Sessions
                        </Heading>
                        <Button
                          leftIcon={<FiRefreshCw />}
                          size="sm"
                          colorScheme="blue"
                          variant="outline"
                          onClick={() => fetchSessions(true)}
                          isLoading={isLoadingSessions}
                          _hover={{ bg: "blue.800", borderColor: "blue.500" }}
                        >
                          Refresh
                        </Button>
                      </Flex>
                    </CardHeader>

                    <CardBody>
                      {isLoadingSessions && sessions.length === 0 ? (
                        <Center py={8}>
                          <VStack>
                            <Spinner size="lg" color="blue.400" thickness="3px" speed="0.8s" />
                            <Text color="gray.400" mt={2}>Loading sessions...</Text>
                          </VStack>
                        </Center>
                      ) : sessions.length === 0 ? (
                        <EmptyState
                          icon={FiServer}
                          title="No Sessions Found"
                          message="This user doesn't have any recorded sessions."
                          action={
                            <Button
                              onClick={() => fetchSessions(true)}
                              leftIcon={<FiRefreshCw />}
                              colorScheme="blue"
                            >
                              Refresh
                            </Button>
                          }
                        />
                      ) : (
                        <Box
                          id="sessions-container"
                          maxH="60vh"
                          overflowY="auto"
                          sx={{
                            "&::-webkit-scrollbar": {
                              width: "6px",
                            },
                            "&::-webkit-scrollbar-track": {
                              width: "6px",
                              background: "rgb(50,50,50)",
                            },
                            "&::-webkit-scrollbar-thumb": {
                              background: "gray.600",
                              borderRadius: "24px",
                            },
                          }}
                        >
                          <Table variant="simple" size="md">
                            <Thead position="sticky" top={0} zIndex={1} bg="rgb(40,40,40)">
                              <Tr>
                                <Th color="gray.400" fontWeight="semibold" borderColor="gray.700">Device</Th>
                                <Th color="gray.400" fontWeight="semibold" borderColor="gray.700">IP Address</Th>
                                <Th color="gray.400" fontWeight="semibold" borderColor="gray.700">Location</Th>
                                <Th color="gray.400" fontWeight="semibold" borderColor="gray.700">Started</Th>
                                <Th color="gray.400" fontWeight="semibold" borderColor="gray.700">Status</Th>
                              </Tr>
                            </Thead>
                            <Tbody>
                              <InfiniteScroll
                                dataLength={sessions.length}
                                next={fetchSessions}
                                hasMore={hasMoreSessions}
                                loader={
                                  <Tr>
                                    <Td colSpan={5} textAlign="center" py={4}>
                                      <Spinner size="sm" color="blue.400" />
                                    </Td>
                                  </Tr>
                                }
                                scrollableTarget="sessions-container"
                                endMessage={
                                  <Tr>
                                    <Td colSpan={5} textAlign="center" fontSize="sm" color="gray.500" py={3}>
                                      {sessions.length > 0 &&
                                        `Showing all ${sessions.length} sessions`}
                                    </Td>
                                  </Tr>
                                }
                              >
                                {sessions.map((session, idx) => (
                                  <Tr 
                                    key={session.id} 
                                    _hover={{ bg: "gray.800" }}
                                    borderBottomWidth={idx === sessions.length - 1 ? "0" : "1px"}
                                    borderColor="gray.700"
                                    transition="all 0.2s"
                                  >
                                    <Td color="gray.300" borderColor="gray.700">
                                      <HStack>
                                        <Icon
                                          as={
                                            session.device_type === "Mobile"
                                              ? FiSmartphone
                                              : session.device_type === "Tablet"
                                              ? FiTablet
                                              : FiMonitor
                                          }
                                          color={
                                            session.device_type === "Mobile"
                                              ? "blue.400"
                                              : session.device_type === "Tablet"
                                              ? "purple.400"
                                              : "green.400"
                                          }
                                        />
                                        <Text>{session.device_info || "Unknown device"}</Text>
                                      </HStack>
                                    </Td>
                                    <Td color="gray.300" borderColor="gray.700">
                                      <HStack>
                                        <Icon as={FiGlobe} />
                                        <Text>
                                          {session.ip_address || "Unknown IP"}
                                        </Text>
                                      </HStack>
                                    </Td>
                                    <Td color="gray.300" borderColor="gray.700">
                                      {session.location || "Unknown"}
                                    </Td>
                                    <Td color="gray.300" borderColor="gray.700">
                                      <Tooltip
                                        label={
                                          session.created_at
                                            ? formatWithTimezone(
                                                session.created_at,
                                                formatOptions.FULL_DATE_TIME,
                                                currentTimezone
                                              )
                                            : "Unknown"
                                        }
                                        placement="top"
                                        hasArrow
                                      >
                                        <Text>
                                          {session.created_at
                                            ? formatRelativeTime(session.created_at)
                                            : "Unknown"}
                                        </Text>
                                      </Tooltip>
                                    </Td>
                                    <Td borderColor="gray.700">
                                      <Badge
                                        colorScheme={
                                          new Date(session.expired_at) > new Date()
                                            ? "green"
                                            : "red"
                                        }
                                        borderRadius="full"
                                        px={2}
                                        py={1}
                                        fontWeight="medium"
                                      >
                                        {new Date(session.expired_at) > new Date()
                                          ? "Active"
                                          : "Expired"}
                                      </Badge>
                                    </Td>
                                  </Tr>
                                ))}
                              </InfiniteScroll>
                            </Tbody>
                          </Table>
                        </Box>
                      )}
                    </CardBody>
                  </MotionCard>
                </TabPanel>

                {/* Activities Tab */}
                <TabPanel px={0}>
                  <MotionCard
                    bg="rgb(36,36,36)"
                    borderColor="gray.700"
                    borderWidth="1px"
                    borderRadius="lg"
                    overflow="hidden"
                    {...slideUp}
                    mb={6}
                  >
                    <CardHeader pb={0}>
                      <Flex 
                        justify="space-between" 
                        align={{ base: "stretch", md: "center" }}
                        direction={{ base: "column", md: "row" }}
                        gap={3}
                      >
                        <Heading size="md" color="white" fontWeight="medium">
                          User Activities
                        </Heading>
                        <HStack>
                          <Button
                            leftIcon={<FiFilter />}
                            size="sm"
                            variant="outline"
                            onClick={() => setIsFilterOpen(!isFilterOpen)}
                            color={isFilterOpen ? "blue.400" : "gray.400"}
                            borderColor={isFilterOpen ? "blue.400" : "gray.600"}
                            _hover={{ bg: "blue.800", borderColor: "blue.500", color: "white" }}
                          >
                            {isFilterOpen ? "Hide Filters" : "Show Filters"}
                          </Button>
                          <Button
                            leftIcon={<FiRefreshCw />}
                            size="sm"
                            colorScheme="blue"
                            variant="outline"
                            onClick={() => fetchActivities(true)}
                            isLoading={isLoadingActivities}
                            _hover={{ bg: "blue.800", borderColor: "blue.500" }}
                          >
                            Refresh
                          </Button>
                        </HStack>
                      </Flex>
                    </CardHeader>

                    <CardBody>
                      {/* Filters */}
                      <MotionBox
                        initial={{ opacity: 0, height: 0 }}
                        animate={{ 
                          opacity: isFilterOpen ? 1 : 0, 
                          height: isFilterOpen ? "auto" : 0,
                          marginBottom: isFilterOpen ? 4 : 0
                        }}
                        transition={{ duration: 0.3 }}
                        overflow="hidden"
                      >
                        <Box
                          p={4}
                          bg="gray.800"
                          borderRadius="md"
                          borderWidth="1px"
                          borderColor="gray.700"
                        >
                          <SimpleGrid
                            columns={{ base: 1, md: 2, lg: 4 }}
                            spacing={4}
                            mb={4}
                          >
                            <FormControl>
                              <FormLabel fontSize="sm" color="gray.300" mb={1}>
                                <Icon as={FiActivity} mr={1} />
                                Activity Type
                              </FormLabel>
                              <Select
                                size="sm"
                                name="type"
                                value={activityFilters.type}
                                onChange={handleFilterChange}
                                bg="gray.700"
                                color="white"
                                borderColor="gray.600"
                                _hover={{ borderColor: "blue.300" }}
                                _focus={{ borderColor: "blue.500", boxShadow: "0 0 0 1px var(--chakra-colors-blue-500)" }}
                              >
                                <option value="">All Types</option>
                                <option value="Authentication">Authentication</option>
                                <option value="Create">Create</option>
                                <option value="Modify">Modify</option>
                                <option value="Delete">Delete</option>
                                <option value="Lock">Lock</option>
                                <option value="UnLock">Unlock</option>
                                <option value="Verify">Verify</option>
                                <option value="Unverify">Unverify</option>
                                <option value="Terminate">Terminate</option>
                              </Select>
                            </FormControl>

                            <FormControl>
                              <FormLabel fontSize="sm" color="gray.300" mb={1}>
                                <Icon as={FiFileText} mr={1} />
                                Action
                              </FormLabel>
                              <Input
                                size="sm"
                                name="action"
                                value={activityFilters.action}
                                onChange={handleFilterChange}
                                placeholder="Filter by action"
                                bg="gray.700"
                                color="white"
                                borderColor="gray.600"
                                _hover={{ borderColor: "blue.300" }}
                                _focus={{ borderColor: "blue.500", boxShadow: "0 0 0 1px var(--chakra-colors-blue-500)" }}
                              />
                            </FormControl>

                            <FormControl>
                              <FormLabel fontSize="sm" color="gray.300" mb={1}>
                                <Icon as={FiCalendar} mr={1} />
                                From Date
                              </FormLabel>
                              <Input
                                size="sm"
                                type="date"
                                name="from_date"
                                value={activityFilters.from_date}
                                onChange={handleFilterChange}
                                bg="gray.700"
                                color="white"
                                borderColor="gray.600"
                                _hover={{ borderColor: "blue.300" }}
                                _focus={{ borderColor: "blue.500", boxShadow: "0 0 0 1px var(--chakra-colors-blue-500)" }}
                              />
                            </FormControl>

                            <FormControl>
                              <FormLabel fontSize="sm" color="gray.300" mb={1}>
                                <Icon as={FiCalendar} mr={1} />
                                To Date
                              </FormLabel>
                              <Input
                                size="sm"
                                type="date"
                                name="to_date"
                                value={activityFilters.to_date}
                                onChange={handleFilterChange}
                                bg="gray.700"
                                color="white"
                                borderColor="gray.600"
                                _hover={{ borderColor: "blue.300" }}
                                _focus={{ borderColor: "blue.500", boxShadow: "0 0 0 1px var(--chakra-colors-blue-500)" }}
                              />
                            </FormControl>
                          </SimpleGrid>

                          <Flex justify="flex-end" gap={3}>
                            <Button
                              size="sm"
                              variant="ghost"
                              onClick={resetFilters}
                              _hover={{ bg: "gray.700" }}
                              leftIcon={<FiX />}
                            >
                              Clear All
                            </Button>
                            <Button
                              size="sm"
                              colorScheme="blue"
                              onClick={applyFilters}
                              leftIcon={<FiFilter />}
                            >
                              Apply Filters
                            </Button>
                          </Flex>
                        </Box>
                      </MotionBox>

                      {isLoadingActivities && activities.length === 0 ? (
                        <Center py={8}>
                          <VStack>
                            <Spinner size="lg" color="blue.400" thickness="3px" speed="0.8s" />
                            <Text color="gray.400" mt={2}>Loading activities...</Text>
                          </VStack>
                        </Center>
                      ) : activities.length === 0 ? (
                        <EmptyState
                          icon={FiActivity}
                          title="No Activities Found"
                          message="There are no activities recorded for this user."
                          action={
                            <Button
                              onClick={() => fetchActivities(true)}
                              leftIcon={<FiRefreshCw />}
                              colorScheme="blue"
                            >
                              Refresh
                            </Button>
                          }
                        />
                      ) : (
                        <Box
                          id="activities-container"
                          maxH="60vh"
                          overflowY="auto"
                          sx={{
                            "&::-webkit-scrollbar": {
                              width: "6px",
                            },
                            "&::-webkit-scrollbar-track": {
                              width: "6px",
                              background: "rgb(50,50,50)",
                            },
                            "&::-webkit-scrollbar-thumb": {
                              background: "gray.600",
                              borderRadius: "24px",
                            },
                          }}
                        >
                          <Table variant="simple" size="md">
                            <Thead position="sticky" top={0} zIndex={1} bg="rgb(40,40,40)">
                              <Tr>
                                <Th color="gray.400" fontWeight="semibold" borderColor="gray.700">Type</Th>
                                <Th color="gray.400" fontWeight="semibold" borderColor="gray.700">Action</Th>
                                <Th color="gray.400" fontWeight="semibold" borderColor="gray.700">Summary</Th>
                                <Th color="gray.400" fontWeight="semibold" borderColor="gray.700">Date</Th>
                              </Tr>
                            </Thead>
                            <Tbody>
                              <InfiniteScroll
                                dataLength={activities.length}
                                next={fetchActivities}
                                hasMore={hasMoreActivities}
                                loader={
                                  <Tr>
                                    <Td colSpan={4} textAlign="center" py={4}>
                                      <Spinner size="sm" color="blue.400" />
                                    </Td>
                                  </Tr>
                                }
                                scrollableTarget="activities-container"
                                endMessage={
                                  <Tr>
                                    <Td colSpan={4} textAlign="center" fontSize="sm" color="gray.500" py={3}>
                                      {activities.length > 0 &&
                                        `Showing all ${activities.length} activities`}
                                    </Td>
                                  </Tr>
                                }
                              >
                                {activities.map((activity, idx) => (
                                  <Tr 
                                    key={activity.id} 
                                    _hover={{ bg: "gray.800" }}
                                    borderBottomWidth={idx === activities.length - 1 ? "0" : "1px"}
                                    borderColor="gray.700"
                                    transition="all 0.2s"
                                  >
                                    <Td borderColor="gray.700">{formatActivityType(activity.type)}</Td>
                                    <Td color="gray.300" borderColor="gray.700">
                                      <Text fontWeight="medium">{activity.action}</Text>
                                    </Td>
                                    <Td color="gray.300" borderColor="gray.700">
                                      <Text
                                        noOfLines={2}
                                        title={activity.summary}
                                      >
                                        {activity.summary}
                                      </Text>
                                    </Td>
                                    <Td color="gray.300" borderColor="gray.700">
                                      <Tooltip
                                        label={formatWithTimezone(
                                          activity.created_at,
                                          formatOptions.FULL_DATE_TIME,
                                          currentTimezone
                                        )}
                                        placement="top"
                                        hasArrow
                                      >
                                        <Text>
                                          {formatRelativeTime(activity.created_at)}
                                        </Text>
                                      </Tooltip>
                                    </Td>
                                  </Tr>
                                ))}
                              </InfiniteScroll>
                            </Tbody>
                          </Table>
                        </Box>
                      )}
                    </CardBody>
                  </MotionCard>
                </TabPanel>
              </TabPanels>
            </Tabs>
          </MotionBox>
        </MotionFlex>

        {/* Edit Account Modal */}
        {userDetails && (
          <EditAccountModal
            isOpen={isEditModalOpen}
            onClose={onEditModalClose}
            user={userDetails}
            onSuccess={handleUserUpdate}
          />
        )}

        {/* Reset Password Modal */}
        <ResetPasswordModal
          isOpen={isResetPasswordModalOpen}
          onClose={onResetPasswordModalClose}
          user={userDetails}
          onSuccess={handlePasswordReset}
        />
      </MotionBox>
    </Box>
  );
};

// Info item component for user details
const InfoItem = ({ icon, label, value, tooltip }) => {
  return (
    <Box>
      <Text
        fontSize="xs"
        color="gray.500"
        mb={0.5}
        textTransform="uppercase"
        letterSpacing="wider"
      >
        {label}
      </Text>
      <HStack spacing={2} color="gray.300">
        <Icon as={icon} color="gray.400" />
        {tooltip ? (
          <Tooltip label={tooltip} placement="top" hasArrow>
            <Text>{value}</Text>
          </Tooltip>
        ) : (
          <Text>{value}</Text>
        )}
      </HStack>
    </Box>
  );
};

// Stat card component
const StatCard = ({ label, value, icon, color }) => {
  return (
    <Box 
      bg="gray.800" 
      p={3} 
      borderRadius="lg" 
      _hover={{ bg: "gray.750", transform: "translateY(-2px)" }}
      transition="all 0.2s"
      boxShadow="sm"
    >
      <Flex align="center">
        <Box
          p={2}
          borderRadius="md"
          bg={`${color}.900`}
          color={`${color}.200`}
          mr={3}
        >
          <Icon as={icon} boxSize={5} />
        </Box>
        <Box>
          <Text fontSize="xs" color="gray.500" textTransform="uppercase">
            {label}
          </Text>
          <Text fontSize="lg" fontWeight="bold" color="white">
            {value}
          </Text>
        </Box>
      </Flex>
    </Box>
  );
};

// Status badge component
const StatusBadge = ({ isActive, isLocked, isVerified }) => {
  return (
    <>
      <Badge
        px={2}
        py={0.5}
        borderRadius="md"
        colorScheme={isActive ? "green" : "gray"}
        variant={isActive ? "solid" : "subtle"}
      >
        <Icon as={isActive ? FiCheckCircle : FiX} mr={1} />
        {isActive ? "Active" : "Inactive"}
      </Badge>
      <Badge
        px={2}
        py={0.5}
        borderRadius="md"
        colorScheme={isVerified ? "teal" : "yellow"}
        variant={isVerified ? "solid" : "subtle"}
      >
        <Icon as={isVerified ? FiCheckSquare : FiAlertCircle} mr={1} />
        {isVerified ? "Verified" : "Unverified"}
      </Badge>
      <Badge
        px={2}
        py={0.5}
        borderRadius="md"
        colorScheme={!isLocked ? "green" : "red"}
        variant={!isLocked ? "outline" : "solid"}
      >
        <Icon as={isLocked ? FiLock : FiUnlock} mr={1} />
        {isLocked ? "Locked" : "Unlocked"}
      </Badge>
    </>
  );
};

export default AdministrationDetails;