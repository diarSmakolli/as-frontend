import React from 'react';
import {
  Box,
  VStack,
  HStack,
  Text,
  Checkbox,
  SimpleGrid,
  Tag,
  TagLabel,
  TagCloseButton,
  Wrap,
  WrapItem,
  Badge,
  Accordion,
  AccordionItem,
  AccordionButton,
  AccordionPanel,
  AccordionIcon,
  useColorModeValue,
  Image,
  Center,
  Icon,
} from '@chakra-ui/react';
import { FiFolder, FiBookOpen, FiChevronRight } from 'react-icons/fi';

const CategoriesSelector = ({ categories, selectedCategories, onCategoriesChange }) => {
  const bgColor = useColorModeValue("white", "gray.800");
  const borderColor = useColorModeValue("gray.200", "gray.600");
  const parentBgColor = useColorModeValue("blue.50", "blue.900");
  const childBgColor = useColorModeValue("gray.50", "gray.700");
  const level2BgColor = useColorModeValue("purple.50", "purple.900");

  const handleCategoryToggle = (categoryId) => {
    console.log('Toggling category:', categoryId);
    console.log('Current selected:', selectedCategories);
    
    const newSelected = selectedCategories.includes(categoryId)
      ? selectedCategories.filter(id => id !== categoryId)
      : [...selectedCategories, categoryId];
    
    console.log('New selected:', newSelected);
    onCategoriesChange(newSelected);
  };

  // Flatten all categories for search and display
  const flattenCategories = (categoryList, level = 0) => {
    let flattened = [];
    
    categoryList.forEach(category => {
      flattened.push({
        ...category,
        level,
        path: buildCategoryPath(category, categoryList)
      });
      
      if (category.children && category.children.length > 0) {
        flattened = [...flattened, ...flattenCategories(category.children, level + 1)];
      }
    });
    
    return flattened;
  };

  // Build full category path for display
  const buildCategoryPath = (category, allCategories, path = []) => {
    if (category.parent_id) {
      const parent = findCategoryById(allCategories, category.parent_id);
      if (parent) {
        path = buildCategoryPath(parent, allCategories, path);
      }
    }
    path.push(category.name);
    return path;
  };

  // Find category by ID in nested structure
  const findCategoryById = (categoryList, id) => {
    for (const category of categoryList) {
      if (category.id === id) {
        return category;
      }
      if (category.children && category.children.length > 0) {
        const found = findCategoryById(category.children, id);
        if (found) return found;
      }
    }
    return null;
  };

  // Get category display name with full path
  const getCategoryDisplayName = (category) => {
    if (category.path) {
      return category.path.join(' > ');
    }
    return category.name;
  };

  // Render a single category item with proper indentation
  const renderCategoryItem = (category, level = 0) => {
    const hasChildren = category.children && category.children.length > 0;
    const isSelected = selectedCategories.includes(category.id);
    const paddingLeft = level * 6; // Increase padding for better hierarchy visualization

    // Choose background color based on level
    let bgColorForLevel = parentBgColor;
    if (level === 1) bgColorForLevel = childBgColor;
    if (level === 2) bgColorForLevel = level2BgColor;

    return (
      <Box key={category.id}>
        {/* Category Item */}
        <Box
          pl={paddingLeft}
          py={3}
          px={4}
          bg={bgColorForLevel}
          borderRadius="md"
          border="1px"
          borderColor={isSelected ? "blue.400" : borderColor}
          mb={2}
          boxShadow={isSelected ? "0 0 0 2px rgba(66, 153, 225, 0.3)" : "none"}
          _hover={{ 
            borderColor: "blue.300",
            boxShadow: "0 0 0 1px rgba(66, 153, 225, 0.2)"
          }}
          transition="all 0.2s"
        >
          <Checkbox
            isChecked={isSelected}
            onChange={() => handleCategoryToggle(category.id)}
            colorScheme="blue"
            size="md"
          >
            <HStack spacing={3} align="center">
              {/* Category Image */}
              {category.image_url ? (
                <Box
                  boxSize="32px"
                  borderRadius="md"
                  overflow="hidden"
                  border="1px"
                  borderColor="gray.200"
                >
                  <Image
                    src={FiBookOpen.image_url}
                    alt={category.name}
                    boxSize="100%"
                    objectFit="cover"
                    fallback={
                      <Center bg="gray.100" boxSize="100%">
                        <Icon as={hasChildren ? FiBookOpen : FiFolder} color="gray.400" />
                      </Center>
                    }
                  />
                </Box>
              ) : (
                <Icon 
                  as={hasChildren ? FiBookOpen : FiFolder} 
                  fontSize="xl" 
                  color={level === 0 ? "blue.500" : level === 1 ? "purple.500" : "orange.500"} 
                />
              )}
              
              {/* Category Info */}
              <VStack align="start" spacing={0} flex={1}>
                <HStack spacing={2} align="center">
                  <Text 
                    fontSize="sm" 
                    color="gray.800" 
                    fontWeight={level === 0 ? "semibold" : level === 1 ? "medium" : "normal"}
                  >
                    {category.name}
                  </Text>
                  
                  {/* Level indicator */}
                  <Badge 
                    size="xs" 
                    colorScheme={level === 0 ? "blue" : level === 1 ? "purple" : "orange"}
                    variant="subtle"
                  >
                    Level {level}
                  </Badge>
                  
                  {/* Children count */}
                  {hasChildren && (
                    <Badge size="xs" colorScheme="gray" variant="outline">
                      {category.children.length} sub{category.children.length === 1 ? '' : 's'}
                    </Badge>
                  )}
                  
                  {/* Meta info */}
                  {category.is_parent && (
                    <Badge size="xs" colorScheme="green" variant="subtle">
                      Parent
                    </Badge>
                  )}
                </HStack>
                
                {/* Description */}
                {category.description && (
                  <Text fontSize="xs" color="gray.600" noOfLines={1}>
                    {category.description}
                  </Text>
                )}
              </VStack>
            </HStack>
          </Checkbox>
        </Box>

        {/* Children Categories */}
        {hasChildren && (
          <Box ml={2} mt={1} mb={2}>
            {category.children.map(child => renderCategoryItem(child, level + 1))}
          </Box>
        )}
      </Box>
    );
  };

  // Render flat view for easier browsing
  const renderFlatView = () => {
    const flatCategories = flattenCategories(categories);
    
    return (
      <SimpleGrid columns={{ base: 1, md: 2 }} spacing={3}>
        {flatCategories.map(category => {
          const isSelected = selectedCategories.includes(category.id);
          const displayName = getCategoryDisplayName(category);
          
          return (
            <Box
              key={category.id}
              p={3}
              bg={category.level === 0 ? parentBgColor : category.level === 1 ? childBgColor : level2BgColor}
              borderRadius="md"
              border="1px"
              borderColor={isSelected ? "blue.400" : borderColor}
              _hover={{ borderColor: "blue.300" }}
              boxShadow={isSelected ? "0 0 0 2px rgba(66, 153, 225, 0.3)" : "none"}
              transition="all 0.2s"
            >
              <Checkbox
                isChecked={isSelected}
                onChange={() => handleCategoryToggle(category.id)}
                colorScheme="blue"
                size="md"
              >
                <VStack align="start" spacing={2}>
                  <HStack spacing={2} align="center">
                    {/* Category Image */}
                    {category.image_url ? (
                      <Box
                        boxSize="24px"
                        borderRadius="sm"
                        overflow="hidden"
                        border="1px"
                        borderColor="gray.200"
                      >
                        <Image
                          src={category.image_url}
                          alt={category.name}
                          boxSize="100%"
                          objectFit="cover"
                          fallback={
                            <Center bg="gray.100" boxSize="100%">
                              <Icon as={FiFolder} color="gray.400" fontSize="xs" />
                            </Center>
                          }
                        />
                      </Box>
                    ) : (
                      <Icon 
                        as={FiFolder} 
                        fontSize="sm" 
                        color={category.level === 0 ? "blue.500" : category.level === 1 ? "purple.500" : "orange.500"} 
                      />
                    )}
                    
                    <Text 
                      fontSize="sm" 
                      color="gray.800" 
                      fontWeight={category.level === 0 ? "semibold" : "normal"}
                    >
                      {category.name}
                    </Text>
                    
                    <Badge 
                      size="xs" 
                      colorScheme={category.level === 0 ? "blue" : category.level === 1 ? "purple" : "orange"}
                      variant="subtle"
                    >
                      L{category.level}
                    </Badge>
                  </HStack>
                  
                  {/* Full path for nested categories */}
                  {category.level > 0 && (
                    <Text fontSize="xs" color="gray.500" fontStyle="italic">
                      {displayName}
                    </Text>
                  )}
                  
                  {/* Description */}
                  {category.description && (
                    <Text fontSize="xs" color="gray.600" noOfLines={2}>
                      {category.description}
                    </Text>
                  )}
                </VStack>
              </Checkbox>
            </Box>
          );
        })}
      </SimpleGrid>
    );
  };

  if (!categories || categories.length === 0) {
    return (
      <Box
        p={8}
        textAlign="center"
        borderRadius="md"
        bg="gray.50"
        border="1px dashed"
        borderColor="gray.200"
      >
        <Text color="gray.500">No categories available</Text>
      </Box>
    );
  }

  return (
    <VStack spacing={6} align="stretch">
      <Box>
        {/* Category Views */}
        <Accordion allowToggle defaultIndex={[0]}>
          <AccordionItem border="none">
            <AccordionButton
              px={0}
              _hover={{ bg: "transparent" }}
              _expanded={{ bg: "transparent" }}
            >
              <Box flex="1" textAlign="left">
                <Text fontSize="md" fontWeight="medium" color="gray.700">
                  Product Categories ({flattenCategories(categories).length} total)
                </Text>
                <Text fontSize="sm" color="gray.500">
                  Choose from hierarchical categories including parent and child categories
                </Text>
              </Box>
              <AccordionIcon />
            </AccordionButton>
            <AccordionPanel px={0} pb={4}>
              {/* Hierarchical Tree View */}
              <Box mb={6}>
                <Text fontSize="sm" fontWeight="medium" color="gray.600" mb={3}>
                  📁 Hierarchical Tree View:
                </Text>
                <VStack spacing={2} align="stretch">
                  {categories.map(category => renderCategoryItem(category, 0))}
                </VStack>
              </Box>

              {/* Separator */}
              <Box my={6} borderTop="1px" borderColor="gray.200" />

              {/* Flat Grid View */}
              <Box>
                <Text fontSize="sm" fontWeight="medium" color="gray.600" mb={3}>
                  📋 All Categories (Flat View):
                </Text>
                {renderFlatView()}
              </Box>
            </AccordionPanel>
          </AccordionItem>
        </Accordion>
      </Box>
      
      {/* Selected Categories Display */}
      {selectedCategories.length > 0 && (
        <Box>
          <HStack mb={3}>
            <Text fontSize="md" fontWeight="medium" color="gray.700">
              Selected Categories
            </Text>
            <Badge colorScheme="blue" variant="solid">
              {selectedCategories.length}
            </Badge>
          </HStack>
          
          <Wrap spacing={2}>
            {selectedCategories.map(categoryId => {
              const category = findCategoryById(categories, categoryId);
              if (!category) return null;
              
              const displayName = getCategoryDisplayName({
                ...category,
                path: buildCategoryPath(category, categories)
              });
              
              return (
                <WrapItem key={categoryId}>
                  <Tag
                    size="md"
                    colorScheme={category.level === 0 ? "blue" : category.level === 1 ? "purple" : "orange"}
                    variant="solid"
                    borderRadius="full"
                  >
                    <HStack spacing={1}>
                      {category.image_url ? (
                        <Box
                          boxSize="16px"
                          borderRadius="sm"
                          overflow="hidden"
                          mr={1}
                        >
                          <Image
                            src={category.image_url}
                            alt={category.name}
                            boxSize="100%"
                            objectFit="cover"
                          />
                        </Box>
                      ) : (
                        <Icon as={FiFolder} fontSize="xs" />
                      )}
                      <TagLabel fontSize="xs">{category.name}</TagLabel>
                    </HStack>
                    <TagCloseButton
                      onClick={() => handleCategoryToggle(categoryId)}
                    />
                  </Tag>
                </WrapItem>
              );
            })}
          </Wrap>

          {/* Selection Summary */}
          <Box mt={4} p={4} bg="blue.50" borderRadius="md" borderLeft="4px" borderColor="blue.400">
            <VStack align="start" spacing={1}>
              <Text fontSize="sm" color="blue.800" fontWeight="medium">
                Category Selection Summary:
              </Text>
              <Text fontSize="xs" color="blue.700">
                • {selectedCategories.filter(id => {
                  const cat = findCategoryById(categories, id);
                  return cat && cat.level === 0;
                }).length} parent categories selected
              </Text>
              <Text fontSize="xs" color="blue.700">
                • {selectedCategories.filter(id => {
                  const cat = findCategoryById(categories, id);
                  return cat && cat.level === 1;
                }).length} level-1 subcategories selected
              </Text>
              <Text fontSize="xs" color="blue.700">
                • {selectedCategories.filter(id => {
                  const cat = findCategoryById(categories, id);
                  return cat && cat.level >= 2;
                }).length} level-2+ subcategories selected
              </Text>
              <Text fontSize="xs" color="blue.700">
                • Categories help organize your products for better customer navigation
              </Text>
            </VStack>
          </Box>
        </Box>
      )}
    </VStack>
  );
};

export default CategoriesSelector;
