import React, { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import {
  Box,
  Flex,
  Heading,
  Text,
  Button,
  useToast,
  VStack,
  HStack,
  Icon,
  Card,
  CardBody,
  CardHeader,
  Badge,
  SimpleGrid,
  Image,
  AspectRatio,
  Center,
  Wrap,
  WrapItem,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  TableContainer,
  Tag,
  TagLabel,
  Tooltip,
  useColorModeValue,
  Alert,
  AlertIcon,
  AlertDescription,
  Container,
  Stat,
  StatLabel,
  StatNumber,
  StatGroup,
  Accordion,
  AccordionItem,
  AccordionButton,
  AccordionPanel,
  AccordionIcon,
  useDisclosure,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalBody,
  ModalCloseButton,
  IconButton,
  Divider,
  Grid,
  GridItem,
} from "@chakra-ui/react";
import { motion } from "framer-motion";
import {
  FiArrowLeft,
  FiEdit,
  FiHome,
  FiPackage,
  FiDollarSign,
  FiTag,
  FiTool,
  FiTruck,
  FiAward,
  FiZap,
  FiStar,
  FiCheckCircle,
  FiXCircle,
  FiInfo,
  FiGlobe,
  FiCalendar,
  FiBox,
  FiChevronLeft,
  FiChevronRight,
  FiMaximize2,
  FiExternalLink,
  FiCopy,
  FiShoppingBag,
  FiSettings,
} from "react-icons/fi";
import { productService } from './services/productService';
import { useAuth } from "../administration/authContext/authContext";
import { usePreferences } from "../administration/authContext/preferencesProvider";
import SidebarContent from "../administration/layouts/SidebarContent";
import MobileNav from "../administration/layouts/MobileNav";
import SettingsModal from "../administration/components/settings/SettingsModal";
import { handleApiError } from "../../commons/handleApiError";
import Loader from "../../commons/Loader";
import { formatWithTimezone, formatOptions } from "../../commons/formatOptions";

const MotionBox = motion.create(Box);
const MotionCard = motion.create(Card);

const ProductDetailsPage = () => {
  const { productId } = useParams();
  const navigate = useNavigate();
  const toast = useToast();
  const { account, isLoading: isAuthLoading } = useAuth();
  const { currentTimezone } = usePreferences();
  const [isSettingsOpen, setIsSettingsOpen] = useState(false);
  const [product, setProduct] = useState(null);
  const [loading, setLoading] = useState(true);
  const [selectedImageIndex, setSelectedImageIndex] = useState(0);
  const { isOpen: isImageModalOpen, onOpen: onImageModalOpen, onClose: onImageModalClose } = useDisclosure();

  // Color mode values
  const bgColor = useColorModeValue("gray.50", "gray.900");
  const cardBg = useColorModeValue("white", "gray.800");
  const borderColor = useColorModeValue("gray.200", "gray.700");

  const fadeIn = {
    initial: { opacity: 0 },
    animate: { opacity: 1 },
    transition: { duration: 0.3 },
  };

  const slideUp = {
    initial: { opacity: 0, y: 10 },
    animate: { opacity: 1, y: 0 },
    transition: { duration: 0.3 },
  };

  useEffect(() => {
    if (productId) {
      fetchProductDetails();
    }
  }, [productId]);

  const fetchProductDetails = async () => {
    setLoading(true);
    try {
      const response = await productService.getProductById(productId);
      
      if (response.data?.status === 'success') {
        setProduct(response.data.data.product);
      } else {
        throw new Error('Product not found');
      }
    } catch (error) {
      console.error('Error fetching product details:', error);
      handleApiError(error, toast);
      navigate('/products-console');
    } finally {
      setLoading(false);
    }
  };

  const formatPrice = (price) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2,
    }).format(price);
  };

  const getStatusColor = (product) => {
    if (!product.is_active) return 'red';
    if (!product.is_published) return 'yellow';
    return 'green';
  };

  const getStatusText = (product) => {
    if (!product.is_active) return 'Inactive';
    if (!product.is_published) return 'Draft';
    return 'Published';
  };

  const copyToClipboard = (text, label) => {
    navigator.clipboard.writeText(text);
    toast({
      title: 'Copied!',
      description: `${label} copied to clipboard`,
      status: 'success',
      duration: 2000,
      isClosable: true,
    });
  };

  const handleImageNavigation = (direction) => {
    if (direction === 'next' && selectedImageIndex < product.images.length - 1) {
      setSelectedImageIndex(selectedImageIndex + 1);
    } else if (direction === 'prev' && selectedImageIndex > 0) {
      setSelectedImageIndex(selectedImageIndex - 1);
    }
  };

  if (isAuthLoading || loading) {
    return <Loader />;
  }

  if (!product) {
    return (
      <Box minH="100vh" bg={bgColor}>
        <SidebarContent onSettingsOpen={() => setIsSettingsOpen(true)} />
        <MobileNav onSettingsOpen={() => setIsSettingsOpen(true)} />
        <Box ml={{ base: 0, md: 60 }} p="8">
          <Alert status="error" borderRadius="xl" boxShadow="lg">
            <AlertIcon />
            <AlertDescription>Product not found or has been removed.</AlertDescription>
          </Alert>
          <Button
            mt={6}
            leftIcon={<FiArrowLeft />}
            onClick={() => navigate("/products-console")}
            colorScheme="blue"
            size="lg"
          >
            Back to Products
          </Button>
        </Box>
      </Box>
    );
  }

  return (
    <Box minH="100vh" bg={bgColor}>
      <SidebarContent onSettingsOpen={() => setIsSettingsOpen(true)} />
      <MobileNav onSettingsOpen={() => setIsSettingsOpen(true)} />
      <SettingsModal isOpen={isSettingsOpen} onClose={() => setIsSettingsOpen(false)} />

      <Box ml={{ base: 0, md: 60 }}>
        <Container maxW="8xl" px={{ base: 3, md: 6 }} py={6}>
          <MotionBox {...fadeIn}>
            {/* Clean Breadcrumb */}
            <HStack spacing={1} mb={4} fontSize="xs" color="gray.500">
              <Icon as={FiHome} fontSize="xs" />
              <Text cursor="pointer" onClick={() => navigate("/")} _hover={{ color: "blue.500" }}>
                Home
              </Text>
              <Text>•</Text>
              <Text cursor="pointer" onClick={() => navigate("/products-console")} _hover={{ color: "blue.500" }}>
                Products
              </Text>
              <Text>•</Text>
              <Text color="blue.500" fontWeight="600" noOfLines={1}>
                {product.title}
              </Text>
            </HStack>

            {/* Clean Header */}
            <Flex justify="space-between" align="center" mb={6}>
              <VStack align="start" spacing={1}>
                <HStack spacing={2}>
                  <Heading size="lg" color="gray.900" fontWeight="700" noOfLines={1}>
                    {product.title}
                  </Heading>
                  <Badge
                    colorScheme={getStatusColor(product)}
                    variant="solid"
                    fontSize="xs"
                    px={2}
                    py={1}
                    borderRadius="md"
                  >
                    {getStatusText(product)}
                  </Badge>
                </HStack>
                <HStack spacing={3} fontSize="xs" color="gray.600">
                  <HStack>
                    <Icon as={FiBox} />
                    <Text fontWeight="600" fontFamily="mono">SKU: {product.sku}</Text>
                    <Tooltip label="Copy SKU">
                      <IconButton
                        icon={<FiCopy />}
                        size="xs"
                        variant="ghost"
                        onClick={() => copyToClipboard(product.sku, 'SKU')}
                        aria-label="Copy SKU"
                      />
                    </Tooltip>
                  </HStack>
                  <Text>•</Text>
                  <HStack>
                    <Icon as={FiCalendar} />
                    <Text>Created {formatWithTimezone(product.created_at, formatOptions.SHORT_DATE, currentTimezone)}</Text>
                  </HStack>
                </HStack>
              </VStack>
              <HStack spacing={2}>
                <Button
                  leftIcon={<FiArrowLeft />}
                  onClick={() => navigate('/products-console')}
                  variant="outline"
                  colorScheme="gray"
                  size="sm"
                  fontSize="xs"
                >
                  Back
                </Button>
                <Button
                  leftIcon={<FiEdit />}
                  onClick={() => navigate(`/products-console/${productId}/edit`)}
                  colorScheme="blue"
                  size="sm"
                  fontSize="xs"
                >
                  Edit
                </Button>
              </HStack>
            </Flex>

            {/* Main Two-Column Layout - 50% each */}
            <Grid templateColumns={{ base: "1fr", lg: "1fr 1fr" }} gap={6} mb={6}>
              {/* Left Column - Images (50%) */}
              <GridItem>
                <MotionCard {...slideUp} bg={cardBg} borderRadius="12px" overflow="hidden" borderWidth="1px" borderColor={borderColor} h="fit-content">
                  <CardHeader py={3}>
                    <HStack>
                      <Icon as={FiShoppingBag} color="blue.500" fontSize="sm" />
                      <Heading size="sm" color="gray.900" fontWeight="600">
                        Product Images
                      </Heading>
                      <Badge variant="outline" fontSize="xs">
                        {product.images.length} {product.images.length === 1 ? 'image' : 'images'}
                      </Badge>
                    </HStack>
                  </CardHeader>
                  <CardBody pt={0}>
                    <VStack spacing={4}>
                      {/* Main Image */}
                      <Box position="relative" w="100%">
                        <AspectRatio ratio={1} w="100%">
                          <Image
                            src={product.images[selectedImageIndex]?.url || product.main_image_url}
                            alt={product.title}
                            objectFit="cover"
                            cursor="pointer"
                            onClick={onImageModalOpen}
                            _hover={{ opacity: 0.9 }}
                            transition="opacity 0.2s"
                            borderRadius="md"
                          />
                        </AspectRatio>
                        
                        {/* Image Navigation */}
                        {product.images.length > 1 && (
                          <>
                            <IconButton
                              icon={<FiChevronLeft />}
                              position="absolute"
                              left={2}
                              top="50%"
                              transform="translateY(-50%)"
                              size="sm"
                              colorScheme="blackAlpha"
                              backgroundColor="blackAlpha.600"
                              color="white"
                              isDisabled={selectedImageIndex === 0}
                              onClick={() => handleImageNavigation('prev')}
                              aria-label="Previous image"
                            />
                            <IconButton
                              icon={<FiChevronRight />}
                              position="absolute"
                              right={2}
                              top="50%"
                              transform="translateY(-50%)"
                              size="sm"
                              colorScheme="blackAlpha"
                              backgroundColor="blackAlpha.600"
                              color="white"
                              isDisabled={selectedImageIndex === product.images.length - 1}
                              onClick={() => handleImageNavigation('next')}
                              aria-label="Next image"
                            />
                          </>
                        )}

                        {/* Expand Icon */}
                        <IconButton
                          icon={<FiMaximize2 />}
                          position="absolute"
                          top={2}
                          right={2}
                          size="sm"
                          colorScheme="blackAlpha"
                          backgroundColor="blackAlpha.600"
                          color="white"
                          onClick={onImageModalOpen}
                          aria-label="Expand image"
                        />

                        {/* Image Counter */}
                        {product.images.length > 1 && (
                          <Badge
                            position="absolute"
                            bottom={2}
                            left={2}
                            colorScheme="blackAlpha"
                            backgroundColor="blackAlpha.600"
                            color="white"
                            borderRadius="md"
                            fontSize="xs"
                          >
                            {selectedImageIndex + 1} / {product.images.length}
                          </Badge>
                        )}
                      </Box>

                      {/* Image Thumbnails */}
                      {product.images.length > 1 && (
                        <HStack spacing={2} overflowX="auto" w="100%" pb={2}>
                          {product.images.map((image, index) => (
                            <Box
                              key={image.id}
                              minW="60px"
                              h="60px"
                              border="2px"
                              borderColor={index === selectedImageIndex ? "blue.500" : "gray.200"}
                              borderRadius="md"
                              overflow="hidden"
                              cursor="pointer"
                              onClick={() => setSelectedImageIndex(index)}
                              _hover={{ borderColor: "blue.300" }}
                            >
                              <Image
                                src={image.url}
                                alt={`${product.title} ${index + 1}`}
                                w="100%"
                                h="100%"
                                objectFit="cover"
                              />
                            </Box>
                          ))}
                        </HStack>
                      )}
                    </VStack>
                  </CardBody>
                </MotionCard>
              </GridItem>

              {/* Right Column - Product Information (50%) */}
              <GridItem>
                <VStack spacing={4} align="stretch">
                  {/* Pricing Information */}
                  <MotionCard {...slideUp} transition={{ delay: 0.1 }} bg={cardBg} borderRadius="12px" borderWidth="1px" borderColor={borderColor}>
                    <CardHeader py={3}>
                      <HStack>
                        <Icon as={FiDollarSign} color="green.500" fontSize="sm" />
                        <Heading size="sm" color="gray.900" fontWeight="600">
                          Pricing Information
                        </Heading>
                      </HStack>
                    </CardHeader>
                    <CardBody pt={0}>
                      <VStack spacing={4} align="stretch">
                        {/* Final Price Highlight */}
                        <Box bg="#fff" p={4} borderRadius="md" border="1px" borderColor="green.200">
                          <VStack spacing={2} align="center">
                            <Text fontSize="sm" color="green.700" fontWeight="600">Final Price (Gross)</Text>
                            <Text fontSize="3xl" fontWeight="900" color="black.800">
                              {formatPrice(product.final_price_gross)}
                            </Text>
                            <Text fontSize="sm" color="green.600">
                              Nett: {formatPrice(product.final_price_nett)}
                            </Text>
                          </VStack>
                        </Box>

                        {/* Pricing Breakdown */}
                        <Box bg="gray.50" p={3} borderRadius="md">
                          <VStack spacing={2} align="stretch">
                            <HStack justify="space-between">
                              <Text color="gray.600" fontSize="sm">Purchase Price (Net)</Text>
                              <Text fontWeight="600" fontSize="sm">{formatPrice(product.purchase_price_nett)}</Text>
                            </HStack>
                            <HStack justify="space-between">
                              <Text color="gray.600" fontSize="sm">Regular Price (Net)</Text>
                              <Text fontWeight="600" fontSize="sm">{formatPrice(product.regular_price_nett)}</Text>
                            </HStack>
                            <HStack justify="space-between">
                              <Text color="gray.600" fontSize="sm">Tax ({product.tax.rate}%)</Text>
                              <Text fontWeight="600" fontSize="sm">{formatPrice(product.calculated_prices.tax_amount)}</Text>
                            </HStack>
                            {product.is_discounted && (
                              <>
                                <Divider />
                                <HStack justify="space-between">
                                  <Text color="green.600" fontSize="sm" fontWeight="600">Discount</Text>
                                  <Text color="green.600" fontWeight="600" fontSize="sm">{product.discount_percentage_nett}%</Text>
                                </HStack>
                                <HStack justify="space-between">
                                  <Text color="green.600" fontSize="sm" fontWeight="600">Savings</Text>
                                  <Text color="green.600" fontWeight="600" fontSize="sm">{formatPrice(product.calculated_prices.savings_amount)}</Text>
                                </HStack>
                              </>
                            )}
                          </VStack>
                        </Box>
                      </VStack>
                    </CardBody>
                  </MotionCard>

                  {/* Basic Product Information */}
                  <MotionCard {...slideUp} transition={{ delay: 0.2 }} bg={cardBg} borderRadius="12px" borderWidth="1px" borderColor={borderColor}>
                    <CardHeader py={3}>
                      <HStack>
                        <Icon as={FiInfo} color="blue.500" fontSize="sm" />
                        <Heading size="sm" color="gray.900" fontWeight="600">
                          Product Details
                        </Heading>
                      </HStack>
                    </CardHeader>
                    <CardBody pt={0}>
                      <VStack spacing={4} align="stretch">
                        {/* Description */}
                        {product.description && (
                          <Box>
                            <Text fontWeight="600" color="gray.700" mb={2} fontSize="sm">Description</Text>
                            <Box
                              bg="gray.50"
                              p={3}
                              borderRadius="md"
                              border="1px"
                              borderColor="gray.200"
                              fontSize="sm"
                              maxH="150px"
                              overflowY="auto"
                              sx={{
                                '& h1': { fontSize: 'lg', fontWeight: 'bold', margin: '4px 0' },
                                '& h2': { fontSize: 'md', fontWeight: 'bold', margin: '3px 0' },
                                '& h3': { fontSize: 'sm', fontWeight: 'bold', margin: '2px 0' },
                                '& p': { margin: '2px 0' },
                                '& pre': { 
                                  backgroundColor: 'gray.200', 
                                  padding: '6px', 
                                  borderRadius: 'sm', 
                                  fontFamily: 'monospace',
                                  fontSize: 'xs'
                                },
                                '& b, & strong': { fontWeight: 'bold' },
                                '& i, & em': { fontStyle: 'italic' },
                              }}
                              dangerouslySetInnerHTML={{ __html: product.description }}
                            />
                          </Box>
                        )}

                        {/* Key Details Grid */}
                        <SimpleGrid columns={2} spacing={3}>
                          <Box>
                            <Text fontSize="xs" color="gray.500" fontWeight="600" textTransform="uppercase">EAN</Text>
                            <HStack>
                              <Text fontWeight="600" fontFamily="mono" fontSize="sm">{product.ean}</Text>
                              <Tooltip label="Copy EAN">
                                <IconButton
                                  icon={<FiCopy />}
                                  size="xs"
                                  variant="ghost"
                                  onClick={() => copyToClipboard(product.ean, 'EAN')}
                                  aria-label="Copy EAN"
                                />
                              </Tooltip>
                            </HStack>
                          </Box>
                          <Box>
                            <Text fontSize="xs" color="gray.500" fontWeight="600" textTransform="uppercase">Barcode</Text>
                            <HStack>
                              <Text fontWeight="600" fontFamily="mono" fontSize="sm">{product.barcode}</Text>
                              <Tooltip label="Copy Barcode">
                                <IconButton
                                  icon={<FiCopy />}
                                  size="xs"
                                  variant="ghost"
                                  onClick={() => copyToClipboard(product.barcode, 'Barcode')}
                                  aria-label="Copy Barcode"
                                />
                              </Tooltip>
                            </HStack>
                          </Box>
                          <Box>
                            <Text fontSize="xs" color="gray.500" fontWeight="600" textTransform="uppercase">Weight</Text>
                            <Text fontWeight="600" fontSize="sm">{product.weight} {product.weight_unit}</Text>
                          </Box>
                          <Box>
                            <Text fontSize="xs" color="gray.500" fontWeight="600" textTransform="uppercase">Unit Type</Text>
                            <Text fontWeight="600" fontSize="sm" textTransform="capitalize">{product.unit_type}</Text>
                          </Box>
                          <Box>
                            <Text fontSize="xs" color="gray.500" fontWeight="600" textTransform="uppercase">Lead Time</Text>
                            <Text fontWeight="600" fontSize="sm">{product.lead_time} days</Text>
                          </Box>
                          <Box>
                            <Text fontSize="xs" color="gray.500" fontWeight="600" textTransform="uppercase">Stock</Text>
                            <HStack>
                              <Icon as={product.is_available_on_stock ? FiCheckCircle : FiXCircle} 
                                    color={product.is_available_on_stock ? "green.500" : "red.500"} fontSize="sm" />
                              <Text fontWeight="600" color={product.is_available_on_stock ? "green.600" : "red.600"} fontSize="sm">
                                {product.is_available_on_stock ? "Available" : "Out of Stock"}
                              </Text>
                            </HStack>
                          </Box>
                        </SimpleGrid>

                        {/* Feature Badges */}
                        <Box>
                          <Text fontWeight="600" color="gray.700" mb={2} fontSize="sm">Features</Text>
                          <Wrap spacing={1}>
                            {product.shipping_free && (
                              <WrapItem>
                                <Badge colorScheme="green" variant="solid" px={2} py={1} borderRadius="md" fontSize="xs">
                                  <Icon as={FiTruck} mr={1} fontSize="xs" />
                                  Free Shipping
                                </Badge>
                              </WrapItem>
                            )}
                            {product.mark_as_featured && (
                              <WrapItem>
                                <Badge colorScheme="purple" variant="solid" px={2} py={1} borderRadius="md" fontSize="xs">
                                  <Icon as={FiAward} mr={1} fontSize="xs" />
                                  Featured
                                </Badge>
                              </WrapItem>
                            )}
                            {product.mark_as_new && (
                              <WrapItem>
                                <Badge colorScheme="orange" variant="solid" px={2} py={1} borderRadius="md" fontSize="xs">
                                  <Icon as={FiZap} mr={1} fontSize="xs" />
                                  New
                                </Badge>
                              </WrapItem>
                            )}
                            {product.mark_as_top_seller && (
                              <WrapItem>
                                <Badge colorScheme="red" variant="solid" px={2} py={1} borderRadius="md" fontSize="xs">
                                  <Icon as={FiStar} mr={1} fontSize="xs" />
                                  Best Seller
                                </Badge>
                              </WrapItem>
                            )}
                            {product.is_digital && (
                              <WrapItem>
                                <Badge colorScheme="cyan" variant="solid" px={2} py={1} borderRadius="md" fontSize="xs">
                                  Digital
                                </Badge>
                              </WrapItem>
                            )}
                            {product.is_physical && (
                              <WrapItem>
                                <Badge colorScheme="teal" variant="solid" px={2} py={1} borderRadius="md" fontSize="xs">
                                  Physical
                                </Badge>
                              </WrapItem>
                            )}
                            {product.is_delivery_only && (
                              <WrapItem>
                                <Badge colorScheme="blue" variant="solid" px={2} py={1} borderRadius="md" fontSize="xs">
                                  Delivery Only
                                </Badge>
                              </WrapItem>
                            )}
                            {product.is_special_offer && (
                              <WrapItem>
                                <Badge colorScheme="pink" variant="solid" px={2} py={1} borderRadius="md" fontSize="xs">
                                  Special Offer
                                </Badge>
                              </WrapItem>
                            )}
                          </Wrap>
                        </Box>
                      </VStack>
                    </CardBody>
                  </MotionCard>

                  {/* Company & Supplier Information */}
                  <MotionCard {...slideUp} transition={{ delay: 0.3 }} bg={cardBg} borderRadius="12px" borderWidth="1px" borderColor={borderColor}>
                    <CardHeader py={3}>
                      <HStack>
                        <Icon as={FiBox} color="purple.500" fontSize="sm" />
                        <Heading size="sm" color="gray.900" fontWeight="600">
                          Companies
                        </Heading>
                      </HStack>
                    </CardHeader>
                    <CardBody pt={0}>
                      <VStack spacing={3} align="stretch">
                        {/* Company */}
                        <Box>
                          <Text fontSize="xs" color="gray.500" fontWeight="600" textTransform="uppercase" mb={2}>Owner Company</Text>
                          <HStack>
                            <Image
                              src={product.company.logo_url}
                              alt={product.company.business_name}
                              boxSize="30px"
                              borderRadius="md"
                              objectFit="cover"
                              fallback={<Box bg="gray.200" w="30px" h="30px" borderRadius="md" />}
                            />
                            <VStack align="start" spacing={0}>
                              <Text fontWeight="600" fontSize="sm">{product.company.business_name}</Text>
                              <Text color="gray.500" fontSize="xs">{product.company.market_name}</Text>
                              {product.company.website_url && (
                                <HStack spacing={1}>
                                  <Icon as={FiExternalLink} fontSize="xs" color="blue.500" />
                                  <Text fontSize="xs" color="blue.500" cursor="pointer" 
                                        onClick={() => window.open(product.company.website_url, '_blank')}>
                                    Website
                                  </Text>
                                </HStack>
                              )}
                            </VStack>
                          </HStack>
                        </Box>

                        {/* Supplier */}
                        {product.supplier && (
                          <Box>
                            <Text fontSize="xs" color="gray.500" fontWeight="600" textTransform="uppercase" mb={2}>Supplier</Text>
                            <HStack>
                              <Image
                                src={product.supplier.logo_url}
                                alt={product.supplier.business_name}
                                boxSize="30px"
                                borderRadius="md"
                                objectFit="cover"
                                fallback={<Box bg="gray.200" w="30px" h="30px" borderRadius="md" />}
                              />
                              <VStack align="start" spacing={0}>
                                <Text fontWeight="600" fontSize="sm">{product.supplier.business_name}</Text>
                                <Text color="gray.500" fontSize="xs">{product.supplier.market_name}</Text>
                                {product.supplier.website_url && (
                                  <HStack spacing={1}>
                                    <Icon as={FiExternalLink} fontSize="xs" color="blue.500" />
                                    <Text fontSize="xs" color="blue.500" cursor="pointer" 
                                          onClick={() => window.open(product.supplier.website_url, '_blank')}>
                                      Website
                                    </Text>
                                  </HStack>
                                )}
                              </VStack>
                            </HStack>
                          </Box>
                        )}
                      </VStack>
                    </CardBody>
                  </MotionCard>

                  {/* Quick Stats */}
                  <MotionCard {...slideUp} transition={{ delay: 0.4 }} bg={cardBg} borderRadius="12px" borderWidth="1px" borderColor={borderColor}>
                    <CardBody p={3}>
                      <StatGroup>
                        <Stat textAlign="center">
                          <StatLabel fontSize="xs" color="gray.500">Categories</StatLabel>
                          <StatNumber fontSize="lg" color="blue.600">{product.categories_summary.total_categories}</StatNumber>
                        </Stat>
                        <Stat textAlign="center">
                          <StatLabel fontSize="xs" color="gray.500">Services</StatLabel>
                          <StatNumber fontSize="lg" color="green.600">{product.services_summary.total_services}</StatNumber>
                        </Stat>
                        <Stat textAlign="center">
                          <StatLabel fontSize="xs" color="gray.500">Images</StatLabel>
                          <StatNumber fontSize="lg" color="purple.600">{product.images.length}</StatNumber>
                        </Stat>
                      </StatGroup>
                    </CardBody>
                  </MotionCard>
                </VStack>
              </GridItem>
            </Grid>

            {/* Additional Details Section - Compact Accordion */}
            <MotionCard {...slideUp} transition={{ delay: 0.5 }} bg={cardBg} borderRadius="12px" borderWidth="1px" borderColor={borderColor}>
              <Accordion allowMultiple defaultIndex={[]}>
                {/* Categories */}
                <AccordionItem>
                  <AccordionButton py={3} _hover={{ bg: "gray.50" }}>
                    <HStack flex="1" textAlign="left">
                      <Icon as={FiTag} color="blue.500" fontSize="sm" />
                      <Heading size="sm" color="gray.900" fontWeight="600">
                        Categories ({product.categories_summary.total_categories})
                      </Heading>
                    </HStack>
                    <AccordionIcon />
                  </AccordionButton>
                  <AccordionPanel pb={4}>
                    <SimpleGrid columns={{ base: 1, md: 2, lg: 3 }} spacing={3}>
                      {product.categories.map((category) => (
                        <Card key={category.id} variant="outline" borderRadius="md" size="sm">
                          <CardBody p={3}>
                            <HStack>
                              <Image
                                src={category.image_url}
                                alt={category.name}
                                boxSize="30px"
                                borderRadius="md"
                                objectFit="cover"
                                fallback={<Box bg="gray.200" w="30px" h="30px" borderRadius="md" />}
                              />
                              <VStack align="start" spacing={0}>
                                <HStack>
                                  <Text fontWeight="600" fontSize="xs">{category.name}</Text>
                                  {category.product_category_info.is_primary && (
                                    <Badge colorScheme="blue" variant="solid" fontSize="xs">Primary</Badge>
                                  )}
                                </HStack>
                                <Text color="gray.600" fontSize="xs" noOfLines={1}>
                                  {category.description}
                                </Text>
                              </VStack>
                            </HStack>
                          </CardBody>
                        </Card>
                      ))}
                    </SimpleGrid>
                  </AccordionPanel>
                </AccordionItem>

                {/* Services */}
                {product.product_services.length > 0 && (
                  <AccordionItem>
                    <AccordionButton py={3} _hover={{ bg: "gray.50" }}>
                      <HStack flex="1" textAlign="left">
                        <Icon as={FiTool} color="green.500" fontSize="sm" />
                        <Heading size="sm" color="gray.900" fontWeight="600">
                          Product Services ({product.services_summary.total_services})
                        </Heading>
                        <Badge colorScheme="green" variant="subtle" fontSize="xs">
                          Total: {formatPrice(product.services_summary.total_services_value)}
                        </Badge>
                      </HStack>
                      <AccordionIcon />
                    </AccordionButton>
                    <AccordionPanel pb={4}>
                      <VStack spacing={3} align="stretch">
                        {product.product_services.map((service) => (
                          <Card key={service.id} variant="outline" borderRadius="md" size="sm">
                            <CardBody p={3}>
                              <HStack justify="space-between" align="start">
                                <VStack align="start" spacing={1} flex={1}>
                                  <HStack>
                                    <Text fontWeight="600" color="gray.900" fontSize="sm">{service.title}</Text>
                                    <Badge colorScheme="blue" variant="outline" textTransform="capitalize" fontSize="xs">
                                      {service.service_type}
                                    </Badge>
                                    {service.is_required && (
                                      <Badge colorScheme="red" variant="solid" fontSize="xs">Required</Badge>
                                    )}
                                    {service.standalone && (
                                      <Badge colorScheme="orange" variant="solid" fontSize="xs">Standalone</Badge>
                                    )}
                                  </HStack>
                                  
                                  {service.description && (
                                    <Text color="gray.600" fontSize="xs">{service.description}</Text>
                                  )}
                                  
                                  <HStack>
                                    <Image
                                      src={service.company.logo_url}
                                      alt={service.company.business_name}
                                      boxSize="16px"
                                      borderRadius="sm"
                                      objectFit="cover"
                                    />
                                    <Text fontSize="xs" color="gray.600">
                                      by {service.company.business_name}
                                    </Text>
                                  </HStack>
                                </VStack>
                                
                                <VStack align="end" spacing={0}>
                                  <Text fontWeight="700" color="green.600" fontSize="md">
                                    {formatPrice(service.price)}
                                  </Text>
                                  <HStack>
                                    <Icon as={service.is_active ? FiCheckCircle : FiXCircle} 
                                          color={service.is_active ? "green.500" : "red.500"} fontSize="xs" />
                                    <Text fontSize="xs" color={service.is_active ? "green.600" : "red.600"}>
                                      {service.is_active ? "Active" : "Inactive"}
                                    </Text>
                                  </HStack>
                                </VStack>
                              </HStack>
                            </CardBody>
                          </Card>
                        ))}
                      </VStack>
                    </AccordionPanel>
                  </AccordionItem>
                )}

                {/* Custom Details */}
                {product.custom_details.length > 0 && (
                  <AccordionItem>
                    <AccordionButton py={3} _hover={{ bg: "gray.50" }}>
                      <HStack flex="1" textAlign="left">
                        <Icon as={FiInfo} color="purple.500" fontSize="sm" />
                        <Heading size="sm" color="gray.900" fontWeight="600">
                          Specifications ({product.custom_details.length})
                        </Heading>
                      </HStack>
                      <AccordionIcon />
                    </AccordionButton>
                    <AccordionPanel pb={4}>
                      <TableContainer>
                        <Table variant="simple" size="sm">
                          <Thead>
                            <Tr>
                              <Th fontSize="xs">Property</Th>
                              <Th fontSize="xs">Value</Th>
                            </Tr>
                          </Thead>
                          <Tbody>
                            {product.custom_details.map((detail, index) => (
                              <Tr key={index}>
                                <Td fontWeight="600" fontSize="xs">{detail.label}</Td>
                                <Td fontSize="xs">{detail.value}</Td>
                              </Tr>
                            ))}
                          </Tbody>
                        </Table>
                      </TableContainer>
                    </AccordionPanel>
                  </AccordionItem>
                )}

                {/* SEO Information */}
                {(product.meta_title || product.meta_description || product.meta_keywords) && (
                  <AccordionItem>
                    <AccordionButton py={3} _hover={{ bg: "gray.50" }}>
                      <HStack flex="1" textAlign="left">
                        <Icon as={FiGlobe} color="teal.500" fontSize="sm" />
                        <Heading size="sm" color="gray.900" fontWeight="600">
                          SEO Information
                        </Heading>
                      </HStack>
                      <AccordionIcon />
                    </AccordionButton>
                    <AccordionPanel pb={4}>
                      <VStack spacing={3} align="stretch">
                        {product.meta_title && (
                          <Box>
                            <Text fontWeight="600" color="gray.700" fontSize="xs" mb={1}>Meta Title</Text>
                            <Text color="gray.600" fontSize="sm">{product.meta_title}</Text>
                          </Box>
                        )}
                        {product.meta_description && (
                          <Box>
                            <Text fontWeight="600" color="gray.700" fontSize="xs" mb={1}>Meta Description</Text>
                            <Text color="gray.600" fontSize="sm">{product.meta_description}</Text>
                          </Box>
                        )}
                        {product.meta_keywords && (
                          <Box>
                            <Text fontWeight="600" color="gray.700" fontSize="xs" mb={1}>Keywords</Text>
                            <Wrap spacing={1}>
                              {product.meta_keywords.split(',').map((keyword, index) => (
                                <WrapItem key={index}>
                                  <Tag size="sm" colorScheme="blue" variant="outline">
                                    <TagLabel>{keyword.trim()}</TagLabel>
                                  </Tag>
                                </WrapItem>
                              ))}
                            </Wrap>
                          </Box>
                        )}
                      </VStack>
                    </AccordionPanel>
                  </AccordionItem>
                )}

                {/* Dimensions */}
                {(product.width || product.height || product.length || product.thickness || product.depth) && (
                  <AccordionItem>
                    <AccordionButton py={3} _hover={{ bg: "gray.50" }}>
                      <HStack flex="1" textAlign="left">
                        <Icon as={FiBox} color="orange.500" fontSize="sm" />
                        <Heading size="sm" color="gray.900" fontWeight="600">
                          Dimensions
                        </Heading>
                      </HStack>
                      <AccordionIcon />
                    </AccordionButton>
                    <AccordionPanel pb={4}>
                      <SimpleGrid columns={{ base: 2, md: 5 }} spacing={3}>
                        {product.width && (
                          <Box>
                            <Text fontSize="xs" color="gray.500" fontWeight="600" textTransform="uppercase">Width</Text>
                            <Text fontWeight="600" fontSize="sm">{product.width} {product.measures_unit}</Text>
                          </Box>
                        )}
                        {product.height && (
                          <Box>
                            <Text fontSize="xs" color="gray.500" fontWeight="600" textTransform="uppercase">Height</Text>
                            <Text fontWeight="600" fontSize="sm">{product.height} {product.measures_unit}</Text>
                          </Box>
                        )}
                        {product.length && (
                          <Box>
                            <Text fontSize="xs" color="gray.500" fontWeight="600" textTransform="uppercase">Length</Text>
                            <Text fontWeight="600" fontSize="sm">{product.length} {product.measures_unit}</Text>
                          </Box>
                        )}
                        {product.thickness && (
                          <Box>
                            <Text fontSize="xs" color="gray.500" fontWeight="600" textTransform="uppercase">Thickness</Text>
                            <Text fontWeight="600" fontSize="sm">{product.thickness} {product.measures_unit}</Text>
                          </Box>
                        )}
                        {product.depth && (
                          <Box>
                            <Text fontSize="xs" color="gray.500" fontWeight="600" textTransform="uppercase">Depth</Text>
                            <Text fontWeight="600" fontSize="sm">{product.depth} {product.measures_unit}</Text>
                          </Box>
                        )}
                      </SimpleGrid>
                    </AccordionPanel>
                  </AccordionItem>
                )}

                {/* Custom Options */}
                {product.custom_options && product.custom_options.length > 0 && (
                  <MotionCard
                    bg={cardBg}
                    borderColor={borderColor}
                    borderWidth="1px"
                    borderRadius="xl"
                    overflow="hidden"
                    {...slideUp}
                    transition={{ delay: 0.6 }}
                  >
                    <CardHeader bg="purple.50" py={4}>
                      <Heading size="md" color="purple.800" fontWeight="medium">
                        <HStack>
                          <FiSettings />
                          <Text>Custom Options</Text>
                          <Badge colorScheme="purple" variant="solid">
                            {product.custom_options.length}
                          </Badge>
                        </HStack>
                      </Heading>
                    </CardHeader>
                    <CardBody>
                      <VStack spacing={6} align="stretch">
                        {product.custom_options.map((option, index) => (
                          <MotionBox
                            key={index}
                            initial={{ opacity: 0, x: -20 }}
                            animate={{ opacity: 1, x: 0 }}
                            transition={{ duration: 0.3, delay: index * 0.1 }}
                            p={6}
                            bg="gray.50"
                            borderRadius="xl"
                            border="1px solid"
                            borderColor="gray.200"
                            _hover={{ borderColor: "purple.300", shadow: "md" }}
                          >
                            <VStack align="stretch" spacing={4}>
                              <HStack justify="space-between" align="start">
                                <VStack align="start" spacing={2}>
                                  <HStack spacing={3}>
                                    <Text fontWeight="bold" fontSize="lg" color="gray.900">
                                      {option.option_name}
                                    </Text>
                                    <Badge
                                      colorScheme="blue"
                                      variant="outline"
                                      borderRadius="full"
                                      px={3}
                                    >
                                      {option.option_type.charAt(0).toUpperCase() + option.option_type.slice(1)}
                                    </Badge>
                                  </HStack>
                                  
                                  <HStack spacing={2}>
                                    {option.is_required && (
                                      <Badge colorScheme="red" variant="solid" borderRadius="full">
                                        Required
                                      </Badge>
                                    )}
                                    {option.affects_price && (
                                      <Badge colorScheme="green" variant="solid" borderRadius="full">
                                        Affects Price
                                      </Badge>
                                    )}
                                    {!option.is_active && (
                                      <Badge colorScheme="gray" variant="solid" borderRadius="full">
                                        Inactive
                                      </Badge>
                                    )}
                                  </HStack>
                                </VStack>
                              </HStack>

                              {option.help_text && (
                                <Box p={3} bg="blue.50" borderRadius="md" borderLeft="4px" borderColor="blue.400">
                                  <Text color="blue.800" fontSize="sm">
                                    <strong>Help:</strong> {option.help_text}
                                  </Text>
                                </Box>
                              )}

                              {option.placeholder_text && (
                                <Text color="gray.600" fontSize="sm" fontStyle="italic">
                                  Placeholder: "{option.placeholder_text}"
                                </Text>
                              )}

                              {/* Enhanced Option Values Display */}
                              {option.option_values && option.option_values.length > 0 && (
                                <Box>
                                  <Text fontSize="md" fontWeight="semibold" color="gray.700" mb={4}>
                                    Available Values ({option.option_values.length}):
                                  </Text>
                                  <SimpleGrid columns={{ base: 1, sm: 2, md: 3, lg: 4 }} spacing={4}>
                                    {option.option_values.map((value, valueIndex) => (
                                      <MotionBox
                                        key={valueIndex}
                                        initial={{ opacity: 0, scale: 0.9 }}
                                        animate={{ opacity: 1, scale: 1 }}
                                        transition={{ duration: 0.2, delay: valueIndex * 0.05 }}
                                        p={4}
                                        bg="white"
                                        borderRadius="lg"
                                        border="2px solid"
                                        borderColor={value.is_default ? "purple.300" : "gray.200"}
                                        position="relative"
                                        _hover={{ 
                                          borderColor: value.is_default ? "purple.400" : "gray.300",
                                          shadow: "sm",
                                          transform: "translateY(-1px)"
                                        }}
                                      >
                                        <VStack spacing={3} align="center">
                                          {/* Value Image */}
                                          {value.image_url && (
                                            <Box position="relative">
                                              <Image
                                                src={value.image_url}
                                                alt={value.image_alt_text || value.option_value}
                                                boxSize="60px"
                                                objectFit="cover"
                                                borderRadius="md"
                                                border="1px solid"
                                                borderColor="gray.200"
                                              />
                                            </Box>
                                          )}
                                          
                                          {/* Value Details */}
                                          <VStack spacing={2} align="center" w="100%">
                                            <Text 
                                              fontWeight={value.is_default ? "bold" : "semibold"}
                                              fontSize="md"
                                              textAlign="center"
                                              color={value.is_default ? "purple.700" : "gray.900"}
                                            >
                                              {value.display_name || value.option_value}
                                            </Text>
                                            
                                            {/* Pricing Information */}
                                            {value.price_modifier > 0 && (
                                              <VStack spacing={1} align="center">
                                                <Text fontSize="sm" color="green.600" fontWeight="bold">
                                                  +{value.price_modifier_type === 'percentage' 
                                                    ? `${value.price_modifier}%` 
                                                    : `$${parseFloat(value.price_modifier).toFixed(2)}`}
                                                </Text>
                                                <Text fontSize="xs" color="gray.500">
                                                  Extra Cost
                                                </Text>
                                              </VStack>
                                            )}

                                            {/* Stock Information */}
                                            {value.stock_quantity !== null && value.stock_quantity !== undefined && (
                                              <HStack spacing={2} justify="center">
                                                <Icon 
                                                  as={value.is_in_stock ? FiCheckCircle : FiXCircle} 
                                                  color={value.is_in_stock ? "green.500" : "red.500"}
                                                  fontSize="sm"
                                                />
                                                <Text fontSize="xs" color="gray.600">
                                                  {value.is_in_stock 
                                                    ? `${value.stock_quantity} in stock`
                                                    : 'Out of stock'
                                                  }
                                                </Text>
                                              </HStack>
                                            )}
                                          </VStack>
                                        </VStack>

                                        {/* Default Badge */}
                                        {value.is_default && (
                                          <Badge
                                            position="absolute"
                                            top="-8px"
                                            right="-8px"
                                            colorScheme="purple"
                                            variant="solid"
                                            fontSize="xs"
                                            borderRadius="full"
                                            px={2}
                                          >
                                            Default
                                          </Badge>
                                        )}

                                        {/* Out of Stock Overlay */}
                                        {!value.is_in_stock && (
                                          <Box
                                            position="absolute"
                                            top={0}
                                            left={0}
                                            right={0}
                                            bottom={0}
                                            bg="rgba(0,0,0,0.1)"
                                            borderRadius="lg"
                                            display="flex"
                                            alignItems="center"
                                            justifyContent="center"
                                          >
                                            <Badge colorScheme="red" variant="solid" fontSize="xs">
                                              Out of Stock
                                            </Badge>
                                          </Box>
                                        )}
                                      </MotionBox>
                                    ))}
                                  </SimpleGrid>
                                </Box>
                              )}

                              {/* Pricing Summary for Option */}
                              {option.affects_price && option.option_values.some(v => v.price_modifier > 0) && (
                                <Box p={3} bg="green.50" borderRadius="md" borderLeft="4px" borderColor="green.400">
                                  <HStack justify="space-between" align="center">
                                    <Text fontSize="sm" color="green.800" fontWeight="medium">
                                      <Icon as={FiDollarSign} mr={1} />
                                      Price Range:
                                    </Text>
                                    <Text fontSize="sm" color="green.700" fontWeight="bold">
                                      {option.option_values.filter(v => v.price_modifier > 0).length > 0 && (
                                        <>
                                          +$0 - +${Math.max(...option.option_values.map(v => 
                                            v.price_modifier_type === 'percentage' 
                                              ? (product.final_price_nett * v.price_modifier / 100)
                                              : parseFloat(v.price_modifier)
                                          )).toFixed(2)}
                                        </>
                                      )}
                                    </Text>
                                  </HStack>
                                </Box>
                              )}
                            </VStack>
                          </MotionBox>
                        ))}
                      </VStack>
                    </CardBody>
                  </MotionCard>
                )}
              </Accordion>
            </MotionCard>
          </MotionBox>
        </Container>
      </Box>

      {/* Compact Image Modal */}
      <Modal isOpen={isImageModalOpen} onClose={onImageModalClose} size="4xl" isCentered>
        <ModalOverlay bg="blackAlpha.800" />
        <ModalContent bg="transparent" boxShadow="none" maxW="80vw" maxH="80vh">
          <ModalCloseButton color="white" size="md" top={3} right={3} bg="blackAlpha.600" borderRadius="md" />
          <ModalBody p={0} display="flex" alignItems="center" justifyContent="center">
            <Box position="relative" maxW="100%" maxH="100%">
              <Image
                src={product.images[selectedImageIndex]?.url || product.main_image_url}
                alt={product.title}
                maxW="100%"
                maxH="75vh"
                objectFit="contain"
                borderRadius="md"
              />
              
              {/* Navigation in Modal */}
              {product.images.length > 1 && (
                <>
                  <IconButton
                    icon={<FiChevronLeft />}
                    position="absolute"
                    left={3}
                    top="50%"
                    transform="translateY(-50%)"
                    size="md"
                    colorScheme="blackAlpha"
                    backgroundColor="blackAlpha.600"
                    color="white"
                    isDisabled={selectedImageIndex === 0}
                    onClick={() => handleImageNavigation('prev')}
                    aria-label="Previous image"
                  />
                  <IconButton
                    icon={<FiChevronRight />}
                    position="absolute"
                    right={3}
                    top="50%"
                    transform="translateY(-50%)"
                    size="md"
                    colorScheme="blackAlpha"
                    backgroundColor="blackAlpha.600"
                    color="white"
                    isDisabled={selectedImageIndex === product.images.length - 1}
                    onClick={() => handleImageNavigation('next')}
                    aria-label="Next image"
                  />
                </>
              )}
              
              {/* Image Info */}
              <Box
                position="absolute"
                bottom={3}
                left="50%"
                transform="translateX(-50%)"
                bg="blackAlpha.700"
                color="white"
                px={3}
                py={1}
                borderRadius="md"
                fontSize="xs"
              >
                {selectedImageIndex + 1} / {product.images.length}
              </Box>
            </Box>
          </ModalBody>
        </ModalContent>
      </Modal>
    </Box>
  );
};

export default ProductDetailsPage;
