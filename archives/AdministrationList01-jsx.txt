import { useState, useEffect, useCallback } from 'react';
import {
    Box, Text, Table, Thead, Tbody, Tr, Th, Td, Spinner, Alert, AlertIcon,
    Input, Button, HStack, VStack, Select, IconButton, Flex, Tag,
    NumberInput, NumberInputField, NumberInputStepper, NumberIncrementStepper, NumberDecrementStepper,
    Tooltip, FormControl, FormLabel // Added FormControl and FormLabel
} from '@chakra-ui/react';
import { FiSearch, FiChevronLeft, FiChevronRight, FiChevronsLeft, FiChevronsRight, FiFilter, FiXCircle } from 'react-icons/fi';
import { useToast } from '@chakra-ui/react';
import { formatRelativeTime } from '../../../commons/formatOptions';
import { administrationService } from '../services/administrationService';
import { handleApiError } from '../../../commons/handleApiError';

import SidebarContent from '../layouts/SidebarContent'; 
import MobileNav from '../layouts/MobileNav';
import SettingsModal from '../components/settings/SettingsModal';
import { useAuth } from '../authContext/authContext'; 

const AdministrationsList = () => {
    const [users, setUsers] = useState([]);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState(null);
    const toast = useToast();
    const { account } = useAuth(); 

    const [currentPage, setCurrentPage] = useState(1);
    const [totalPages, setTotalPages] = useState(1);
    const [totalItems, setTotalItems] = useState(0);
    const [limit, setLimit] = useState(10);
    const [sortBy, setSortBy] = useState('created_at');
    const [sortOrder, setSortOrder] = useState('DESC');
    const [searchTerm, setSearchTerm] = useState('');
    const [debouncedSearchTerm, setDebouncedSearchTerm] = useState('');

    const [filters, setFilters] = useState({
        role: '',
        is_inactive: '',
        is_verified: '',
        is_locked: '',
    });
    const [showFilters, setShowFilters] = useState(false);
    const [isSettingsOpen, setIsSettingsOpen] = useState(false);

    const fetchUsers = useCallback(async () => {
        setIsLoading(true);
        setError(null);
        try {
            const params = {
                page: currentPage,
                limit,
                sortBy,
                sortOrder,
                search: debouncedSearchTerm,
                ...Object.fromEntries(Object.entries(filters).filter(([_, v]) => v !== ''))
            };
            const response = await administrationService.getAllUsers(params);
            const { accounts, total_items, total_pages, current_page } = response.data.data;
            setUsers(accounts || []);
            setTotalItems(total_items || 0);
            setTotalPages(total_pages || 1);
            setCurrentPage(current_page || 1);
        } catch (err) {
            setError(handleApiError(err, toast, "Failed to fetch users"));
        } finally {
            setIsLoading(false);
        }
    }, [currentPage, limit, sortBy, sortOrder, debouncedSearchTerm, filters, toast]);

    useEffect(() => {
        const handler = setTimeout(() => {
            setDebouncedSearchTerm(searchTerm);
        }, 500);
        return () => clearTimeout(handler);
    }, [searchTerm]);

    useEffect(() => {
        fetchUsers();
    }, [fetchUsers]);

    const handleSort = (column) => {
        if (sortBy === column) {
            setSortOrder(sortOrder === 'ASC' ? 'DESC' : 'ASC');
        } else {
            setSortBy(column);
            setSortOrder('DESC');
        }
        setCurrentPage(1);
    };

    const handleFilterChange = (e) => {
        const { name, value } = e.target;
        setFilters(prev => ({ ...prev, [name]: value }));
        setCurrentPage(1);
    };
    
    const clearFilters = () => {
        setFilters({ role: '', is_inactive: '', is_verified: '', is_locked: '' });
        setSearchTerm('');
        setCurrentPage(1);
    };

    const renderPagination = () => (
        <Flex justify="space-between" align="center" mt={4} wrap="wrap">
            <Text fontSize="sm" color="gray.500">
                Showing {users.length > 0 ? (currentPage - 1) * limit + 1 : 0}-
                {Math.min(currentPage * limit, totalItems)} of {totalItems} users
            </Text>
            <HStack spacing={2}>
                <IconButton icon={<FiChevronsLeft />} aria-label="First page" onClick={() => setCurrentPage(1)} isDisabled={currentPage === 1} size="sm" variant="outline" />
                <IconButton icon={<FiChevronLeft />} aria-label="Previous page" onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))} isDisabled={currentPage === 1} size="sm" variant="outline" />
                <Text fontSize="sm" color="gray.400">Page {currentPage} of {totalPages}</Text>
                <IconButton icon={<FiChevronRight />} aria-label="Next page" onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))} isDisabled={currentPage === totalPages || totalPages === 0} size="sm" variant="outline" />
                <IconButton icon={<FiChevronsRight />} aria-label="Last page" onClick={() => setCurrentPage(totalPages)} isDisabled={currentPage === totalPages || totalPages === 0} size="sm" variant="outline" />
                 <NumberInput size="sm" w="80px" value={limit} onChange={(valueString) => setLimit(parseInt(valueString) || 10)} min={5} max={100} step={5}>
                    <NumberInputField />
                    <NumberInputStepper>
                        <NumberIncrementStepper />
                        <NumberDecrementStepper />
                    </NumberInputStepper>
                </NumberInput>
                <Text fontSize="xs" color="gray.500">per page</Text>
            </HStack>
        </Flex>
    );

    const SortableTh = ({ children, columnKey }) => (
        <Th
            onClick={() => handleSort(columnKey)}
            cursor="pointer"
            userSelect="none"
            color="gray.500"
            _hover={{ color: "gray.300" }}
            fontFamily="Inter"
            fontSize="xs"
            textTransform="uppercase"
        >
            {children} {sortBy === columnKey ? (sortOrder === 'ASC' ? '▲' : '▼') : ''}
        </Th>
    );

    // This is the main content for the user list page
    const UserListContent = () => (
        <Box flex={1} /* Removed overflowY and pr={2} as parent Box will handle scroll */>
            <Text fontSize="lg" mb={4} fontFamily="Inter" color="gray.400" fontWeight="medium">User Management Console</Text>

            <HStack mb={4} spacing={3}>
                <Input
                    placeholder="Search by name, email, phone..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    bg="rgb(25,25,25)"
                    borderColor="gray.700"
                    _hover={{ borderColor: "gray.600" }}
                    size="sm"
                    fontFamily="Inter"
                    w="300px"
                />
                <Tooltip label="Toggle Filters" placement="top">
                    <IconButton icon={<FiFilter />} aria-label="Toggle Filters" onClick={() => setShowFilters(!showFilters)} size="sm" variant={showFilters ? "solid" : "outline"} colorScheme="blue" />
                </Tooltip>
                 <Tooltip label="Clear Filters & Search" placement="top">
                    <IconButton icon={<FiXCircle />} aria-label="Clear Filters" onClick={clearFilters} size="sm" variant="outline" />
                </Tooltip>
            </HStack>

            {showFilters && (
                <VStack spacing={3} align="stretch" mb={4} p={4} bg="rgb(25,25,25)" borderRadius="md" borderColor="gray.700" borderWidth={1}>
                    <Text fontSize="sm" fontWeight="medium" color="gray.400">Filters</Text>
                    <HStack spacing={4} wrap="wrap">
                        <FormControl w={{ base: "100%", md: "200px" }}>
                            <FormLabel fontSize="xs" color="gray.500" fontFamily="Inter" mb={1}>Role</FormLabel>
                            <Select name="role" value={filters.role} onChange={handleFilterChange} size="sm" bg="rgb(32,32,32)" borderColor="gray.600" _hover={{ borderColor: "gray.500" }} fontFamily="Inter">
                                <option value="">All Roles</option>
                                <option value="administrator">Administrator</option>
                                <option value="editor">Editor</option>
                                <option value="viewer">Viewer</option>
                            </Select>
                        </FormControl>
                        <FormControl w={{ base: "100%", md: "150px" }}>
                            <FormLabel fontSize="xs" color="gray.500" fontFamily="Inter" mb={1}>Status</FormLabel>
                            <Select name="is_inactive" value={filters.is_inactive} onChange={handleFilterChange} size="sm" bg="rgb(32,32,32)" borderColor="gray.600" _hover={{ borderColor: "gray.500" }} fontFamily="Inter">
                                <option value="">Any</option>
                                <option value="false">Active</option>
                                <option value="true">Inactive</option>
                            </Select>
                        </FormControl>
                        <FormControl w={{ base: "100%", md: "150px" }}>
                            <FormLabel fontSize="xs" color="gray.500" fontFamily="Inter" mb={1}>Verified</FormLabel>
                            <Select name="is_verified" value={filters.is_verified} onChange={handleFilterChange} size="sm" bg="rgb(32,32,32)" borderColor="gray.600" _hover={{ borderColor: "gray.500" }} fontFamily="Inter">
                                <option value="">Any</option>
                                <option value="true">Verified</option>
                                <option value="false">Not Verified</option>
                            </Select>
                        </FormControl>
                         <FormControl w={{ base: "100%", md: "150px" }}>
                            <FormLabel fontSize="xs" color="gray.500" fontFamily="Inter" mb={1}>Locked</FormLabel>
                            <Select name="is_locked" value={filters.is_locked} onChange={handleFilterChange} size="sm" bg="rgb(32,32,32)" borderColor="gray.600" _hover={{ borderColor: "gray.500" }} fontFamily="Inter">
                                <option value="">Any</option>
                                <option value="true">Locked</option>
                                <option value="false">Not Locked</option>
                            </Select>
                        </FormControl>
                    </HStack>
                </VStack>
            )}

            {isLoading && <Spinner color="blue.500" thickness="3px" speed="0.65s" emptyColor="gray.700" size="xl" display="block" mx="auto" my={8} />}
            {error && !isLoading && <Alert status="error" variant="subtle" bg="red.900" borderColor="red.700" borderWidth={1} borderRadius="md"><AlertIcon color="red.300" /> <Text color="red.300" fontSize="sm">{error.message || "An error occurred"}</Text></Alert>}
            {!isLoading && !error && users.length === 0 && <Text color="gray.500" textAlign="center" py={8}>No users found matching your criteria.</Text>}

            {!isLoading && !error && users.length > 0 && (
                <Box overflowX="auto"> {/* This Box handles horizontal scroll for the table */}
                    <Table variant="simple" size="sm" color="gray.400" bg="rgb(25,25,25)" borderRadius="md" borderWidth={1} borderColor="gray.700">
                        <Thead bg="rgb(32,32,32)">
                            <Tr>
                                <SortableTh columnKey="first_name">Name</SortableTh>
                                <SortableTh columnKey="email">Email</SortableTh>
                                <SortableTh columnKey="role">Role</SortableTh>
                                <SortableTh columnKey="is_verified">Verified</SortableTh>
                                <SortableTh columnKey="is_inactive">Status</SortableTh>
                                <SortableTh columnKey="is_locked">Locked</SortableTh>
                                <SortableTh columnKey="last_login_time">Last Login</SortableTh>
                                <SortableTh columnKey="created_at">Joined</SortableTh>
                                <Th color="gray.500" fontFamily="Inter" fontSize="xs" textTransform="uppercase">Actions</Th>
                            </Tr>
                        </Thead>
                        <Tbody fontFamily="Inter" fontSize="sm">
                            {users.map((user) => (
                                <Tr key={user.id} _hover={{ bg: "rgb(35,35,35)" }}>
                                    <Td borderColor="gray.700">{user.first_name} {user.last_name}</Td>
                                    <Td borderColor="gray.700">{user.email}</Td>
                                    <Td borderColor="gray.700"><Tag size="sm" variant="subtle" colorScheme={user.role === 'administrator' ? 'purple' : 'gray'}>{user.role}</Tag></Td>
                                    <Td borderColor="gray.700">{user.is_verified ? <Tag colorScheme="green" size="sm">Yes</Tag> : <Tag colorScheme="gray" size="sm">No</Tag>}</Td>
                                    <Td borderColor="gray.700">{user.is_inactive ? <Tag colorScheme="red" size="sm">Inactive</Tag> : <Tag colorScheme="green" size="sm">Active</Tag>}</Td>
                                    <Td borderColor="gray.700">{user.is_locked ? <Tag colorScheme="orange" size="sm">Yes</Tag> : <Tag colorScheme="gray" size="sm">No</Tag>}</Td>
                                    <Td borderColor="gray.700">{user.last_login_time ? formatRelativeTime(user.last_login_time) : 'Never'}</Td>
                                    <Td borderColor="gray.700">{formatRelativeTime(user.created_at)}</Td>
                                    <Td borderColor="gray.700">
                                        <Button size="xs" variant="outline" colorScheme="blue" isDisabled>View</Button>
                                    </Td>
                                </Tr>
                            ))}
                        </Tbody>
                    </Table>
                </Box>
            )}
            {renderPagination()}
        </Box>
    );


    return (
        <>
            <Box minH="100vh" bg="rgb(25,25,25)">
              
                <SidebarContent onSettingsOpen={() => setIsSettingsOpen(true)} />
                <MobileNav onSettingsOpen={() => setIsSettingsOpen(true)}  />

                <SettingsModal
                    isOpen={isSettingsOpen}
                    onClose={() => setIsSettingsOpen(false)}
                />

                <Box ml={{ base: 0, md: 60 }} p="5" overflowY="auto" h="calc(100vh - YOUR_NAVBAR_HEIGHT_IF_ANY)">
                    <UserListContent />
                </Box>
            </Box>
        </>
    );
};

export default AdministrationsList;