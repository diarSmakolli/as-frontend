import React, { useState, useEffect, useCallback } from "react";
import { useParams, useNavigate } from "react-router-dom";
import {
  Box,
  Flex,
  Heading,
  Text,
  Badge,
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
  Button,
  useToast,
  Spinner,
  VStack,
  HStack,
  Divider,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  TableContainer,
  Avatar,
  Icon,
  Card,
  CardBody,
  CardHeader,
  Menu,
  MenuButton,
  MenuList,
  MenuItem,
  IconButton,
  Tooltip,
  useDisclosure,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalFooter,
  ModalBody,
  ModalCloseButton,
  FormControl,
  FormLabel,
  FormHelperText,
  Input,
  Select,
  Textarea,
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
  Skeleton,
  SkeletonText,
  Tag,
  chakra,
  Center,
  SimpleGrid,
  Grid,
  GridItem,
} from "@chakra-ui/react";
import {
  FiMoreVertical,
  FiEdit,
  FiLock,
  FiUnlock,
  FiCheckCircle,
  FiXCircle,
  FiKey,
  FiClock,
  FiActivity,
  FiUser,
  FiCalendar,
  FiMail,
  FiPhone,
  FiCheckSquare,
  FiRotateCcw,
  FiLogOut,
  FiEye,
  FiAlertCircle,
  FiChevronDown,
  FiChevronUp,
  FiAlertTriangle,
  FiX,
  FiFileText,
  FiSearch,
  FiFilter,
  FiRefreshCw,
  FiServer,
  FiCpu,
  FiGlobe,
  FiArrowLeft,
  FiSmartphone,
  FiTablet,
  FiMonitor,
  FiInbox,
} from "react-icons/fi";
import { useAuth } from "../authContext/authContext";
import { administrationService } from "../services/administrationService";
import { handleApiError } from "../../../commons/handleApiError";
import InfiniteScroll from "react-infinite-scroll-component";
import EditAccountModal from "../administrations-management/components/EditAccountModal";
import ResetPasswordModal from "../administrations-management/components/ResetPasswordModal";
import { usePreferences } from "../authContext/preferencesProvider";
import { customToastContainerStyle } from "../../../commons/toastStyles";
import Loader from "../../../commons/Loader";
import SidebarContent from "../layouts/SidebarContent";
import MobileNav from "../layouts/MobileNav";
import SettingsModal from "../components/settings/SettingsModal";
import {
  formatRelativeTime,
  formatOptions,
  formatWithTimezone,
} from "../../../commons/formatOptions";

// EmptyState component definition
const EmptyState = ({
  icon = FiInbox,
  title = "No Data Found",
  message = "There are no items to display.",
  action = null,
}) => {
  return (
    <Box
      p={8}
      textAlign="center"
      borderRadius="md"
      bg="gray.800"
      border="1px dashed"
      borderColor="gray.700"
    >
      <VStack spacing={3}>
        <Icon as={icon} fontSize="3xl" color="gray.400" />
        <Text fontWeight="bold" color="white">
          {title}
        </Text>
        <Text color="gray.400">{message}</Text>
        {action && <Box mt={2}>{action}</Box>}
      </VStack>
    </Box>
  );
};

const AdministrationDetails = () => {
  const { accountId } = useParams();
  const navigate = useNavigate();
  const toast = useToast();
  const { account, isLoading: isAuthLoading } = useAuth();
  const { currentTimezone } = usePreferences();
  const [isSettingsOpen, setIsSettingsOpen] = useState(false);
  const [isFilterOpen, setIsFilterOpen] = useState(false);

  // State for user details
  const [userDetails, setUserDetails] = useState(null);
  const [isLoadingDetails, setIsLoadingDetails] = useState(true);

  // State for sessions data
  const [sessions, setSessions] = useState([]);
  const [sessionsPage, setSessionsPage] = useState(1); // Next page to fetch
  const [hasMoreSessions, setHasMoreSessions] = useState(true);
  const [isLoadingSessions, setIsLoadingSessions] = useState(false);
  const [totalSessions, setTotalSessions] = useState(0);

  // State for activities data
  const [activities, setActivities] = useState([]);
  const [activitiesPage, setActivitiesPage] = useState(1); // Next page to fetch
  const [hasMoreActivities, setHasMoreActivities] = useState(true);
  const [isLoadingActivities, setIsLoadingActivities] = useState(false);
  const [totalActivities, setTotalActivities] = useState(0);

  // Modal states
  const {
    isOpen: isEditModalOpen,
    onOpen: onEditModalOpen,
    onClose: onEditModalClose,
  } = useDisclosure();

  const {
    isOpen: isResetPasswordModalOpen,
    onOpen: onResetPasswordModalOpen,
    onClose: onResetPasswordModalClose,
  } = useDisclosure();

  // Filters for activities
  const [activityFilters, setActivityFilters] = useState({
    type: "",
    action: "",
    action_type: "",
    from_date: "",
    to_date: "",
  });

  // Fetch user details
  const fetchUserDetails = useCallback(async () => {
    if (!accountId) return;

    setIsLoadingDetails(true);
    try {
      const response = await administrationService.getUserDetails(accountId);
      setUserDetails(response.data.data);
    } catch (error) {
      handleApiError(error, toast);
      navigate("/administrations-console");
    } finally {
      setIsLoadingDetails(false);
    }
  }, [accountId, navigate, toast]);

  // Fetch sessions
  const fetchSessions = useCallback(
    async (reset = false) => {
      const pageToFetch = reset ? 1 : sessionsPage;

      if (!accountId || isLoadingSessions || (!reset && !hasMoreSessions)) {
        if (!reset && !hasMoreSessions) setIsLoadingSessions(false);
        return;
      }

      setIsLoadingSessions(true);
      try {
        const response = await administrationService.getUserSessions(accountId, {
          page: pageToFetch,
          limit: 10,
          sortBy: "created_at",
          sortOrder: "DESC",
        });

        const { sessions: newSessions, total_items, total_pages, current_page } =
          response.data.data;

        setTotalSessions(total_items);

        if (reset) {
          setSessions(newSessions);
        } else {
          setSessions((prev) => [...prev, ...newSessions]);
        }

        setHasMoreSessions(current_page < total_pages);
        if (current_page < total_pages) {
          setSessionsPage(current_page + 1);
        } else {
          setSessionsPage(total_pages + 1); // Or just total_pages, if preferred
        }
      } catch (error) {
        handleApiError(error, toast);
        setHasMoreSessions(false);
      } finally {
        setIsLoadingSessions(false);
      }
    },
    [accountId, toast, sessionsPage, isLoadingSessions, hasMoreSessions]
  );

  // Fetch activities
  const fetchActivities = useCallback(
    async (reset = false) => {
      const pageToFetch = reset ? 1 : activitiesPage;

      if (!accountId || isLoadingActivities || (!reset && !hasMoreActivities)) {
        if (!reset && !hasMoreActivities) setIsLoadingActivities(false);
        return;
      }

      setIsLoadingActivities(true);
      try {
        const response = await administrationService.getUserActivities(accountId, {
          page: pageToFetch,
          limit: 10,
          sortBy: "created_at",
          sortOrder: "DESC",
          ...activityFilters,
        });

        const {
          activities: newActivities,
          total_items,
          total_pages,
          current_page,
        } = response.data.data;

        setTotalActivities(total_items);

        if (reset) {
          setActivities(newActivities);
        } else {
          setActivities((prev) => [...prev, ...newActivities]);
        }

        setHasMoreActivities(current_page < total_pages);
        if (current_page < total_pages) {
          setActivitiesPage(current_page + 1);
        } else {
          setActivitiesPage(total_pages + 1); // Or just total_pages
        }
      } catch (error) {
        handleApiError(error, toast);
        setHasMoreActivities(false);
      } finally {
        setIsLoadingActivities(false);
      }
    },
    [
      accountId,
      toast,
      activitiesPage,
      isLoadingActivities,
      activityFilters,
      hasMoreActivities,
    ]
  );

  // Handle filter changes
  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setActivityFilters((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  // Apply filters
  const applyFilters = () => {
    setActivitiesPage(1);
    fetchActivities(true);
  };

  // Reset filters
  const resetFilters = () => {
    setActivityFilters({
      type: "",
      action: "",
      action_type: "",
      from_date: "",
      to_date: "",
    });
    setActivitiesPage(1);
    fetchActivities(true);
  };

  // Account action handlers
  const handleLockAccount = async () => {
    try {
      await administrationService.lockAccount(accountId);
      toast({
        title: "Account locked",
        description: "The account has been locked successfully.",
        status: "success",
        duration: 5000,
        isClosable: true,
      });
      fetchUserDetails();
    } catch (error) {
      handleApiError(error, toast);
    }
  };

  const handleUnlockAccount = async () => {
    try {
      await administrationService.unlockAccount(accountId);
      toast({
        title: "Account unlocked",
        description: "The account has been unlocked successfully.",
        status: "success",
        duration: 5000,
        isClosable: true,
      });
      fetchUserDetails();
    } catch (error) {
      handleApiError(error, toast);
    }
  };

  const handleVerifyAccount = async () => {
    try {
      await administrationService.verifyAccount(accountId);
      toast({
        title: "Account verified",
        description: "The account has been verified successfully.",
        status: "success",
        duration: 5000,
        isClosable: true,
      });
      fetchUserDetails();
    } catch (error) {
      handleApiError(error, toast);
    }
  };

  const handleUnverifyAccount = async () => {
    try {
      await administrationService.unverifyAccount(accountId);
      toast({
        title: "Account unverified",
        description: "The account has been unverified successfully.",
        status: "success",
        duration: 5000,
        isClosable: true,
      });
      fetchUserDetails();
    } catch (error) {
      handleApiError(error, toast);
    }
  };

  const handleUserUpdate = async (userData) => {
    try {
      await administrationService.updateUserDetails(accountId, userData);
      toast({
        title: "Account updated",
        description: "The account details have been updated successfully.",
        status: "success",
        duration: 5000,
        isClosable: true,
      });
      fetchUserDetails();
      onEditModalClose();
    } catch (error) {
      handleApiError(error, toast);
    }
  };

  const handlePasswordReset = async (passwordData) => {
    try {
      await administrationService.resetPassword(accountId, passwordData);
      toast({
        title: "Password reset",
        description: "The password has been reset successfully.",
        status: "success",
        duration: 5000,
        isClosable: true,
      });
      onResetPasswordModalClose();
    } catch (error) {
      handleApiError(error, toast);
    }
  };

  // Format activity type for display
  const formatActivityType = (type) => {
    let colorScheme = "gray";
    switch (type) {
      case "Authentication":
        colorScheme = "blue";
        break;
      case "Create":
        colorScheme = "green";
        break;
      case "Modify":
        colorScheme = "orange";
        break;
      case "Delete":
        colorScheme = "red";
        break;
      case "Lock":
        colorScheme = "red";
        break;
      case "UnLock":
        colorScheme = "green";
        break;
      case "Verify":
        colorScheme = "teal";
        break;
      case "Unverify":
        colorScheme = "yellow";
        break;
      case "Terminate":
        colorScheme = "purple";
        break;
      default:
        break;
    }
    return (
      <Badge colorScheme={colorScheme} px={2} py={0.5} borderRadius="md">
        {type}
      </Badge>
    );
  };

  // Load data on mount
  useEffect(() => {
    if (accountId) {
      fetchUserDetails();
    }
  }, [accountId, fetchUserDetails]);

  // Load initial sessions data when userDetails are available (assuming Sessions tab is default)
  useEffect(() => {
    if (userDetails && accountId) {
      if (sessions.length === 0 && hasMoreSessions && !isLoadingSessions) {
        fetchSessions(true);
      }
    }
  }, [
    userDetails,
    accountId,
    sessions.length,
    hasMoreSessions,
    isLoadingSessions,
    fetchSessions,
  ]);

  // Load initial sessions and activities data when tabs are selected
  const handleTabChange = (index) => {
    if (index === 0) {
      // Sessions tab
      if (sessions.length === 0 && hasMoreSessions && !isLoadingSessions) {
        fetchSessions(true);
      }
    } else if (index === 1) {
      // Activities tab
      if (activities.length === 0 && hasMoreActivities && !isLoadingActivities) {
        fetchActivities(true);
      }
    }
  };

  if (isAuthLoading) {
    return <Loader />;
  }

  if (isLoadingDetails) {
    return (
      <Box minH="100vh" bg="rgb(25,25,25)">
        <SidebarContent onSettingsOpen={() => setIsSettingsOpen(true)} />
        <MobileNav onSettingsOpen={() => setIsSettingsOpen(true)} />
        <Box ml={{ base: 0, md: 60 }} p="5">
          <Skeleton height="50px" width="200px" mb={6} />
          <SkeletonText mt="4" noOfLines={6} spacing="4" skeletonHeight="4" />
        </Box>
      </Box>
    );
  }

  if (!userDetails) {
    return (
      <Box minH="100vh" bg="rgb(25,25,25)">
        <SidebarContent onSettingsOpen={() => setIsSettingsOpen(true)} />
        <MobileNav onSettingsOpen={() => setIsSettingsOpen(true)} />
        <Box ml={{ base: 0, md: 60 }} p="5">
          <Alert status="error" variant="solid" borderRadius="md">
            <AlertIcon />
            <AlertTitle mr={2}>User Not Found</AlertTitle>
            <AlertDescription>
              The requested user could not be found.
            </AlertDescription>
          </Alert>
          <Button
            mt={4}
            leftIcon={<FiArrowLeft />}
            onClick={() => navigate("/administrations-console")}
          >
            Back to User List
          </Button>
        </Box>
      </Box>
    );
  }

  return (
    <Box minH="100vh" bg="rgb(25,25,25)">
      <SidebarContent onSettingsOpen={() => setIsSettingsOpen(true)} />
      <MobileNav onSettingsOpen={() => setIsSettingsOpen(true)} />
      <SettingsModal
        isOpen={isSettingsOpen}
        onClose={() => setIsSettingsOpen(false)}
      />

      <Box ml={{ base: 0, md: 60 }} p="5">
        <HStack spacing={4} mb={6} alignItems="center">
          <Button
            leftIcon={<FiArrowLeft />}
            onClick={() => navigate("/administrations-console")}
            variant="outline"
            size="sm"
            borderColor="gray.600"
            _hover={{ bg: "gray.700" }}
          >
            Back
          </Button>
          <Heading size="lg" color="white" fontWeight="semibold">
            User Details
          </Heading>
        </HStack>

        <Flex direction={{ base: "column", lg: "row" }} gap={6} mb={6}>
          {/* User Info Card */}
          <Card
            flex={{ lg: "0.6" }}
            bg="rgb(36,36,36)"
            borderColor="gray.700"
            borderWidth="1px"
            borderRadius="lg"
          >
            <CardHeader pb={2}>
              <Flex justify="space-between" align="center">
                <Heading size="md" color="white" fontWeight="medium">
                  Account Information
                </Heading>
                <Menu>
                  <MenuButton
                    as={IconButton}
                    icon={<FiMoreVertical />}
                    variant="ghost"
                    aria-label="Options"
                    color="gray.400"
                  />
                  <MenuList bg="rgb(36,36,36)" borderColor="gray.700">
                    <MenuItem
                      icon={<FiEdit />}
                      onClick={onEditModalOpen}
                      color="gray.300"
                      bg="transparent"
                      _hover={{ bg: "gray.700" }}
                    >
                      Edit Account
                    </MenuItem>
                    {userDetails.is_locked ? (
                      <MenuItem
                        icon={<FiUnlock />}
                        onClick={handleUnlockAccount}
                        color="gray.300"
                        bg="transparent"
                        _hover={{ bg: "gray.700" }}
                      >
                        Unlock Account
                      </MenuItem>
                    ) : (
                      <MenuItem
                        icon={<FiLock />}
                        onClick={handleLockAccount}
                        color="gray.300"
                        bg="transparent"
                        _hover={{ bg: "gray.700" }}
                      >
                        Lock Account
                      </MenuItem>
                    )}
                    {userDetails.is_verified ? (
                      <MenuItem
                        icon={<FiXCircle />}
                        onClick={handleUnverifyAccount}
                        color="gray.300"
                        bg="transparent"
                        _hover={{ bg: "gray.700" }}
                      >
                        Unverify Account
                      </MenuItem>
                    ) : (
                      <MenuItem
                        icon={<FiCheckCircle />}
                        onClick={handleVerifyAccount}
                        color="gray.300"
                        bg="transparent"
                        _hover={{ bg: "gray.700" }}
                      >
                        Verify Account
                      </MenuItem>
                    )}
                    <MenuItem
                      icon={<FiKey />}
                      onClick={onResetPasswordModalOpen}
                      color="gray.300"
                      bg="transparent"
                      _hover={{ bg: "gray.700" }}
                    >
                      Reset Password
                    </MenuItem>
                  </MenuList>
                </Menu>
              </Flex>
            </CardHeader>
            <CardBody>
              <Grid
                templateColumns={{ base: "1fr", md: "auto 1fr" }}
                gap={{ base: 4, md: 6 }}
                alignItems="flex-start"
              >
                <GridItem textAlign={{ base: "center", md: "left" }}>
                  <VStack spacing={3} align={{ base: "center", md: "flex-start" }}>
                    <Avatar
                      size="xl"
                      name={`${userDetails.first_name} ${userDetails.last_name}`}
                      bg="blue.500"
                      color="white"
                    />
                    <Box textAlign={{ base: "center", md: "left" }}>
                      <Text fontWeight="bold" fontSize="xl" color="white">
                        {userDetails.preferred_name ||
                          `${userDetails.first_name} ${userDetails.last_name}`}
                      </Text>
                      <Tag
                        size="sm"
                        colorScheme="blue"
                        mt={1}
                        variant="subtle"
                      >
                        {userDetails.role
                          ?.replace(/-/g, " ")
                          .replace(/\b\w/g, (l) => l.toUpperCase())}
                      </Tag>
                    </Box>
                    <HStack
                      spacing={2}
                      wrap="wrap"
                      justify={{ base: "center", md: "flex-start" }}
                    >
                      <Badge
                        px={2}
                        py={0.5}
                        borderRadius="md"
                        colorScheme={userDetails.is_inactive ? "gray" : "green"}
                      >
                        {userDetails.is_inactive ? "Inactive" : "Active"}
                      </Badge>
                      <Badge
                        px={2}
                        py={0.5}
                        borderRadius="md"
                        colorScheme={userDetails.is_verified ? "teal" : "yellow"}
                      >
                        {userDetails.is_verified ? "Verified" : "Unverified"}
                      </Badge>
                      <Badge
                        px={2}
                        py={0.5}
                        borderRadius="md"
                        colorScheme={userDetails.is_locked ? "red" : "green"}
                      >
                        {userDetails.is_locked ? "Locked" : "Unlocked"}
                      </Badge>
                    </HStack>
                  </VStack>
                </GridItem>

                <GridItem>
                  <SimpleGrid
                    columns={{ base: 1, sm: 2 }}
                    spacingX={6}
                    spacingY={4}
                  >
                    <Box>
                      <Text
                        fontSize="xs"
                        color="gray.500"
                        mb={0.5}
                        textTransform="uppercase"
                        letterSpacing="wider"
                      >
                        Full Name
                      </Text>
                      <HStack spacing={2} color="gray.300">
                        <Icon as={FiUser} color="gray.400" />
                        <Text>
                          {userDetails.first_name} {userDetails.last_name}
                        </Text>
                      </HStack>
                    </Box>

                    <Box>
                      <Text
                        fontSize="xs"
                        color="gray.500"
                        mb={0.5}
                        textTransform="uppercase"
                        letterSpacing="wider"
                      >
                        Email
                      </Text>
                      <HStack spacing={2} color="gray.300">
                        <Icon as={FiMail} color="gray.400" />
                        <Text>{userDetails.email}</Text>
                      </HStack>
                    </Box>

                    <Box>
                      <Text
                        fontSize="xs"
                        color="gray.500"
                        mb={0.5}
                        textTransform="uppercase"
                        letterSpacing="wider"
                      >
                        Phone
                      </Text>
                      <HStack spacing={2} color="gray.300">
                        <Icon as={FiPhone} color="gray.400" />
                        <Text>
                          {userDetails.phone_number || "Not provided"}
                        </Text>
                      </HStack>
                    </Box>

                    <Box>
                      <Text
                        fontSize="xs"
                        color="gray.500"
                        mb={0.5}
                        textTransform="uppercase"
                        letterSpacing="wider"
                      >
                        Last Login
                      </Text>
                      <HStack spacing={2} color="gray.300">
                        <Icon as={FiClock} color="gray.400" />
                        <Text>
                          {userDetails.last_login_time
                            ? formatWithTimezone(
                                userDetails.last_login_time,
                                formatOptions.FULL_DATE_TIME,
                                currentTimezone
                              )
                            : "Never"}
                        </Text>
                      </HStack>
                    </Box>

                    <Box>
                      <Text
                        fontSize="xs"
                        color="gray.500"
                        mb={0.5}
                        textTransform="uppercase"
                        letterSpacing="wider"
                      >
                        Joined
                      </Text>
                      <HStack spacing={2} color="gray.300">
                        <Icon as={FiCalendar} color="gray.400" />
                        <Text>
                          {userDetails.created_at
                            ? formatWithTimezone(
                                userDetails.created_at,
                                formatOptions.FULL_DATE_TIME,
                                currentTimezone
                              )
                            : "Unknown"}
                        </Text>
                      </HStack>
                    </Box>
                  </SimpleGrid>
                </GridItem>
              </Grid>
            </CardBody>
          </Card>
        </Flex>

        <Tabs
          isLazy
          variant="soft-rounded"
          colorScheme="blue"
          onChange={handleTabChange}
        >
          <TabList borderColor="gray.700" mb={4}>
            <Tab
              color="gray.300"
              _selected={{ color: "white", bg: "blue.500" }}
              fontWeight="medium"
            >
              <Icon as={FiServer} mr={2} />
              Sessions {totalSessions > 0 && `(${totalSessions})`}
            </Tab>
            <Tab
              color="gray.300"
              _selected={{ color: "white", bg: "blue.500" }}
              fontWeight="medium"
            >
              <Icon as={FiActivity} mr={2} />
              Activities {totalActivities > 0 && `(${totalActivities})`}
            </Tab>
          </TabList>

          <TabPanels>
            {/* Sessions Tab */}
            <TabPanel>
              <Box mb={4}>
                <Flex justify="space-between" align="center" mb={4}>
                  <Heading size="md" color="white">
                    User Sessions
                  </Heading>
                  <Button
                    leftIcon={<FiRefreshCw />}
                    size="sm"
                    onClick={() => fetchSessions(true)}
                    isLoading={isLoadingSessions}
                  >
                    Refresh
                  </Button>
                </Flex>

                {isLoadingSessions && sessions.length === 0 ? (
                  <chakra.Box py={8} display="flex" justifyContent="center">
                    <Spinner size="lg" color="blue.400" />
                  </chakra.Box>
                ) : sessions.length === 0 ? (
                  <EmptyState
                    icon={FiServer}
                    title="No Sessions Found"
                    message="This user doesn't have any recorded sessions."
                    action={
                      <Button
                        onClick={() => fetchSessions(true)}
                        leftIcon={<FiRefreshCw />}
                      >
                        Refresh
                      </Button>
                    }
                  />
                ) : (
                  <TableContainer
                    id="sessions-container"
                    sx={{ maxHeight: "60vh", overflowY: "auto" }}
                  >
                    <Table variant="simple">
                      <Thead>
                        <Tr>
                          <Th color="gray.400">Device</Th>
                          <Th color="gray.400">IP Address</Th>
                          <Th color="gray.400">Location</Th>
                          <Th color="gray.400">Started</Th>
                          <Th color="gray.400">Status</Th>
                        </Tr>
                      </Thead>
                      <Tbody>
                        <InfiniteScroll
                          dataLength={sessions.length}
                          next={fetchSessions}
                          hasMore={hasMoreSessions}
                          loader={
                            <Tr>
                              <Td colSpan={5} textAlign="center">
                                <Spinner size="sm" color="blue.400" />
                              </Td>
                            </Tr>
                          }
                          scrollableTarget="sessions-container"
                          endMessage={
                            <Tr>
                              <Td
                                colSpan={5}
                                textAlign="center"
                                fontSize="sm"
                                color="gray.500"
                              >
                                {sessions.length > 0 &&
                                  `Showing all ${sessions.length} sessions`}
                              </Td>
                            </Tr>
                          }
                        >
                          {sessions.map((session) => (
                            <Tr key={session.id}>
                              <Td color="gray.300">
                                <HStack>
                                  <Icon
                                    as={
                                      session.device_type === "Mobile"
                                        ? FiSmartphone
                                        : session.device_type === "Tablet"
                                        ? FiTablet
                                        : FiMonitor
                                    }
                                  />
                                  <Text>
                                    {session.device_info || "Unknown device"}
                                  </Text>
                                </HStack>
                              </Td>
                              <Td color="gray.300">
                                <HStack>
                                  <Icon as={FiGlobe} />
                                  <Text>
                                    {session.ip_address || "Unknown IP"}
                                  </Text>
                                </HStack>
                              </Td>
                              <Td color="gray.300">
                                {session.location || "Unknown"}
                              </Td>
                              <Td color="gray.300">
                                {session.created_at
                                  ? formatWithTimezone(
                                      session.created_at,
                                      formatOptions.FULL_DATE_TIME,
                                      currentTimezone
                                    )
                                  : "Unknown"}
                              </Td>
                              <Td>
                                <Badge
                                  colorScheme={
                                    new Date(session.expired_at) > new Date()
                                      ? "green"
                                      : "red"
                                  }
                                >
                                  {new Date(session.expired_at) > new Date()
                                    ? "Active"
                                    : "Expired"}
                                </Badge>
                              </Td>
                            </Tr>
                          ))}
                        </InfiniteScroll>
                      </Tbody>
                    </Table>
                  </TableContainer>
                )}
              </Box>
            </TabPanel>

            {/* Activities Tab */}
            <TabPanel>
              <Box mb={4}>
                <Flex justify="space-between" align="center" mb={4}>
                  <Heading size="md" color="white">
                    User Activities
                  </Heading>
                  <HStack>
                    <Button
                      leftIcon={<FiFilter />}
                      size="sm"
                      variant="outline"
                      onClick={() => setIsFilterOpen(!isFilterOpen)}
                    >
                      Filters
                    </Button>
                    <Button
                      leftIcon={<FiRefreshCw />}
                      size="sm"
                      onClick={() => fetchActivities(true)}
                      isLoading={isLoadingActivities}
                    >
                      Refresh
                    </Button>
                  </HStack>
                </Flex>

                {/* Filters */}
                {isFilterOpen && (
                  <Box
                    p={4}
                    bg="gray.800"
                    borderRadius="md"
                    mb={4}
                    borderWidth="1px"
                    borderColor="gray.700"
                  >
                    <SimpleGrid
                      columns={{ base: 1, md: 2, lg: 4 }}
                      spacing={4}
                      mb={4}
                    >
                      <FormControl>
                        <FormLabel fontSize="sm" color="gray.300" mb={1}>
                          Activity Type
                        </FormLabel>
                        <Select
                          size="sm"
                          name="type"
                          value={activityFilters.type}
                          onChange={handleFilterChange}
                          bg="gray.700"
                          color="white"
                          borderColor="gray.600"
                        >
                          <option value="">All Types</option>
                          <option value="Authentication">Authentication</option>
                          <option value="Create">Create</option>
                          <option value="Modify">Modify</option>
                          <option value="Delete">Delete</option>
                          <option value="Lock">Lock</option>
                          <option value="UnLock">Unlock</option>
                          <option value="Verify">Verify</option>
                          <option value="Unverify">Unverify</option>
                          <option value="Terminate">Terminate</option>
                        </Select>
                      </FormControl>

                      <FormControl>
                        <FormLabel fontSize="sm" color="gray.300" mb={1}>
                          Action
                        </FormLabel>
                        <Input
                          size="sm"
                          name="action"
                          value={activityFilters.action}
                          onChange={handleFilterChange}
                          placeholder="Filter by action"
                          bg="gray.700"
                          color="white"
                          borderColor="gray.600"
                        />
                      </FormControl>

                      <FormControl>
                        <FormLabel fontSize="sm" color="gray.300" mb={1}>
                          From Date
                        </FormLabel>
                        <Input
                          size="sm"
                          type="date"
                          name="from_date"
                          value={activityFilters.from_date}
                          onChange={handleFilterChange}
                          bg="gray.700"
                          color="white"
                          borderColor="gray.600"
                        />
                      </FormControl>

                      <FormControl>
                        <FormLabel fontSize="sm" color="gray.300" mb={1}>
                          To Date
                        </FormLabel>
                        <Input
                          size="sm"
                          type="date"
                          name="to_date"
                          value={activityFilters.to_date}
                          onChange={handleFilterChange}
                          bg="gray.700"
                          color="white"
                          borderColor="gray.600"
                        />
                      </FormControl>
                    </SimpleGrid>

                    <Flex justify="flex-end" gap={3}>
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={resetFilters}
                        _hover={{ bg: "gray.700" }}
                      >
                        Clear
                      </Button>
                      <Button
                        size="sm"
                        colorScheme="blue"
                        onClick={applyFilters}
                        leftIcon={<FiFilter />}
                      >
                        Apply Filters
                      </Button>
                    </Flex>
                  </Box>
                )}

                {isLoadingActivities && activities.length === 0 ? (
                  <chakra.Box py={8} display="flex" justifyContent="center">
                    <Spinner size="lg" color="blue.400" />
                  </chakra.Box>
                ) : activities.length === 0 ? (
                  <EmptyState
                    icon={FiActivity}
                    title="No Activities Found"
                    message="There are no activities recorded for this user."
                    action={
                      <Button
                        onClick={() => fetchActivities(true)}
                        leftIcon={<FiRefreshCw />}
                      >
                        Refresh
                      </Button>
                    }
                  />
                ) : (
                  <TableContainer
                    id="activities-container"
                    sx={{ maxHeight: "60vh", overflowY: "auto" }}
                  >
                    <Table variant="simple">
                      <Thead>
                        <Tr>
                          <Th color="gray.400">Type</Th>
                          <Th color="gray.400">Action</Th>
                          <Th color="gray.400">Summary</Th>
                          <Th color="gray.400">Date</Th>
                        </Tr>
                      </Thead>
                      <Tbody>
                        <InfiniteScroll
                          dataLength={activities.length}
                          next={fetchActivities}
                          hasMore={hasMoreActivities}
                          loader={
                            <Tr>
                              <Td colSpan={4} textAlign="center">
                                <Spinner size="sm" color="blue.400" />
                              </Td>
                            </Tr>
                          }
                          scrollableTarget="activities-container"
                          endMessage={
                            <Tr>
                              <Td
                                colSpan={4}
                                textAlign="center"
                                fontSize="sm"
                                color="gray.500"
                              >
                                {activities.length > 0 &&
                                  `Showing all ${activities.length} activities`}
                              </Td>
                            </Tr>
                          }
                        >
                          {activities.map((activity) => (
                            <Tr key={activity.id}>
                              <Td>{formatActivityType(activity.type)}</Td>
                              <Td color="gray.300">{activity.action}</Td>
                              <Td color="gray.300">{activity.summary}</Td>
                              <Td color="gray.300">
                                <Tooltip
                                  label={formatWithTimezone(
                                    activity.created_at,
                                    formatOptions.FULL_DATE_TIME,
                                    currentTimezone
                                  )}
                                  placement="top"
                                >
                                  <Text>
                                    {formatRelativeTime(activity.created_at)}
                                  </Text>
                                </Tooltip>
                              </Td>
                            </Tr>
                          ))}
                        </InfiniteScroll>
                      </Tbody>
                    </Table>
                  </TableContainer>
                )}
              </Box>
            </TabPanel>
          </TabPanels>
        </Tabs>

        {/* Edit Account Modal */}
        {userDetails && (
          <EditAccountModal
            isOpen={isEditModalOpen}
            onClose={onEditModalClose}
            user={userDetails} // Changed from userData to user
            onSuccess={handleUserUpdate} // Changed from onSave to onSuccess
          />
        )}

        {/* Reset Password Modal */}
        <ResetPasswordModal
          isOpen={isResetPasswordModalOpen}
          onClose={onResetPasswordModalClose}
          user={userDetails} // Added user prop
          onSuccess={handlePasswordReset} // Changed from onSave to onSuccess
        />
      </Box>
    </Box>
  );
};

export default AdministrationDetails;