import React from "react";
import { useCallback } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { homeService } from "../home/services/homeService";
import { useState } from "react";
import { useEffect } from "react";
import {
  FaChevronLeft,
  FaChevronRight,
  FaChevronDown,
  FaChevronUp,
  FaBox,
  FaDesktop,
  FaCar,
  FaTshirt,
  FaHome,
  FaGamepad,
  FaDumbbell,
  FaBook,
  FaCamera,
  FaWrench,
  FaAppleAlt,
  FaPaw,
  FaGift,
  FaMusic,
  FaLeaf,
  FaMedkit,
  FaSearch,
  FaShoppingCart,
  FaHeart,
  FaShare,
  FaStar,
  FaPlus,
  FaMinus,
  FaTimes,
  FaExpand,
  FaCompress,
  FaCheck,
} from "react-icons/fa";
import {
  Box,
  Container,
  Flex,
  Heading,
  Text,
  Button,
  Image,
  VStack,
  HStack,
  Badge,
  Icon,
  SimpleGrid,
  IconButton,
  Input,
  InputGroup,
  InputLeftElement,
  useDisclosure,
  Card,
  CardBody,
  Skeleton,
  SkeletonText,
  useBreakpointValue,
  Popover,
  PopoverTrigger,
  PopoverContent,
  PopoverBody,
  Portal,
  Menu,
  MenuButton,
  MenuList,
  MenuItem,
  Grid,
  GridItem,
  Checkbox,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalCloseButton,
  NumberInput,
  NumberInputField,
  NumberInputStepper,
  NumberIncrementStepper,
  NumberDecrementStepper,
  Radio,
  RadioGroup,
  Select,
  Textarea,
  Switch,
  FormControl,
  FormLabel,
  Divider,
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
  AspectRatio,
  useToast,
} from "@chakra-ui/react";
import Logo from "../../assets/logo-as.png";
import {
  FaStar,
  FaShare,
  FaShippingFast,
  FaShieldAlt,
  FaChevronLeft,
  FaChevronRight,
  FaSearch,
  FaHeart,
  FaShoppingCart,
  FaBars,
  FaBox,
  FaChevronDown,
  FaChevronRight as FaChevronRightIcon,
  FaTags,
  FaClock,
  FaFire,
  FaBell,
  FaPercent,
  FaHotjar,
  FaGift,
  FaGamepad,
  FaHome,
  FaTshirt,
  FaBaby,
  FaLaptop,
  FaCar,
  FaCheck,
  FaUtensils,
  FaCamera,
  FaDumbbell,
  FaMusic,
  FaPalette,
  FaHandsHelping,
  FaBoxTissue,
  FaComments,
  FaUser,
  FaChevronUp,
  FaTimes,
  FaPlus,
  FaMinus,
  FaExpand,
} from "react-icons/fa";
import Footer from "../../shared-customer/components/Footer";
import MobileCategoryNavigation from "../../shared-customer/components/MobileCategoryNavigation";
import ExploreAll from "../../shared-customer/components/ExploreAll";

function CustomerProductPage() {
  const { slug } = useParams();
  const navigate = useNavigate();
  const toast = useToast();
  const [loading, setLoading] = useState(false);
  const [product, setProduct] = useState(null);
  const [productServices, setProductServices] = useState([]);
  const [categories, setCategories] = useState([]);
  const [expandedCategories, setExpandedCategories] = useState(new Set());
  const [hoveredSubCategory, setHoveredSubCategory] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [topCategories, setTopCategories] = useState([]);
  const [hoveredCategory, setHoveredCategory] = useState(null);
  
  // Product details state
  const [selectedImage, setSelectedImage] = useState(0);
  const [selectedServices, setSelectedServices] = useState([]);
  const [selectedCustomOptions, setSelectedCustomOptions] = useState({});
  const [quantity, setQuantity] = useState(1);
  const [isImageZoomed, setIsImageZoomed] = useState(false);
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  const [hoveredNestedPath, setHoveredNestedPath] = useState([]);
  
  const {
    isOpen: isCategoryOpen,
    onOpen: onCategoryOpen,
    onClose: onCategoryClose,
  } = useDisclosure();
  const {
    isOpen: isMobileCategoryOpen,
    onOpen: onMobileCategoryOpen,
    onClose: onMobileCategoryClose,
  } = useDisclosure();
  const {
    isOpen: isImageModalOpen,
    onOpen: onImageModalOpen,
    onClose: onImageModalClose,
  } = useDisclosure();

  const fetchProductDetails = useCallback(async () => {
    if (!slug) return;
    setLoading(true);
    try {
      const response = await homeService.getProductBySlug(slug);

      if (response.data?.status === "success") {
        const productData = response.data.data;
        setProduct(productData);
        setProductServices(productData.services?.optional_services || []);
      } else {
        throw new Error("Invalid response format.");
      }
    } catch (error) {
      console.log("err fetch product details.");
      toast({
        title: "Error",
        description: "Failed to load product details",
        status: "error",
        duration: 3000,
        isClosable: true,
      });
    } finally {
      setLoading(false);
    }
  }, [slug, toast]);

  const fetchCategories = useCallback(async () => {
    try {
      const response = await homeService.getAllCategories();
      const categoriesData = response.data || [];
      setCategories(categoriesData);

      // Extract top-level categories for navigation
      const rootCategories = categoriesData.filter(
        (cat) => !cat.parent_id || cat.parent_id === null
      );
      setTopCategories(rootCategories);
    } catch (error) {
      console.error("Error fetching categories:", error);
      setTopCategories([]);
    }
  }, []);

  useEffect(() => {
    fetchProductDetails();
    fetchCategories();
  }, [fetchProductDetails, fetchCategories]);

  // Calculate total price including services and custom options
  const calculateTotalPrice = useCallback(() => {
    if (!product) return 0;
    
    let basePrice = product.pricing?.final_price?.gross || 0;
    let servicesPrice = 0;
    let customOptionsPrice = 0;
    
    // Add selected services
    selectedServices.forEach(serviceId => {
      const service = productServices.find(s => s.id === serviceId);
      if (service) {
        servicesPrice += parseFloat(service.price || 0);
      }
    });
    
    // Add custom options price
    Object.entries(selectedCustomOptions).forEach(([optionId, valueData]) => {
      if (valueData && valueData.price_modifier) {
        if (valueData.price_modifier_type === 'percentage') {
          customOptionsPrice += (basePrice * parseFloat(valueData.price_modifier)) / 100;
        } else {
          customOptionsPrice += parseFloat(valueData.price_modifier);
        }
      }
    });
    
    return (basePrice + servicesPrice + customOptionsPrice) * quantity;
  }, [product, selectedServices, productServices, selectedCustomOptions, quantity]);

  // Handle service selection
  const handleServiceToggle = useCallback((serviceId) => {
    setSelectedServices(prev => 
      prev.includes(serviceId) 
        ? prev.filter(id => id !== serviceId)
        : [...prev, serviceId]
    );
  }, []);

  // Handle custom option selection
  const handleCustomOptionChange = useCallback((optionId, value, priceModifier = 0, priceModifierType = 'fixed') => {
    setSelectedCustomOptions(prev => ({
      ...prev,
      [optionId]: {
        value,
        price_modifier: priceModifier,
        price_modifier_type: priceModifierType
      }
    }));
  }, []);

  // Handle image zoom on mouse move
  const handleImageMouseMove = useCallback((e) => {
    if (!isImageZoomed) return;
    
    const rect = e.currentTarget.getBoundingClientRect();
    const x = ((e.clientX - rect.left) / rect.width) * 100;
    const y = ((e.clientY - rect.top) / rect.height) * 100;
    
    setMousePosition({ x, y });
  }, [isImageZoomed]);

  const getCategoryColor = useCallback((categoryName, index) => {
    const colors = [
      { color: "blue.600", bgColor: "blue.50" },
      { color: "green.600", bgColor: "green.50" },
      { color: "purple.600", bgColor: "purple.50" },
      { color: "orange.600", bgColor: "orange.50" },
      { color: "teal.600", bgColor: "teal.50" },
      { color: "pink.600", bgColor: "pink.50" },
    ];
    return colors[index % colors.length];
  }, []);  
  const CategoryDropdownContent = () => {
    const getRootCategories = (categories) => {
      if (!categories || categories.length === 0) {
        return [];
      }

      const hasChildrenProperty = categories.some(
        (cat) => cat.children !== undefined
      );

      if (hasChildrenProperty) {
        const rootCats = categories.filter(
          (cat) => !cat.parent_id || cat.parent_id === null
        );
        return rootCats;
      } else {
        const categoryMap = {};
        const rootCategories = [];

        categories.forEach((category) => {
          categoryMap[category.id] = { ...category, children: [] };
        });

        categories.forEach((category) => {
          if (category.parent_id && categoryMap[category.parent_id]) {
            categoryMap[category.parent_id].children.push(
              categoryMap[category.id]
            );
          } else {
            rootCategories.push(categoryMap[category.id]);
          }
        });

        return rootCategories;
      }
    };

    const rootCategories = getRootCategories(categories);
    const isMobileView = useBreakpointValue({ base: true, lg: false });

    // Add handlers to prevent infinite loops
    const handleCategoryMouseEnter = useCallback((categoryId) => {
      setExpandedCategories((prevExpanded) => {
        if (prevExpanded.size === 1 && prevExpanded.has(categoryId)) {
          return prevExpanded;
        }
        return new Set([categoryId]);
      });
    }, []);

    const handleMobileCategoryToggle = useCallback((categoryId) => {
      setExpandedCategories((prevExpanded) => {
        const newExpanded = new Set(prevExpanded);
        if (newExpanded.has(categoryId)) {
          newExpanded.delete(categoryId);
        } else {
          newExpanded.clear();
          newExpanded.add(categoryId);
        }
        return newExpanded;
      });
    }, []);

    if (isMobileView) {
      // Mobile Layout - Single Column with Accordion-style
      return (
        <Box
          w="100vw"
          maxW="400px"
          bg="white"
          borderRadius="lg"
          shadow="xl"
          maxH="80vh"
          overflow="hidden"
          display={{ base: "none", md: "flex" }}
        >
          <Box
            maxH="80vh"
            overflowY="auto"
            css={{
              "&::-webkit-scrollbar": {
                width: "6px",
              },
              "&::-webkit-scrollbar-track": {
                background: "#f1f1f1",
              },
              "&::-webkit-scrollbar-thumb": {
                background: "#cbd5e0",
                borderRadius: "3px",
              },
              "&::-webkit-scrollbar-thumb:hover": {
                background: "#a0aec0",
              },
            }}
          >
            <VStack spacing={0} align="stretch">
              {loading
                ? Array.from({ length: 8 }).map((_, i) => (
                    <Box
                      key={i}
                      p={4}
                      borderBottom="1px"
                      borderColor="gray.100"
                    >
                      <HStack spacing={3}>
                        <Skeleton w="6" h="6" borderRadius="md" />
                        <SkeletonText noOfLines={1} w="60%" />
                      </HStack>
                    </Box>
                  ))
                : rootCategories.map((category) => (
                    <Box key={category.id}>
                      <Button
                        w="full"
                        justifyContent="space-between"
                        variant="ghost"
                        py={4}
                        px={4}
                        borderRadius="none"
                        borderBottom="1px"
                        borderColor="gray.100"
                        _hover={{ bg: "gray.50" }}
                        onClick={() => handleMobileCategoryToggle(category.id)}
                      >
                        <HStack spacing={3} flex={1}>
                          <Box w="6" h="6" flexShrink={0}>
                            {category.image_url ? (
                              <Image
                                src={category.image_url}
                                alt={category.name}
                                w="full"
                                h="full"
                                objectFit="cover"
                                borderRadius="md"
                              />
                            ) : (
                              <Icon
                                as={getCategoryIcon(category.name)}
                                color="rgb(239,48,84)"
                                fontSize="lg"
                              />
                            )}
                          </Box>
                          <Text
                            fontSize="sm"
                            fontWeight="medium"
                            textAlign="left"
                          >
                            {category.name}
                          </Text>
                        </HStack>
                        {category.children && category.children.length > 0 && (
                          <Icon
                            as={
                              expandedCategories.has(category.id)
                                ? FaChevronDown
                                : FaChevronRightIcon
                            }
                            fontSize="sm"
                            color="gray.400"
                            transition="transform 0.2s"
                          />
                        )}
                      </Button>

                      {/* Subcategories */}
                      {expandedCategories.has(category.id) &&
                        category.children && (
                          <Box
                            bg="gray.50"
                            borderBottom="1px"
                            borderColor="gray.100"
                          >
                            <VStack spacing={0} align="stretch">
                              {category.children.slice(0, 10).map((subcat) => (
                                <Button
                                  key={subcat.id}
                                  variant="ghost"
                                  justifyContent="flex-start"
                                  py={3}
                                  px={8}
                                  borderRadius="none"
                                  fontSize="sm"
                                  color="gray.600"
                                  _hover={{
                                    color: "rgb(239,48,84)",
                                    bg: "white",
                                  }}
                                  onClick={() =>
                                    console.log("Navigate to:", subcat.name)
                                  }
                                >
                                  {subcat.name}
                                </Button>
                              ))}
                              {category.children.length > 10 && (
                                <Button
                                  variant="ghost"
                                  justifyContent="flex-start"
                                  py={3}
                                  px={8}
                                  borderRadius="none"
                                  fontSize="sm"
                                  color="rgb(239,48,84)"
                                  fontWeight="medium"
                                >
                                  View all {category.children.length} items →
                                </Button>
                              )}
                            </VStack>
                          </Box>
                        )}
                    </Box>
                  ))}
            </VStack>
          </Box>
        </Box>
      );
    }

    // Desktop Layout - Two Column with Fixed Scrollbars
    return (
      <Box
        w="auto"
        maxW={{ base: "95vw", lg: "1200px" }}
        bg="gray.100"
        rounded="2xl"
        overflow="hidden"
      >
        <HStack spacing={0} align="stretch">
          {/* Left Sidebar - Categories */}
          <Box
            w={{ base: "full", lg: "300px" }}
            h="auto"
            borderRight="0px"
            borderColor="gray.200"
            bg="white"
            position="relative"
            p={2}
          >
            <Box
              h="full"
              overflowY="auto"
              css={{
                scrollbarWidth: "thin",
                scrollbarColor: "#cbd5e0 #f1f5f9",
                "&::-webkit-scrollbar": {
                  width: "8px",
                },
                "&::-webkit-scrollbar-track": {
                  background: "#f1f5f9",
                },
                "&::-webkit-scrollbar-thumb": {
                  background: "#cbd5e0",
                  borderRadius: "4px",
                },
                "&::-webkit-scrollbar-thumb:hover": {
                  background: "#9ca3af",
                },
              }}
            >
              <VStack spacing={0} align="stretch">
                {loading
                  ? Array.from({ length: 12 }).map((_, i) => (
                      <Box
                        key={i}
                        p={4}
                        borderBottom="1px"
                        borderColor="gray.200"
                      >
                        <HStack spacing={3}>
                          <Skeleton w="5" h="5" borderRadius="md" />
                          <SkeletonText noOfLines={1} w="70%" />
                        </HStack>
                      </Box>
                    ))
                  : rootCategories.map((category) => {
                      const isActive = expandedCategories.has(category.id);
                      return (
                        <Button
                          key={category.id}
                          justifyContent="flex-start"
                          py={4}
                          px={4}
                          borderRadius="none"
                          borderColor="gray.200"
                          bg={isActive ? "white" : "transparent"}
                          color={isActive ? "rgb(239,48,84)" : "gray.700"}
                          fontWeight={isActive ? "semibold" : "normal"}
                          _hover={{
                            bg: "white",
                            color: "rgb(239,48,84)",
                            transform: "translateX(2px)",
                          }}
                          transition="all 0.2s ease"
                          position="relative"
                          onMouseEnter={() =>
                            handleCategoryMouseEnter(category.id)
                          }
                        >
                          <HStack spacing={3} w="full">
                            <Box w="5" h="5" flexShrink={0}>
                              {category.image_url ? (
                                <Image
                                  src={category.image_url}
                                  alt={category.name}
                                  w="full"
                                  h="full"
                                  objectFit="cover"
                                  borderRadius="sm"
                                />
                              ) : (
                                <Icon
                                  as={getCategoryIcon(category.name)}
                                  color="current"
                                  fontSize="lg"
                                />
                              )}
                            </Box>
                            <Text
                              fontSize="sm"
                              textAlign="left"
                              flex={1}
                              noOfLines={1}
                            >
                              {category.name}
                            </Text>
                            {/* {category.children && category.children.length > 0 && (
                              <Icon as={FaChevronRightIcon} fontSize="xs" opacity={0.6} />
                            )} */}
                          </HStack>
                          {isActive && (
                            <Box
                              position="absolute"
                              left="0"
                              top="0"
                              bottom="0"
                              w="3px"
                              bg="rgb(239,48,84)"
                              borderRadius="0 2px 2px 0"
                            />
                          )}
                        </Button>
                      );
                    })}
              </VStack>
            </Box>
          </Box>

          {/* Right Content Panel */}
          {expandedCategories.size > 0 && (
            <Box
              flex="1"
              h="500px"
              minW={{ base: "0", lg: "600px" }}
              maxW="900px"
              bg="white"
              position="relative"
            >
              <Box
                h="full"
                overflowY="auto"
                css={{
                  scrollbarWidth: "thin",
                  scrollbarColor: "#cbd5e0 #f8fafc",
                  "&::-webkit-scrollbar": {
                    width: "12px",
                  },
                  "&::-webkit-scrollbar-track": {
                    background: "#f8fafc",
                    borderRadius: "6px",
                  },
                  "&::-webkit-scrollbar-thumb": {
                    background: "linear-gradient(to bottom, #e2e8f0, #cbd5e0)",
                    borderRadius: "6px",
                    border: "2px solid #f8fafc",
                  },
                  "&::-webkit-scrollbar-thumb:hover": {
                    background: "linear-gradient(to bottom, #cbd5e0, #9ca3af)",
                  },
                }}
              >
                {(() => {
                  const expandedCategoryId = Array.from(expandedCategories)[0];
                  const expandedCategory = rootCategories.find(
                    (cat) => cat.id === expandedCategoryId
                  );

                  if (!expandedCategory) return null;

                  const categoriesWithChildren =
                    expandedCategory.children?.filter(
                      (cat) => cat.children && cat.children.length > 0
                    ) || [];

                  const categoriesWithoutChildren =
                    expandedCategory.children?.filter(
                      (cat) => !cat.children || cat.children.length === 0
                    ) || [];

                  return (
                    <Box p={6}>
                      {/* Categories with Children */}
                      {categoriesWithChildren.length > 0 && (
                        <Box mb={8}>
                          <SimpleGrid
                            columns={{ base: 1, md: 2, lg: 3 }}
                            spacing={6}
                          >
                            {categoriesWithChildren.map((subCategory) => (
                              <Box
                                key={subCategory.id}
                                // bg="gray.50"
                                borderRadius="lg"
                                p={0}
                                transition="all 0.2s ease"
                                // border="1px"
                                // borderColor="gray.200"
                              >
                                <VStack align="stretch" spacing={3}>
                                  <Button
                                    justifyContent="flex-start"
                                    bg="transparent"
                                    p={0}
                                    h="auto"
                                    fontWeight="bold"
                                    fontSize="sm"
                                    color="gray.800"
                                    _hover={{
                                      color: "rgb(239,48,84)",
                                      bg: "transparent",
                                    }}
                                    fontFamily={"Bricolage Grotesque"}
                                  >
                                    <Text
                                      textAlign="left"
                                      w="full"
                                      noOfLines={2}
                                    >
                                      {subCategory.name}
                                    </Text>
                                  </Button>

                                  <Box
                                    maxH="150px"
                                    overflowY="auto"
                                    css={{
                                      scrollbarWidth: "thin",
                                      scrollbarColor: "#e2e8f0 transparent",
                                      "&::-webkit-scrollbar": {
                                        width: "4px",
                                      },
                                      "&::-webkit-scrollbar-track": {
                                        background: "transparent",
                                      },
                                      "&::-webkit-scrollbar-thumb": {
                                        background: "#e2e8f0",
                                        borderRadius: "2px",
                                      },
                                      "&::-webkit-scrollbar-thumb:hover": {
                                        background: "#cbd5e0",
                                      },
                                    }}
                                  >
                                    <VStack align="stretch" spacing={1}>
                                      {subCategory.children
                                        .slice(0, 15)
                                        .map((child) => (
                                          <Button
                                            key={child.id}
                                            variant="ghost"
                                            justifyContent="flex-start"
                                            size="sm"
                                            fontSize="xs"
                                            color="gray.600"
                                            fontWeight="normal"
                                            py={1}
                                            px={2}
                                            h="auto"
                                            _hover={{
                                              color: "rgb(239,48,84)",
                                              bg: "rgba(239,48,84,0.05)",
                                            }}
                                            borderRadius="md"
                                            onClick={() =>
                                              console.log(
                                                "Navigate to:",
                                                child.name
                                              )
                                            }
                                            fontFamily={"Bricolage Grotesque"}
                                          >
                                            <Text
                                              noOfLines={1}
                                              textAlign="left"
                                              w="full"
                                            >
                                              {child.name}
                                            </Text>
                                          </Button>
                                        ))}
                                      {subCategory.children.length > 15 && (
                                        <Button
                                          variant="ghost"
                                          justifyContent="center"
                                          size="sm"
                                          fontSize="xs"
                                          color="rgb(239,48,84)"
                                          fontWeight="semibold"
                                          py={2}
                                          mt={2}
                                          borderRadius="md"
                                          border="1px"
                                          borderColor="rgb(239,48,84)"
                                          _hover={{
                                            bg: "rgb(239,48,84)",
                                            color: "white",
                                          }}
                                        >
                                          +{subCategory.children.length - 15}{" "}
                                          more
                                        </Button>
                                      )}
                                    </VStack>
                                  </Box>
                                </VStack>
                              </Box>
                            ))}
                          </SimpleGrid>
                        </Box>
                      )}

                      {/* Categories without Children */}
                      {categoriesWithoutChildren.length > 0 && (
                        <Box mb={8}>
                          <Heading
                            size="md"
                            color="gray.800"
                            mb={4}
                            fontFamily="Bricolage Grotesque"
                          >
                            Popular in {expandedCategory.name}
                          </Heading>
                          <SimpleGrid
                            columns={{ base: 2, md: 3, lg: 4, xl: 6 }}
                            spacing={3}
                          >
                            {categoriesWithoutChildren.map((category) => (
                              <Button
                                key={category.id}
                                variant="outline"
                                size="sm"
                                borderColor="gray.300"
                                color="gray.600"
                                fontSize="xs"
                                fontWeight="medium"
                                px={3}
                                py={2}
                                h="auto"
                                borderRadius="full"
                                _hover={{
                                  color: "white",
                                  bg: "rgb(239,48,84)",
                                  borderColor: "rgb(239,48,84)",
                                  transform: "translateY(-1px)",
                                }}
                                transition="all 0.2s ease"
                                onClick={() =>
                                  console.log("Navigate to:", category.name)
                                }
                              >
                                <Text noOfLines={2} lineHeight="1.2">
                                  {category.name}
                                </Text>
                              </Button>
                            ))}
                          </SimpleGrid>
                        </Box>
                      )}

                      {/* Empty State */}
                      {(!expandedCategory.children ||
                        expandedCategory.children.length === 0) && (
                        <VStack spacing={6} py={16}>
                          <Box
                            w="20"
                            h="20"
                            bg="gray.100"
                            borderRadius="full"
                            display="flex"
                            alignItems="center"
                            justifyContent="center"
                          >
                            <Icon as={FaBox} fontSize="2xl" color="gray.400" />
                          </Box>
                          <VStack spacing={2}>
                            <Heading
                              size="md"
                              color="gray.600"
                              textAlign="center"
                            >
                              {expandedCategory.name}
                            </Heading>
                            <Text
                              fontSize="sm"
                              color="gray.400"
                              textAlign="center"
                            >
                              No subcategories available yet
                            </Text>
                          </VStack>
                        </VStack>
                      )}

                      {/* Extra spacing for scroll demonstration */}
                      <Box h="20" />
                    </Box>
                  );
                })()}
              </Box>
            </Box>
          )}
        </HStack>
      </Box>
    );
  };

  // Icon mapping for categories
  const getCategoryIcon = (categoryName) => {
    const iconMap = {
      electronics: FaLaptop,
      fashion: FaTshirt,
      home: FaHome,
      sports: FaDumbbell,
      beauty: FaPalette,
      automotive: FaCar,
      baby: FaBaby,
      hobbies: FaGamepad,
      music: FaMusic,
      camera: FaCamera,
      kitchen: FaUtensils,
      toys: FaGamepad,
      books: FaBox,
      health: FaShieldAlt,
      jewelry: FaPalette,
      shoes: FaTshirt,
      bags: FaTags,
      phones: FaLaptop,
      computers: FaLaptop,
      tablets: FaLaptop,
      gaming: FaGamepad,
      furniture: FaHome,
      garden: FaHome,
      clothing: FaTshirt,
      accessories: FaPalette,
      tools: FaBox,
      outdoor: FaDumbbell,
      fitness: FaDumbbell,
      art: FaPalette,
      crafts: FaPalette,
      supplies: FaBox,
      popular: FaFire,
      trending: FaHotjar,
      new: FaTags,
      deals: FaPercent,
      bundle: FaGift,
    };

    const lowerName = categoryName.toLowerCase();
    for (const [key, icon] of Object.entries(iconMap)) {
      if (lowerName.includes(key)) {
        return icon;
      }
    }
    return FaBox;
  };

  console.log("product: ", product);

  return (
    <Box minH="100vh" bg="#fff">
      <Box
        bg="white"
        shadow="sm"
        position="sticky"
        top="0"
        zIndex="1000"
        display={{ base: "none", md: "flex" }}
      >
        <Container maxW="8xl">
          <Box display={{ base: "none", md: "block" }}>
            <Flex align="center" justify="space-between" py={3}>
              <Box flexShrink={0} mr={6}>
                <Image
                  src={Logo}
                  alt="AS Solutions Logo"
                  height="40px"
                  width="auto"
                  objectFit="contain"
                />
              </Box>

              <Box flex="1" maxW="2xl">
                <InputGroup size="lg">
                  <InputLeftElement>
                    <Icon as={FaSearch} color="gray.400" />
                  </InputLeftElement>
                  <Input
                    placeholder="What do you want to find?"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    borderRadius="full"
                    border="1px"
                    px={2}
                    borderColor="gray.300"
                    focusBorderColor="rgb(239,48,84)"
                    bg="white"
                    _placeholder={{ color: "gray.500" }}
                    fontSize="md"
                    _focus={{
                      borderColor: "rgb(239,48,84)",
                      shadow: "0 0 0 1px rgb(239,48,84)",
                    }}
                  />
                </InputGroup>
              </Box>

              <HStack spacing={4} flexShrink={0} ml={6}>
                <Button
                  variant="ghost"
                  size="sm"
                  color="gray.600"
                  _hover={{ color: "rgb(239,48,84)" }}
                >
                  Log in
                </Button>
                <IconButton
                  icon={<FaBell />}
                  variant="ghost"
                  color="gray.600"
                  _hover={{ color: "rgb(239,48,84)" }}
                  aria-label="Notifications"
                />
                <IconButton
                  icon={<FaHeart />}
                  variant="ghost"
                  color="gray.600"
                  _hover={{ color: "red.500" }}
                  aria-label="Wishlist"
                />
                <IconButton
                  icon={<FaShoppingCart />}
                  variant="ghost"
                  color="gray.600"
                  _hover={{ color: "rgb(239,48,84)" }}
                  aria-label="Cart"
                />
                <Button
                  bg="rgb(239,48,84)"
                  color="white"
                  size="sm"
                  _hover={{ bg: "rgb(219,28,64)" }}
                  borderRadius="8px"
                  px={4}
                  fontFamily={"Bricolage Grotesque"}
                >
                  Get the app
                </Button>
              </HStack>
            </Flex>
          </Box>

          <Box display={{ base: "block", md: "none" }}>
            <Flex align="center" justify="space-between" py={3} px={2}>
              <Box flexShrink={0}>
                <Image
                  src={Logo}
                  alt="AS Solutions Logo"
                  height="32px"
                  width="auto"
                  objectFit="contain"
                />
              </Box>

              <HStack spacing={2}>
                <IconButton
                  icon={<FaBell />}
                  variant="ghost"
                  size="sm"
                  color="gray.600"
                  _hover={{ color: "rgb(239,48,84)" }}
                  aria-label="Notifications"
                />
                <IconButton
                  icon={<FaHeart />}
                  variant="ghost"
                  size="sm"
                  color="gray.600"
                  _hover={{ color: "red.500" }}
                  aria-label="Wishlist"
                />
                <IconButton
                  icon={<FaShoppingCart />}
                  variant="ghost"
                  size="sm"
                  color="gray.600"
                  _hover={{ color: "rgb(239,48,84)" }}
                  aria-label="Cart"
                />
              </HStack>
            </Flex>

            <Box px={2} pb={3}>
              <InputGroup size="md">
                <InputLeftElement>
                  <Icon as={FaSearch} color="gray.400" />
                </InputLeftElement>
                <Input
                  placeholder="Search products..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  borderRadius="full"
                  border="1px"
                  borderColor="gray.300"
                  focusBorderColor="rgb(239,48,84)"
                  bg="gray.50"
                  _placeholder={{ color: "gray.500" }}
                  fontSize="sm"
                  _focus={{
                    borderColor: "rgb(239,48,84)",
                    shadow: "0 0 0 1px rgb(239,48,84)",
                    bg: "white",
                  }}
                />
              </InputGroup>
            </Box>

            <HStack spacing={2} px={2} pb={2} justify="space-between">
              <Button
                variant="ghost"
                size="sm"
                color="gray.600"
                _hover={{ color: "rgb(239,48,84)" }}
                fontSize="sm"
                fontFamily={"Bricolage Grotesque"}
              >
                Log in
              </Button>
              <Button
                bg="rgb(239,48,84)"
                color="white"
                size="sm"
                _hover={{ bg: "rgb(219,28,64)" }}
                borderRadius="full"
                px={4}
                fontSize="xs"
                fontFamily={"Bricolage Grotesque"}
              >
                Get the app
              </Button>
            </HStack>
          </Box>
        </Container>
      </Box>

      {/* Mobile area Header */}
      <Box
        bg="white"
        shadow="sm"
        position="sticky"
        top="0"
        zIndex="1000"
        display={{ base: "block", md: "none" }}
      >
        <Box bg="gray.800" py={2} px={4}>
          <HStack spacing={2} justify="center">
            <Icon as={FaShippingFast} color="white" fontSize="sm" />
            <Text fontSize="xs" color="white" textAlign="center">
              Buy at As Solutions for exclusive offers!
            </Text>
          </HStack>
        </Box>
        <Container maxW="8xl">
          {/* Mobile Header - Like reference design */}
          <Box display={{ base: "block", md: "none" }}>
            {/* Top bar with delivery info */}

            {/* Main header row */}
            <Flex align="center" justify="space-between" py={3} px={4}>
              {/* Logo */}
              <Box flexShrink={0}>
                <Image
                  src={Logo}
                  alt="AS Solutions Logo"
                  height="32px"
                  width="auto"
                  objectFit="contain"
                />
              </Box>

              {/* Right side - Wishlist icon */}
              <IconButton
                icon={<FaHeart />}
                variant="ghost"
                size="md"
                color="gray.600"
                _hover={{ color: "red.500" }}
                aria-label="Wishlist"
                borderRadius="full"
              />
            </Flex>

            {/* Search Bar - Full width like reference */}
            <Box px={4} pb={4}>
              <InputGroup size="lg">
                <InputLeftElement pointerEvents="none">
                  <Icon as={FaSearch} color="gray.400" />
                </InputLeftElement>
                <Input
                  placeholder="Kërko produkte"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  borderRadius="25px"
                  border="1px"
                  borderColor="gray.300"
                  focusBorderColor="rgb(239,48,84)"
                  bg="gray.50"
                  _placeholder={{ color: "gray.500" }}
                  fontSize="md"
                  py={6}
                  _focus={{
                    borderColor: "rgb(239,48,84)",
                    shadow: "0 0 0 1px rgb(239,48,84)",
                    bg: "white",
                  }}
                  _hover={{
                    borderColor: "gray.400",
                    bg: "white",
                  }}
                  transition="all 0.2s ease"
                />
              </InputGroup>
            </Box>
          </Box>
        </Container>
      </Box>

      {/* Bottom Navigation Bar For Mobile */}
      <Box
        display={{ base: "block", md: "none" }}
        position="fixed"
        bottom="0"
        left="0"
        right="0"
        bg="white"
        borderTop="1px"
        borderColor="gray.200"
        shadow="lg"
        zIndex="1000"
        px={0}
      >
        <HStack spacing={0} justify="space-around" py={2} px={1}>
          {/* Home */}
          <VStack spacing={1} flex={1} py={2} cursor="pointer">
            <Icon as={FaHome} fontSize="lg" color="rgb(239,48,84)" />
            <Text
              fontSize="xs"
              color="rgb(239,48,84)"
              fontWeight="semibold"
              textAlign="center"
            >
              Home
            </Text>
          </VStack>

          {/* Categories */}
          <VStack
            spacing={1}
            flex={1}
            cursor="pointer"
            py={2}
            onClick={onMobileCategoryOpen}
          >
            <Icon as={FaBars} fontSize="lg" color="gray.600" />
            <Text fontSize="xs" color="gray.600" textAlign="center">
              Collections
            </Text>
          </VStack>

          <MobileCategoryNavigation
            isOpen={isMobileCategoryOpen}
            onClose={onMobileCategoryClose}
            categories={categories}
            loading={loading}
          />

          {/* Cart */}
          <VStack
            spacing={1}
            flex={1}
            py={2}
            cursor="pointer"
            position="relative"
          >
            <Box position="relative">
              <Icon as={FaShoppingCart} fontSize="lg" color="gray.600" />
              <Badge
                position="absolute"
                top="-1"
                right="-1"
                bg="rgb(239,48,84)"
                color="white"
                borderRadius="full"
                fontSize="2xs"
                minW="16px"
                h="16px"
                display="flex"
                alignItems="center"
                justifyContent="center"
              >
                0
              </Badge>
            </Box>
            <Text fontSize="xs" color="gray.600" textAlign="center">
              Cart
            </Text>
          </VStack>

          {/* Chat */}
          <VStack spacing={1} flex={1} py={2} cursor="pointer">
            <Icon as={FaComments} fontSize="lg" color="gray.600" />
            <Text fontSize="xs" color="gray.600" textAlign="center">
              Chat
            </Text>
          </VStack>

          {/* Account */}
          <VStack spacing={1} flex={1} py={2} cursor="pointer">
            <Icon as={FaUser} fontSize="lg" color="gray.600" />
            <Text fontSize="xs" color="gray.600" textAlign="center">
              Account
            </Text>
          </VStack>
        </HStack>
      </Box>

      {/* Category Navigation - Responsive for both desktop and mobile */}
      <Box
        bg="white"
        borderTop="1px"
        borderColor="gray.200"
        py={2}
        display="block" // Show on both desktop and mobile
      >
        <Container maxW="8xl">
          {/* Desktop Version */}
          <HStack
            spacing={2}
            align="center"
            py={1}
            justify="flex-start"
            w="full"
            display={{ base: "none", md: "flex" }}
          >
            <Popover
              isOpen={isCategoryOpen}
              onOpen={onCategoryOpen}
              onClose={onCategoryClose}
              placement="bottom-start"
              closeOnBlur={true}
              trigger="hover"
            >
              <PopoverTrigger>
                <Button
                  leftIcon={<Icon as={FaBars} />}
                  variant="solid"
                  bg="rgb(239,48,84)"
                  color="white"
                  _hover={{
                    bg: "rgb(219,28,64)",
                    transform: "translateY(-1px)",
                    shadow: "lg",
                  }}
                  fontSize="sm"
                  rounded="lg"
                  flexShrink={0}
                  px={4}
                  py={2}
                  h="auto"
                  transition="all 0.2s ease"
                  onMouseEnter={onCategoryOpen}
                  fontFamily="Bricolage Grotesque"
                >
                  All Categories
                </Button>
              </PopoverTrigger>
              <Portal>
                <PopoverContent
                  w="auto"
                  maxW="none"
                  border="1px"
                  borderColor="gray.200"
                  shadow="2xl"
                  borderRadius="xl"
                  p={0}
                  bg="white"
                  zIndex={1400}
                  _focus={{ boxShadow: "2xl" }}
                  onMouseEnter={() => {
                    onCategoryOpen();
                  }}
                  onMouseLeave={() => {
                    setTimeout(() => {
                      setExpandedCategories(new Set());
                      setHoveredSubCategory(null);
                      setHoveredNestedPath([]);
                      onCategoryClose();
                    }, 200);
                  }}
                >
                  <PopoverBody p={0}>
                    {loading ? (
                      <Box w="1000px" p={8}>
                        <VStack spacing={6}>
                          <HStack w="full" spacing={6}>
                            <VStack w="250px" spacing={4}>
                              {[...Array(6)].map((_, i) => (
                                <HStack key={i} w="full" spacing={4}>
                                  <Skeleton w="6" h="6" borderRadius="md" />
                                  <SkeletonText noOfLines={1} w="full" />
                                </HStack>
                              ))}
                            </VStack>
                            <VStack w="750px" spacing={4}>
                              <SkeletonText noOfLines={2} w="full" />
                              <SimpleGrid columns={4} spacing={4} w="full">
                                {[...Array(12)].map((_, i) => (
                                  <Skeleton key={i} h="8" borderRadius="md" />
                                ))}
                              </SimpleGrid>
                            </VStack>
                          </HStack>
                        </VStack>
                      </Box>
                    ) : (
                      <CategoryDropdownContent />
                    )}
                  </PopoverBody>
                </PopoverContent>
              </Portal>
            </Popover>

            <Button
              leftIcon={<Icon as={FaFire} color="red.500" />}
              variant="ghost"
              color="gray.700"
              _hover={{ color: "red.600", bg: "red.50" }}
              fontWeight="medium"
              fontSize="sm"
              px={3}
              flexShrink={0}
              minW="auto"
              rounded="full"
            >
              Trending
            </Button>

            <Button
              leftIcon={<Icon as={FaStar} color="yellow.500" />}
              variant="ghost"
              color="gray.700"
              _hover={{ color: "yellow.600", bg: "yellow.50" }}
              fontWeight="medium"
              fontSize="sm"
              px={3}
              flexShrink={0}
              minW="auto"
              rounded="full"
            >
              New Arrivals
            </Button>

            <Button
              leftIcon={<Icon as={FaTags} color="purple.500" />}
              variant="ghost"
              color="gray.700"
              _hover={{ color: "purple.600", bg: "purple.50" }}
              fontWeight="medium"
              fontSize="sm"
              px={3}
              flexShrink={0}
              minW="auto"
              rounded="full"
            >
              Deals hub
            </Button>

            <Button
              leftIcon={<Icon as={FaPercent} color="green.500" />}
              variant="ghost"
              color="gray.700"
              _hover={{ color: "green.600", bg: "green.50" }}
              fontWeight="medium"
              fontSize="sm"
              px={3}
              flexShrink={0}
              minW="auto"
              rounded="full"
            >
              Weekly Deals
            </Button>

            {loading ? (
              <HStack spacing={2}>
                {[...Array(4)].map((_, i) => (
                  <Skeleton key={i} h="8" w="20" borderRadius="md" />
                ))}
              </HStack>
            ) : (
              topCategories.slice(0, 4).map((category, index) => {
                const colors = getCategoryColor(category.name, index);

                return (
                  <Box key={category.id} position="relative">
                    <Button
                      variant="ghost"
                      color="gray.700"
                      _hover={{
                        color: colors.color,
                        bg: colors.bgColor,
                        transform: "translateY(-1px)",
                        shadow: "sm",
                      }}
                      fontWeight="medium"
                      fontSize="sm"
                      px={3}
                      flexShrink={0}
                      minW="auto"
                      position="relative"
                      transition="all 0.2s ease"
                      borderBottom={
                        hoveredCategory === category.id
                          ? `2px solid ${colors.color}`
                          : "2px solid transparent"
                      }
                      onClick={() => {
                        if (hoveredCategory === category.id) {
                          setHoveredCategory(null);
                        } else {
                          setHoveredCategory(category.id);
                        }
                      }}
                      rounded="full"
                    >
                      {category.name}
                      <Icon
                        as={FaChevronDown}
                        ml={1}
                        fontSize="xs"
                        opacity={0.7}
                      />
                    </Button>

                    {hoveredCategory === category.id && (
                      <Box
                        position="absolute"
                        top="100%"
                        left={index >= 2 ? "-250px" : "0"}
                        mt={1}
                        p={2}
                        bg="#fff"
                        border="1px"
                        borderColor="gray.100"
                        borderRadius="2xl"
                        shadow="4xl"
                        zIndex={1300}
                        maxH="500px"
                        overflow="hidden"
                        onMouseEnter={() => {
                          setHoveredCategory(category.id);
                        }}
                        onMouseLeave={() => {
                          setTimeout(() => {
                            setHoveredCategory(null);
                            setHoveredSubCategory(null);
                          }, 200);
                        }}
                      >
                        <HStack align="start" spacing={0}>
                          <VStack
                            align="stretch"
                            spacing={0}
                            w="280px"
                            maxH="500px"
                            overflowY="auto"
                            bg="white"
                            css={{
                              "&::-webkit-scrollbar": {
                                width: "4px",
                              },
                              "&::-webkit-scrollbar-track": {
                                background: "#f1f1f1",
                              },
                              "&::-webkit-scrollbar-thumb": {
                                background: "#c1c1c1",
                                borderRadius: "2px",
                              },
                              "&::-webkit-scrollbar-thumb:hover": {
                                background: "#a8a8a8",
                              },
                            }}
                          >
                            {category.children &&
                            category.children.length > 0 ? (
                              category.children.map((subcat) => (
                                <Button
                                  key={subcat.id}
                                  variant="ghost"
                                  justifyContent="flex-start"
                                  h="auto"
                                  py={3}
                                  px={4}
                                  fontSize="sm"
                                  fontWeight="medium"
                                  color="gray.700"
                                  _hover={{
                                    bg: "rgba(239,48,84,0.1)",
                                    color: "rgb(239,48,84)",
                                  }}
                                  borderRadius="none"
                                  textAlign="left"
                                  w="full"
                                  borderBottom="0px"
                                  borderColor="gray.100"
                                  onMouseEnter={() => {
                                    setHoveredSubCategory(subcat.id);
                                  }}
                                  onMouseLeave={() => {
                                    setHoveredSubCategory(null);
                                  }}
                                >
                                  <HStack justify="space-between" w="full">
                                    <Text noOfLines={1}>{subcat.name}</Text>
                                    {subcat.children &&
                                      subcat.children.length > 0 && (
                                        <Icon
                                          as={FaChevronRight}
                                          fontSize="xs"
                                          color="gray.400"
                                        />
                                      )}
                                  </HStack>
                                </Button>
                              ))
                            ) : (
                              <VStack p={4} spacing={2}>
                                <Text
                                  fontSize="sm"
                                  color="gray.500"
                                  textAlign="center"
                                >
                                  No subcategories available!
                                </Text>
                              </VStack>
                            )}
                          </VStack>

                          {hoveredSubCategory &&
                            (() => {
                              const currentSubcat = category.children?.find(
                                (sub) => sub.id === hoveredSubCategory
                              );

                              if (
                                !currentSubcat ||
                                !currentSubcat.children ||
                                currentSubcat.children.length === 0
                              ) {
                                return null;
                              }

                              const childrenCount =
                                currentSubcat.children.length;
                              let columns = 2;
                              let panelWidth = "400px";

                              if (childrenCount <= 4) {
                                columns = 1;
                                panelWidth = "280px";
                              } else if (childrenCount <= 8) {
                                columns = 2;
                                panelWidth = "400px";
                              } else if (childrenCount <= 16) {
                                columns = 3;
                                panelWidth = "500px";
                              } else {
                                columns = 4;
                                panelWidth = "600px";
                              }

                              return (
                                <Box
                                  w={panelWidth}
                                  minH="200px"
                                  maxH="500px"
                                  bg="white"
                                  borderLeft="1px"
                                  borderColor="gray.200"
                                  onMouseEnter={() => {
                                    setHoveredSubCategory(hoveredSubCategory);
                                  }}
                                  overflowY="auto"
                                  position="relative"
                                  css={{
                                    "&::-webkit-scrollbar": {
                                      width: "4px",
                                    },
                                    "&::-webkit-scrollbar-track": {
                                      background: "#f7fafc",
                                    },
                                    "&::-webkit-scrollbar-thumb": {
                                      background:
                                        "linear-gradient(180deg, #e2e8f0, #cbd5e0)",
                                      borderRadius: "2px",
                                    },
                                    "&::-webkit-scrollbar-thumb:hover": {
                                      background:
                                        "linear-gradient(180deg, #cbd5e0, #a0aec0)",
                                    },
                                  }}
                                >
                                  <Box p={4}>
                                    <SimpleGrid
                                      columns={columns}
                                      spacing={3}
                                      w="full"
                                    >
                                      {currentSubcat.children.map(
                                        (child, childIndex) => {
                                          const isHighlighted =
                                            childIndex % 5 === 0;
                                          const isPrimary =
                                            childIndex % 7 === 0;

                                          return (
                                            <Box
                                              key={child.id}
                                              justifyContent="flex-start"
                                              h="auto"
                                              fontSize="sm"
                                              _hover={{
                                                color: "rgb(239,48,84)",
                                              }}
                                            >
                                              <VStack
                                                align="start"
                                                spacing={1}
                                                w="full"
                                              >
                                                <HStack
                                                  w="full"
                                                  justify="space-between"
                                                >
                                                  <Text
                                                    noOfLines={2}
                                                    fontSize="sm"
                                                    lineHeight="1.4"
                                                    flex={1}
                                                    fontFamily="Bricolage Grotesque"
                                                  >
                                                    {child.name}
                                                  </Text>
                                                </HStack>
                                              </VStack>
                                            </Box>
                                          );
                                        }
                                      )}
                                    </SimpleGrid>
                                  </Box>
                                </Box>
                              );
                            })()}
                        </HStack>
                      </Box>
                    )}
                  </Box>
                );
              })
            )}

            <Button
              leftIcon={<Icon as={FaHandsHelping} color="blue.500" />}
              variant="ghost"
              color="gray.700"
              _hover={{ color: "blue.600", bg: "blue.50" }}
              fontWeight="medium"
              fontSize="sm"
              px={3}
              flexShrink={0}
              minW="auto"
            >
              Customer Service
            </Button>
          </HStack>

          {/* Mobile Version - Horizontal Scrollable */}
          <Box display={{ base: "block", md: "none" }} px={2} py={1}>
            <Box
              overflowX="auto"
              overflowY="hidden"
              css={{
                scrollbarWidth: "none",
                msOverflowStyle: "none",
                "&::-webkit-scrollbar": {
                  display: "none",
                },
              }}
            >
              <HStack
                spacing={3}
                align="center"
                minW="max-content"
                py={2}
                px={2}
              >
                <Button
                  leftIcon={<Icon as={FaFire} color="red.500" />}
                  variant="ghost"
                  color="gray.700"
                  _hover={{ color: "red.600", bg: "red.50" }}
                  _active={{ color: "red.600", bg: "red.100" }}
                  fontWeight="medium"
                  fontSize="sm"
                  px={4}
                  py={2}
                  h="auto"
                  flexShrink={0}
                  minW="auto"
                  rounded="full"
                  whiteSpace="nowrap"
                  fontFamily="Bricolage Grotesque"
                >
                  Trending
                </Button>

                <Button
                  leftIcon={<Icon as={FaStar} color="yellow.500" />}
                  variant="ghost"
                  color="gray.700"
                  _hover={{ color: "yellow.600", bg: "yellow.50" }}
                  _active={{ color: "yellow.600", bg: "yellow.100" }}
                  fontWeight="medium"
                  fontSize="sm"
                  px={4}
                  py={2}
                  h="auto"
                  flexShrink={0}
                  minW="auto"
                  rounded="full"
                  whiteSpace="nowrap"
                  fontFamily="Bricolage Grotesque"
                >
                  New Arrivals
                </Button>

                <Button
                  leftIcon={<Icon as={FaTags} color="purple.500" />}
                  variant="ghost"
                  color="gray.700"
                  _hover={{ color: "purple.600", bg: "purple.50" }}
                  _active={{ color: "purple.600", bg: "purple.100" }}
                  fontWeight="medium"
                  fontSize="sm"
                  px={4}
                  py={2}
                  h="auto"
                  flexShrink={0}
                  minW="auto"
                  rounded="full"
                  whiteSpace="nowrap"
                  fontFamily="Bricolage Grotesque"
                >
                  Deals hub
                </Button>

                <Button
                  leftIcon={<Icon as={FaPercent} color="green.500" />}
                  variant="ghost"
                  color="gray.700"
                  _hover={{ color: "green.600", bg: "green.50" }}
                  _active={{ color: "green.600", bg: "green.100" }}
                  fontWeight="medium"
                  fontSize="sm"
                  px={4}
                  py={2}
                  h="auto"
                  flexShrink={0}
                  minW="auto"
                  rounded="full"
                  whiteSpace="nowrap"
                  fontFamily="Bricolage Grotesque"
                >
                  Weekly Deals
                </Button>

                {loading ? (
                  <HStack spacing={3}>
                    {[...Array(3)].map((_, i) => (
                      <Skeleton key={i} h="8" w="20" borderRadius="full" />
                    ))}
                  </HStack>
                ) : (
                  topCategories.slice(0, 6).map((category, index) => {
                    const colors = getCategoryColor(category.name, index);

                    return (
                      <Button
                        key={category.id}
                        variant="ghost"
                        color="gray.700"
                        _hover={{
                          color: colors.color,
                          bg: colors.bgColor,
                        }}
                        _active={{
                          color: colors.color,
                          bg: colors.bgColor,
                        }}
                        fontWeight="medium"
                        fontSize="sm"
                        px={4}
                        py={2}
                        h="auto"
                        flexShrink={0}
                        minW="auto"
                        rounded="full"
                        whiteSpace="nowrap"
                        fontFamily="Bricolage Grotesque"
                        onClick={() => {
                          console.log(
                            "Navigate to mobile category:",
                            category.name
                          );
                        }}
                      >
                        {category.name}
                      </Button>
                    );
                  })
                )}

                <Button
                  leftIcon={<Icon as={FaHandsHelping} color="blue.500" />}
                  variant="ghost"
                  color="gray.700"
                  _hover={{ color: "blue.600", bg: "blue.50" }}
                  _active={{ color: "blue.600", bg: "blue.100" }}
                  fontWeight="medium"
                  fontSize="sm"
                  px={4}
                  py={2}
                  h="auto"
                  flexShrink={0}
                  minW="auto"
                  rounded="full"
                  whiteSpace="nowrap"
                  fontFamily="Bricolage Grotesque"
                >
                  Support
                </Button>
              </HStack>
            </Box>

            {/* Subtle scroll indicator */}
            <Box
              position="absolute"
              right="0"
              top="0"
              bottom="0"
              w="20px"
              bg="linear-gradient(to left, rgba(255,255,255,0.8), transparent)"
              pointerEvents="none"
              display={{ base: "block", md: "none" }}
            />
          </Box>
        </Container>
      </Box>

      {/* Main Content Area */}
      {product ? (
        <Container maxW="8xl" py={{ base: 4, md: 8 }}>
          <Grid templateColumns={{ base: "1fr", lg: "1fr 1fr" }} gap={{ base: 6, lg: 12 }}>
            {/* Left Side - Images */}
            <GridItem>
              <VStack spacing={4} align="stretch">
                {/* Main Image */}
                <Box position="relative" bg="gray.50" borderRadius="2xl" overflow="hidden">
                  <AspectRatio ratio={1}>
                    <Box
                      position="relative"
                      overflow="hidden"
                      cursor={isImageZoomed ? "zoom-out" : "zoom-in"}
                      onMouseEnter={() => setIsImageZoomed(true)}
                      onMouseLeave={() => setIsImageZoomed(false)}
                      onMouseMove={handleImageMouseMove}
                      onClick={onImageModalOpen}
                    >
                      <Image
                        src={product.images.gallery[selectedImage]?.url || product.images.main_image.url}
                        alt={product.title}
                        objectFit="cover"
                        w="full"
                        h="full"
                        transform={isImageZoomed ? "scale(2)" : "scale(1)"}
                        transformOrigin={`${mousePosition.x}% ${mousePosition.y}%`}
                        transition="transform 0.3s ease"
                      />
                      {isImageZoomed && (
                        <Box
                          position="absolute"
                          top="4"
                          right="4"
                          bg="blackAlpha.700"
                          color="white"
                          px={3}
                          py={1}
                          borderRadius="full"
                          fontSize="sm"
                          fontWeight="medium"
                        >
                          Click to enlarge
                        </Box>
                      )}
                    </Box>
                  </AspectRatio>
                </Box>

                {/* Thumbnail Images */}
                {product.images.gallery && product.images.gallery.length > 1 && (
                  <SimpleGrid columns={5} spacing={2}>
                    {product.images.gallery.slice(0, 5).map((image, index) => (
                      <Box
                        key={index}
                        position="relative"
                        cursor="pointer"
                        onClick={() => setSelectedImage(index)}
                        borderRadius="lg"
                        overflow="hidden"
                        border={selectedImage === index ? "3px solid" : "2px solid transparent"}
                        borderColor={selectedImage === index ? "rgb(239,48,84)" : "transparent"}
                      >
                        <AspectRatio ratio={1}>
                          <Image
                            src={image.url}
                            alt={`${product.title} view ${index + 1}`}
                            objectFit="cover"
                            bg="gray.100"
                          />
                        </AspectRatio>
                      </Box>
                    ))}
                  </SimpleGrid>
                )}
              </VStack>
            </GridItem>

            {/* Right Side - Product Info */}
            <GridItem>
              <VStack spacing={6} align="stretch">
                {/* Product Title & Basic Info */}
                <Box>
                  <Heading size="lg" color="gray.800" mb={2} fontFamily="Bricolage Grotesque">
                    {product.title}
                  </Heading>
                  
                  {/* SKU & EAN */}
                  <HStack spacing={4} mb={3}>
                    <Text fontSize="sm" color="gray.600">
                      SKU: <Text as="span" fontWeight="medium">{product.sku}</Text>
                    </Text>
                    {product.ean && (
                      <Text fontSize="sm" color="gray.600">
                        EAN: <Text as="span" fontWeight="medium">{product.ean}</Text>
                      </Text>
                    )}
                  </HStack>

                  {/* Rating & Reviews */}
                  <HStack spacing={2} mb={4}>
                    <HStack spacing={1}>
                      {[...Array(5)].map((_, i) => (
                        <Icon
                          key={i}
                          as={FaStar}
                          color={i < Math.floor(product.analytics.rating) ? "yellow.400" : "gray.300"}
                          fontSize="sm"
                        />
                      ))}
                    </HStack>
                    <Text fontSize="sm" color="gray.600">
                      {product.analytics.rating} ({product.analytics.reviews_count} reviews)
                    </Text>
                  </HStack>

                  {/* Badges */}
                  <HStack spacing={2} mb={4} wrap="wrap">
                    {product.badges.is_on_sale && (
                      <Badge colorScheme="red" px={2} py={1} borderRadius="full">
                        Sale
                      </Badge>
                    )}
                    {product.badges.is_new && (
                      <Badge colorScheme="green" px={2} py={1} borderRadius="full">
                        New
                      </Badge>
                    )}
                    {product.badges.free_shipping && (
                      <Badge colorScheme="blue" px={2} py={1} borderRadius="full">
                        Free Shipping
                      </Badge>
                    )}
                    {product.badges.is_featured && (
                      <Badge colorScheme="purple" px={2} py={1} borderRadius="full">
                        Featured
                      </Badge>
                    )}
                  </HStack>
                </Box>

                {/* Price Section */}
                <Box bg="gray.50" p={6} borderRadius="xl">
                  <VStack spacing={3} align="stretch">
                    <HStack justify="space-between" align="center">
                      <VStack align="start" spacing={1}>
                        <Text fontSize="2xl" fontWeight="bold" color="rgb(239,48,84)">
                          ${calculateTotalPrice().toFixed(2)}
                        </Text>
                        {product.pricing.regular_price.gross !== product.pricing.final_price.gross && (
                          <HStack spacing={2}>
                            <Text fontSize="lg" textDecoration="line-through" color="gray.500">
                              ${(product.pricing.regular_price.gross * quantity).toFixed(2)}
                            </Text>
                            <Badge colorScheme="red" px={2} py={1} borderRadius="full">
                              Save ${(product.pricing.discount.amount_gross * quantity).toFixed(2)}
                            </Badge>
                          </HStack>
                        )}
                      </VStack>
                      
                      {/* Quantity Selector */}
                      <VStack spacing={2}>
                        <Text fontSize="sm" color="gray.600" fontWeight="medium">
                          Quantity
                        </Text>
                        <NumberInput
                          value={quantity}
                          onChange={(value) => setQuantity(parseInt(value) || 1)}
                          min={1}
                          max={100}
                          size="md"
                          w="80px"
                        >
                          <NumberInputField />
                          <NumberInputStepper>
                            <NumberIncrementStepper />
                            <NumberDecrementStepper />
                          </NumberInputStepper>
                        </NumberInput>
                      </VStack>
                    </HStack>

                    {/* Add to Cart Button */}
                    <Button
                      size="lg"
                      bg="rgb(239,48,84)"
                      color="white"
                      _hover={{ bg: "rgb(219,28,64)" }}
                      _active={{ bg: "rgb(199,8,44)" }}
                      borderRadius="xl"
                      py={6}
                      fontFamily="Bricolage Grotesque"
                      fontWeight="bold"
                      leftIcon={<Icon as={FaShoppingCart} />}
                    >
                      Add to Cart
                    </Button>
                  </VStack>
                </Box>

                {/* Product Services */}
                {productServices && productServices.length > 0 && (
                  <Box>
                    <Heading size="md" mb={4} color="gray.800" fontFamily="Bricolage Grotesque">
                      Optional Services
                    </Heading>
                    <VStack spacing={3} align="stretch">
                      {productServices.map((service) => (
                        <Box
                          key={service.id}
                          p={4}
                          border="1px"
                          borderColor="gray.200"
                          borderRadius="lg"
                          _hover={{ borderColor: "rgb(239,48,84)" }}
                          transition="border-color 0.2s"
                        >
                          <HStack justify="space-between" align="start">
                            <VStack align="start" spacing={1} flex={1}>
                              <HStack spacing={3}>
                                <Checkbox
                                  isChecked={selectedServices.includes(service.id)}
                                  onChange={() => handleServiceToggle(service.id)}
                                  colorScheme="red"
                                />
                                <VStack align="start" spacing={1}>
                                  <Text fontWeight="medium" color="gray.800">
                                    {service.title}
                                  </Text>
                                  <Text fontSize="sm" color="gray.600">
                                    {service.description}
                                  </Text>
                                </VStack>
                              </HStack>
                            </VStack>
                            <Text fontWeight="bold" color="rgb(239,48,84)">
                              +${parseFloat(service.price || 0).toFixed(2)}
                            </Text>
                          </HStack>
                        </Box>
                      ))}
                    </VStack>
                  </Box>
                )}

                {/* Custom Options */}
                {product.custom_options && product.custom_options.has_options && (
                  <Box>
                    <Heading size="md" mb={4} color="gray.800" fontFamily="Bricolage Grotesque">
                      Customize Your Product
                    </Heading>
                    <VStack spacing={4} align="stretch">
                      {product.custom_options.optional_options.map((option) => (
                        <FormControl key={option.id}>
                          <FormLabel fontWeight="medium" color="gray.700">
                            {option.option_name}
                            {option.is_required && <Text as="span" color="red.500"> *</Text>}
                          </FormLabel>
                          
                          {option.help_text && (
                            <Text fontSize="sm" color="gray.600" mb={2}>
                              {option.help_text}
                            </Text>
                          )}

                          {/* Render different input types */}
                          {option.option_type === 'text' && (
                            <Input
                              placeholder={option.placeholder_text}
                              onChange={(e) => handleCustomOptionChange(option.id, e.target.value)}
                            />
                          )}

                          {option.option_type === 'textarea' && (
                            <Textarea
                              placeholder={option.placeholder_text}
                              onChange={(e) => handleCustomOptionChange(option.id, e.target.value)}
                            />
                          )}

                          {option.option_type === 'select' && option.values && (
                            <Select
                              placeholder="Choose an option"
                              onChange={(e) => {
                                const selectedValue = option.values.find(v => v.id === e.target.value);
                                if (selectedValue) {
                                  handleCustomOptionChange(
                                    option.id, 
                                    selectedValue.option_value,
                                    selectedValue.price_modifier,
                                    selectedValue.price_modifier_type
                                  );
                                }
                              }}
                            >
                              {option.values.map((value) => (
                                <option key={value.id} value={value.id}>
                                  {value.display_name || value.option_value}
                                  {value.price_modifier > 0 && 
                                    ` (+$${parseFloat(value.price_modifier).toFixed(2)})`
                                  }
                                </option>
                              ))}
                            </Select>
                          )}

                          {option.option_type === 'radio' && option.values && (
                            <RadioGroup
                              onChange={(value) => {
                                const selectedValue = option.values.find(v => v.id === value);
                                if (selectedValue) {
                                  handleCustomOptionChange(
                                    option.id,
                                    selectedValue.option_value,
                                    selectedValue.price_modifier,
                                    selectedValue.price_modifier_type
                                  );
                                }
                              }}
                            >
                              <VStack align="start" spacing={2}>
                                {option.values.map((value) => (
                                  <Radio key={value.id} value={value.id} colorScheme="red">
                                    <HStack>
                                      <Text>{value.display_name || value.option_value}</Text>
                                      {value.price_modifier > 0 && (
                                        <Text color="rgb(239,48,84)" fontWeight="medium">
                                          +${parseFloat(value.price_modifier).toFixed(2)}
                                        </Text>
                                      )}
                                    </HStack>
                                  </Radio>
                                ))}
                              </VStack>
                            </RadioGroup>
                          )}
                        </FormControl>
                      ))}
                    </VStack>
                  </Box>
                )}

                {/* Product Details Tabs */}
                <Box>
                  <Tabs variant="line" colorScheme="red">
                    <TabList>
                      <Tab fontFamily="Bricolage Grotesque">Description</Tab>
                      <Tab fontFamily="Bricolage Grotesque">Specifications</Tab>
                      <Tab fontFamily="Bricolage Grotesque">Shipping</Tab>
                    </TabList>

                    <TabPanels>
                      <TabPanel px={0}>
                        <Box 
                          dangerouslySetInnerHTML={{ __html: product.description }}
                          sx={{
                            '& p': { mb: 3 },
                            '& h1, & h2, & h3, & h4, & h5, & h6': { mb: 2, fontWeight: 'bold' },
                            '& ul, & ol': { ml: 4, mb: 3 },
                          }}
                        />
                      </TabPanel>
                      
                      <TabPanel px={0}>
                        <SimpleGrid columns={{ base: 1, md: 2 }} spacing={4}>
                          {product.physical_specifications?.dimensions && (
                            <Box>
                              <Text fontWeight="bold" mb={2}>Dimensions</Text>
                              <Text color="gray.600">
                                Unit: {product.physical_specifications.dimensions.unit}
                              </Text>
                            </Box>
                          )}
                          {product.physical_specifications?.weight && (
                            <Box>
                              <Text fontWeight="bold" mb={2}>Weight</Text>
                              <Text color="gray.600">
                                Unit: {product.meta.weight_unit}
                              </Text>
                            </Box>
                          )}
                          <Box>
                            <Text fontWeight="bold" mb={2}>Type</Text>
                            <Text color="gray.600">
                              {product.meta.is_digital ? 'Digital Product' : 'Physical Product'}
                            </Text>
                          </Box>
                        </SimpleGrid>
                      </TabPanel>
                      
                      <TabPanel px={0}>
                        <VStack align="start" spacing={3}>
                          <HStack>
                            <Icon as={FaShippingFast} color="green.500" />
                            <Text fontWeight="medium">Delivery Information</Text>
                          </HStack>
                          <Text color="gray.600">
                            Lead time: {product.availability.lead_time} days
                          </Text>
                          <Text color="gray.600">
                            Status: {product.availability.stock_status.replace('_', ' ').toUpperCase()}
                          </Text>
                          {product.badges.free_shipping && (
                            <HStack>
                              <Icon as={FaCheck} color="green.500" />
                              <Text color="green.600" fontWeight="medium">Free shipping included</Text>
                            </HStack>
                          )}
                        </VStack>
                      </TabPanel>
                    </TabPanels>
                  </Tabs>
                </Box>

                {/* Seller Information */}
                <Box p={6} bg="gray.50" borderRadius="xl">
                  <HStack spacing={4} align="start">
                    <Image
                      src={product.seller.logo_url}
                      alt={product.seller.business_name}
                      w="60px"
                      h="60px"
                      objectFit="cover"
                      borderRadius="lg"
                      bg="white"
                    />
                    <VStack align="start" spacing={1} flex={1}>
                      <Text fontWeight="bold" color="gray.800">
                        {product.seller.business_name}
                      </Text>
                      <Text fontSize="sm" color="gray.600">
                        Sold by {product.seller.display_name}
                      </Text>
                      {product.seller.website_url && (
                        <Text fontSize="sm" color="rgb(239,48,84)" textDecoration="underline">
                          Visit Store
                        </Text>
                      )}
                    </VStack>
                  </HStack>
                </Box>
              </VStack>
            </GridItem>
          </Grid>
        </Container>
      ) : (
        <Container maxW="8xl" py={8}>
          <Grid templateColumns={{ base: "1fr", lg: "1fr 1fr" }} gap={12}>
            <GridItem>
              <VStack spacing={4}>
                <Skeleton w="full" h="400px" borderRadius="xl" />
                <SimpleGrid columns={5} spacing={2} w="full">
                  {[...Array(5)].map((_, i) => (
                    <Skeleton key={i} h="80px" borderRadius="lg" />
                  ))}
                </SimpleGrid>
              </VStack>
            </GridItem>
            <GridItem>
              <VStack spacing={6} align="stretch">
                <SkeletonText noOfLines={3} spacing={4} skeletonHeight={6} />
                <Skeleton h="150px" borderRadius="xl" />
                <SkeletonText noOfLines={5} spacing={3} />
                <Skeleton h="200px" borderRadius="xl" />
              </VStack>
            </GridItem>
          </Grid>
        </Container>
      )}

      {/* Image Modal */}
      <Modal isOpen={isImageModalOpen} onClose={onImageModalClose} size="6xl">
        <ModalOverlay bg="blackAlpha.800" />
        <ModalContent bg="transparent" shadow="none" maxW="90vw" maxH="90vh">
          <ModalCloseButton color="white" size="lg" />
          <ModalBody p={0}>
            {product && (
              <Box position="relative" w="full" h="full">
                <Image
                  src={product.images.gallery[selectedImage]?.url || product.images.main_image.url}
                  alt={product.title}
                  w="full"
                  h="full"
                  objectFit="contain"
                  borderRadius="lg"
                />
                {product.images.gallery && product.images.gallery.length > 1 && (
                  <HStack
                    position="absolute"
                    bottom={4}
                    left="50%"
                    transform="translateX(-50%)"
                    spacing={2}
                    bg="blackAlpha.700"
                    px={4}
                    py={2}
                    borderRadius="full"
                  >
                    {product.images.gallery.map((_, index) => (
                      <Box
                        key={index}
                        w="8px"
                        h="8px"
                        borderRadius="full"
                        bg={selectedImage === index ? "white" : "whiteAlpha.500"}
                        cursor="pointer"
                        onClick={() => setSelectedImage(index)}
                      />
                    ))}
                  </HStack>
                )}
              </Box>
            )}
          </ModalBody>
        </ModalContent>
      </Modal>

      <Footer />
    </Box>
  );
}

export default CustomerProductPage;
