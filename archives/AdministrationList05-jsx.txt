import * as chakra from "@chakra-ui/react";
import { useState, useEffect, useRef } from "react";
import { useAuth } from "../authContext/authContext";
import SidebarContent from "../layouts/SidebarContent";
import MobileNav from "../layouts/MobileNav";
import SettingsModal from "../components/settings/SettingsModal";
import CustomSelect from "../components/CustomSelect";
import Pagination from "../../../commons/components/Pagination";
import { administrationService } from "../services/administrationService";
import { motion } from "framer-motion";
import {
  FaUser,
  FaFilter,
  FaSearch,
  FaSync,
  FaEllipsisV,
  FaEdit,
  FaLock,
  FaBan,
  FaExclamationTriangle,
  FaCheck,
  FaPlus,
  FaStar,
  FaSave,
  FaTrash,
  FaClock,
  FaCalendarAlt,
} from "react-icons/fa";

const fontName = "Inter";

// Custom theme colors for consistent UI
const colors = {
  background: "rgb(30,30,30)",
  backgroundLight: "rgb(40,40,40)",
  backgroundHover: "rgb(50,50,50)",
  backgroundActive: "rgb(55,55,55)",
  borderColor: "rgb(60,60,60)",
  textPrimary: "rgb(240,240,240)",
  textSecondary: "rgb(160,160,160)",
  textMuted: "rgb(120,120,120)",
  accent: "rgb(66,153,225)" // Blue accent color
};

export default function AdministrationsList() {
  const { account } = useAuth();
  const [isSettingsOpen, setIsSettingsOpen] = useState(false);
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [totalItems, setTotalItems] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [searchQuery, setSearchQuery] = useState("");
  const [isFilterOpen, setIsFilterOpen] = useState(false);
  const [activeActionMenu, setActiveActionMenu] = useState(null);
  const actionMenuRef = useRef(null);
  const [savedFilters, setSavedFilters] = useState([]);
  const [filterName, setFilterName] = useState("");
  const [activeSavedFilter, setActiveSavedFilter] = useState(null);
  const [showSaveFilterInput, setShowSaveFilterInput] = useState(false);
  const [advancedFiltering, setAdvancedFiltering] = useState(false);
  const [dateRange, setDateRange] = useState({ from: "", to: "" });

  // Filter states
  const [filters, setFilters] = useState({
    role: "",
    is_inactive: "",
    is_suspicious: "",
    is_verified: "",
    is_locked: "",
    sort_by: "created_at",
    sort_order: "DESC"
  });

  // Close action menu when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        actionMenuRef.current &&
        !actionMenuRef.current.contains(event.target)
      ) {
        setActiveActionMenu(null);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  // Fetch users with current filters and pagination
  const fetchUsers = async (page = 1) => {
    setLoading(true);
    try {
      // Build query params
      const params = { page, limit: 10 };

      // Add search if present
      if (searchQuery) {
        params.search = searchQuery;
      }

      // Add filters that have values
      Object.entries(filters).forEach(([key, value]) => {
        if (value !== "") {
          params[key] = value;
        }
      });

      // Add date range if set
      if (dateRange.from) {
        params.login_from = dateRange.from;
      }
      if (dateRange.to) {
        params.login_to = dateRange.to;
      }

      const response = await administrationService.getAllUsers(params);
      setUsers(response.data.data.accounts);
      setTotalItems(response.data.data.total_items);
      setCurrentPage(response.data.data.current_page);
      setTotalPages(response.data.data.total_pages);
      setError(null);
    } catch (err) {
      setError("Failed to fetch users. Please try again.");
      console.error("Error fetching users:", err);
    } finally {
      setLoading(false);
    }
  };

  // Initial load - fetch from localStorage any saved filters
  useEffect(() => {
    fetchUsers();
    const saved = localStorage.getItem('adminSavedFilters');
    if (saved) {
      setSavedFilters(JSON.parse(saved));
    }
  }, []);

  // Handle filter changes
  const handleFilterChange = (name, value) => {
    setFilters((prev) => ({
      ...prev,
      [name]: value,
    }));
    // Clear active saved filter when manually changing
    setActiveSavedFilter(null);
  };

  // Apply filters
  const applyFilters = () => {
    setCurrentPage(1);
    fetchUsers(1);
    if (window.innerWidth < 768) {
      setIsFilterOpen(false);
    }
  };

  // Reset filters
  const resetFilters = () => {
    setFilters({
      role: "",
      is_inactive: "",
      is_suspicious: "",
      is_verified: "",
      is_locked: "",
      sort_by: "created_at",
      sort_order: "DESC"
    });
    setDateRange({ from: "", to: "" });
    setSearchQuery("");
    setActiveSavedFilter(null);
    fetchUsers(1);
  };

  // Save current filter
  const saveCurrentFilter = () => {
    if (!filterName.trim()) return;
    
    const newFilter = {
      id: Date.now(),
      name: filterName,
      filters: {...filters},
      dateRange: {...dateRange},
      search: searchQuery
    };
    
    const updatedFilters = [...savedFilters, newFilter];
    setSavedFilters(updatedFilters);
    localStorage.setItem('adminSavedFilters', JSON.stringify(updatedFilters));
    setFilterName("");
    setShowSaveFilterInput(false);
    setActiveSavedFilter(newFilter.id);
  };

  // Delete saved filter
  const deleteSavedFilter = (id, e) => {
    e.stopPropagation();
    const updatedFilters = savedFilters.filter(filter => filter.id !== id);
    setSavedFilters(updatedFilters);
    localStorage.setItem('adminSavedFilters', JSON.stringify(updatedFilters));
    if (activeSavedFilter === id) {
      setActiveSavedFilter(null);
    }
  };

  // Apply saved filter
  const applySavedFilter = (filter) => {
    setFilters(filter.filters);
    setDateRange(filter.dateRange);
    setSearchQuery(filter.search);
    setActiveSavedFilter(filter.id);
    fetchUsers(1);
  };

  // Handle search
  const handleSearch = (e) => {
    if (e.key === "Enter") {
      setCurrentPage(1);
      fetchUsers(1);
    }
  };

  // Handle pagination
  const handlePageChange = (page) => {
    setCurrentPage(page);
    fetchUsers(page);
    // Scroll to top of the table
    document
      .getElementById("usersTable")
      ?.scrollIntoView({ behavior: "smooth" });
  };

  // Format date for display
  const formatDate = (timestamp) => {
    if (!timestamp) return "Never";
    return new Date(timestamp).toLocaleString();
  };

  // Toggle action menu for a user
  const toggleActionMenu = (userId) => {
    setActiveActionMenu(activeActionMenu === userId ? null : userId);
  };

  // Handle user actions
  const handleUserAction = (action, userId) => {
    // Close action menu
    setActiveActionMenu(null);

    // In a real implementation, these would call your API
    switch (action) {
      case "edit":
        console.log(`Edit user: ${userId}`);
        // Navigate to edit page or open modal
        break;
      case "lock":
        console.log(`Lock user: ${userId}`);
        // Implement lock functionality
        break;
      case "deactivate":
        console.log(`Deactivate user: ${userId}`);
        // Implement deactivation
        break;
      case "suspicious":
        console.log(`Mark user suspicious: ${userId}`);
        // Implement marking as suspicious
        break;
      case "verify":
        console.log(`Verify user: ${userId}`);
        // Implement verification
        break;
      default:
        console.log(`Unknown action: ${action}`);
    }
  };

  // Role options for select
  const roleOptions = [
    { value: "", label: "All Roles" },
    { value: "global-administrator", label: "Global Administrator" },
    { value: "administrator", label: "Administrator" },
    { value: "supplier", label: "Supplier" },
    { value: "employee", label: "Employee" },
  ];

  // Boolean filter options
  const booleanOptions = [
    { value: "", label: "All" },
    { value: "true", label: "Yes" },
    { value: "false", label: "No" },
  ];

  // Sort options
  const sortByOptions = [
    { value: "created_at", label: "Creation Date" },
    { value: "last_login_time", label: "Last Login" },
    { value: "email", label: "Email" },
    { value: "role", label: "Role" },
  ];

  const sortOrderOptions = [
    { value: "DESC", label: "Descending" },
    { value: "ASC", label: "Ascending" },
  ];

  return (
    <>
      <chakra.Box minH="100vh" bg={colors.background}>
        <SidebarContent onSettingsOpen={() => setIsSettingsOpen(true)} />
        <MobileNav onSettingsOpen={() => setIsSettingsOpen(true)} />

        <SettingsModal
          isOpen={isSettingsOpen}
          onClose={() => setIsSettingsOpen(false)}
        />

        <chakra.Box ml={{ base: 0, md: 60 }} p="5">
          {/* Header with title and create button */}
          <chakra.Flex
            direction={{ base: "column", md: "row" }}
            justify="space-between"
            align={{ base: "flex-start", md: "center" }}
            mb={6}
          >
            <chakra.Text
              color={colors.textPrimary}
              fontSize={{ base: "2xl", md: "3xl" }}
              fontFamily={fontName}
              fontWeight="light"
            >
              Administrations Console
            </chakra.Text>

            <chakra.Button
              leftIcon={<FaPlus />}
              size="sm"
              mt={{ base: 3, md: 0 }}
              bg="blue.500"
              _hover={{ bg: "blue.500" }}
              transition="all 0.2s"
            >
              Create Account
            </chakra.Button>
          </chakra.Flex>

          {/* Stats Cards */}
          <chakra.Grid
            templateColumns={{
              base: "1fr",
              sm: "repeat(2, 1fr)",
              md: "repeat(4, 1fr)",
            }}
            gap={4}
            mb={6}
          >
            <StatCard
              title="Total Users"
              value={totalItems}
              icon={<FaUser />}
              color="blue"
              bg={colors.backgroundLight}
              borderColor={colors.borderColor}
            />
            <StatCard
              title="Administrators"
              value={
                users.filter(
                  (u) =>
                    u.role === "administrator" ||
                    u.role === "global-administrator"
                ).length
              }
              icon={<FaCheck />}
              color="purple"
              bg={colors.backgroundLight}
              borderColor={colors.borderColor}
            />
            <StatCard
              title="Suppliers"
              value={users.filter((u) => u.role === "supplier").length}
              icon={<FaUser />}
              color="green"
              bg={colors.backgroundLight}
              borderColor={colors.borderColor}
            />
            <StatCard
              title="Locked Accounts"
              value={users.filter((u) => u.is_locked).length}
              icon={<FaLock />}
              color="red"
              bg={colors.backgroundLight}
              borderColor={colors.borderColor}
            />
          </chakra.Grid>

          {/* Search and Filter Controls */}
          <chakra.Flex
            direction={{ base: "column", md: "row" }}
            justifyContent="space-between"
            alignItems={{ base: "stretch", md: "center" }}
            mb={4}
            gap={4}
          >
            {/* Search Box */}
            <chakra.InputGroup size="md" maxW={{ base: "100%", md: "400px" }}>
              <chakra.InputLeftElement
                pointerEvents="none"
                color={colors.textMuted}
              >
                <FaSearch />
              </chakra.InputLeftElement>
              <chakra.Input
                bg={colors.backgroundLight}
                placeholder="Search users..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                onKeyPress={handleSearch}
                borderColor={colors.borderColor}
                _focus={{
                  borderColor: "blue.400",
                  boxShadow: "0 0 0 1px blue.400",
                }}
                color={colors.textPrimary}
                _hover={{ borderColor: "blue.300" }}
              />
            </chakra.InputGroup>

            {/* Filter Controls */}
            <chakra.Flex
              gap={2}
              flexWrap="wrap"
              justifyContent={{ base: "flex-start", sm: "flex-end" }}
            >
              <chakra.Button
                leftIcon={<FaFilter />}
                size="sm"
                bg="blue.500"
                _hover={{ bg: "blue.500" }}
                onClick={() => setIsFilterOpen(!isFilterOpen)}
              >
                {isFilterOpen ? "Hide Filters" : "Show Filters"}
              </chakra.Button>

              <chakra.Button
                leftIcon={<FaSync />}
                size="sm"
                onClick={resetFilters}
                title="Reset filters"
                bg="blue.500"
                _hover={{ bg: "blue.500" }}
              >
                Reset
              </chakra.Button>
            </chakra.Flex>
          </chakra.Flex>

          {/* Saved Filters Section */}

          {/* Filter Panel */}
          <chakra.Box
            as={motion.div}
            initial={
              isFilterOpen
                ? { opacity: 1, height: "auto" }
                : { opacity: 0, height: 0 }
            }
            animate={
              isFilterOpen
                ? { opacity: 1, height: "auto" }
                : { opacity: 0, height: 0 }
            }
            transition={{ duration: 0.3 }}
            overflow="hidden"
          >
            <chakra.Box
              bg={colors.backgroundLight}
              p={4}
              mb={6}
              borderRadius="md"
              boxShadow="lg"
              borderWidth="1px"
              borderColor={colors.borderColor}
            >
              {/* Basic Filters */}
              <chakra.Grid
                templateColumns={{
                  base: "1fr",
                  md: "repeat(3, 1fr)",
                  lg: "repeat(5, 1fr)",
                }}
                gap={4}
                mb={4}
              >
                <chakra.Box>
                  <chakra.Text
                    mb={2}
                    color={colors.textSecondary}
                    fontSize="sm"
                  >
                    Role
                  </chakra.Text>
                  <CustomSelect
                    options={roleOptions}
                    value={filters.role}
                    onChange={(value) => handleFilterChange("role", value)}
                    placeholder="Select Role"
                    icon={<FaUser />}
                    variant="outline"
                  />
                </chakra.Box>

                <chakra.Box>
                  <chakra.Text
                    mb={2}
                    color={colors.textSecondary}
                    fontSize="sm"
                  >
                    Inactive
                  </chakra.Text>
                  <CustomSelect
                    options={booleanOptions}
                    value={filters.is_inactive}
                    onChange={(value) =>
                      handleFilterChange("is_inactive", value)
                    }
                    placeholder="Inactive Status"
                    variant="outline"
                  />
                </chakra.Box>

                <chakra.Box>
                  <chakra.Text
                    mb={2}
                    color={colors.textSecondary}
                    fontSize="sm"
                  >
                    Suspicious
                  </chakra.Text>
                  <CustomSelect
                    options={booleanOptions}
                    value={filters.is_suspicious}
                    onChange={(value) =>
                      handleFilterChange("is_suspicious", value)
                    }
                    placeholder="Suspicious Status"
                    variant="outline"
                  />
                </chakra.Box>

                <chakra.Box>
                  <chakra.Text
                    mb={2}
                    color={colors.textSecondary}
                    fontSize="sm"
                  >
                    Verified
                  </chakra.Text>
                  <CustomSelect
                    options={booleanOptions}
                    value={filters.is_verified}
                    onChange={(value) =>
                      handleFilterChange("is_verified", value)
                    }
                    placeholder="Verified Status"
                    variant="outline"
                  />
                </chakra.Box>

                <chakra.Box>
                  <chakra.Text
                    mb={2}
                    color={colors.textSecondary}
                    fontSize="sm"
                  >
                    Locked
                  </chakra.Text>
                  <CustomSelect
                    options={booleanOptions}
                    value={filters.is_locked}
                    onChange={(value) => handleFilterChange("is_locked", value)}
                    placeholder="Locked Status"
                    variant="outline"
                  />
                </chakra.Box>
              </chakra.Grid>

              {/* Advanced Filters Toggle */}
              <chakra.Button
                variant="ghost"
                size="sm"
                onClick={() => setAdvancedFiltering(!advancedFiltering)}
                mb={4}
                color={colors.textSecondary}
                _hover={{
                  color: colors.textPrimary,
                  bg: colors.backgroundHover,
                }}
                rightIcon={
                  advancedFiltering ? <FaChevronUp /> : <FaChevronDown />
                }
              >
                {advancedFiltering
                  ? "Hide Advanced Filters"
                  : "Show Advanced Filters"}
              </chakra.Button>

              {/* Advanced Filters Section */}
              <chakra.Box
                as={motion.div}
                initial={{ opacity: 0, height: 0 }}
                animate={
                  advancedFiltering
                    ? { opacity: 1, height: "auto" }
                    : { opacity: 0, height: 0 }
                }
                transition={{ duration: 0.2 }}
                overflow="hidden"
                mb={4}
              >
                <chakra.Grid
                  templateColumns={{
                    base: "1fr",
                    md: "repeat(2, 1fr)",
                    lg: "repeat(4, 1fr)",
                  }}
                  gap={4}
                  mt={2}
                >
                  <chakra.Box>
                    <chakra.Text
                      mb={2}
                      color={colors.textSecondary}
                      fontSize="sm"
                    >
                      Sort By
                    </chakra.Text>
                    <CustomSelect
                      options={sortByOptions}
                      value={filters.sort_by}
                      onChange={(value) => handleFilterChange("sort_by", value)}
                      placeholder="Sort By"
                      icon={<FaSort />}
                      variant="outline"
                    />
                  </chakra.Box>

                  <chakra.Box>
                    <chakra.Text
                      mb={2}
                      color={colors.textSecondary}
                      fontSize="sm"
                    >
                      Sort Order
                    </chakra.Text>
                    <CustomSelect
                      options={sortOrderOptions}
                      value={filters.sort_order}
                      onChange={(value) =>
                        handleFilterChange("sort_order", value)
                      }
                      placeholder="Sort Order"
                      variant="outline"
                    />
                  </chakra.Box>

                  <chakra.Box>
                    <chakra.Text
                      mb={2}
                      color={colors.textSecondary}
                      fontSize="sm"
                    >
                      Login After
                    </chakra.Text>
                    <chakra.Input
                      type="date"
                      value={dateRange.from}
                      onChange={(e) =>
                        setDateRange({ ...dateRange, from: e.target.value })
                      }
                      bg={colors.background}
                      borderColor={colors.borderColor}
                      color={colors.textPrimary}
                      _focus={{ borderColor: "blue.400" }}
                    />
                  </chakra.Box>

                  <chakra.Box>
                    <chakra.Text
                      mb={2}
                      color={colors.textSecondary}
                      fontSize="sm"
                    >
                      Login Before
                    </chakra.Text>
                    <chakra.Input
                      type="date"
                      value={dateRange.to}
                      onChange={(e) =>
                        setDateRange({ ...dateRange, to: e.target.value })
                      }
                      bg={colors.background}
                      borderColor={colors.borderColor}
                      color={colors.textPrimary}
                      _focus={{ borderColor: "blue.400" }}
                    />
                  </chakra.Box>
                </chakra.Grid>
              </chakra.Box>

              <chakra.Flex justifyContent="flex-end" mt={4}>
                <chakra.Button
                  colorScheme="blue"
                  onClick={applyFilters}
                  leftIcon={<FaFilter />}
                  boxShadow="md"
                  _hover={{
                    transform: "translateY(-1px)",
                    boxShadow: "lg",
                  }}
                  transition="all 0.2s"
                >
                  Apply Filters
                </chakra.Button>
              </chakra.Flex>
            </chakra.Box>
          </chakra.Box>

          {/* Users Table */}
          {loading ? (
            <chakra.Center py={10}>
              <chakra.Flex direction="column" align="center">
                <chakra.Spinner
                  size="xl"
                  color="blue.400"
                  thickness="4px"
                  mb={4}
                />
                <chakra.Text color={colors.textSecondary}>
                  Loading user accounts...
                </chakra.Text>
              </chakra.Flex>
            </chakra.Center>
          ) : error ? (
            <chakra.Alert
              status="error"
              variant="subtle"
              borderRadius="md"
              bg={colors.backgroundLight}
            >
              <chakra.AlertIcon />
              <chakra.AlertDescription>{error}</chakra.AlertDescription>
            </chakra.Alert>
          ) : (
            <>
              <chakra.Box
                id="usersTable"
                overflowX="auto"
                bg={colors.backgroundLight}
                borderRadius="md"
                boxShadow="lg"
                borderWidth="1px"
                borderColor={colors.borderColor}
                as={motion.div}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3 }}
              >
                <chakra.Table variant="simple" size="sm">
                  <chakra.Thead bg={colors.backgroundActive}>
                    <chakra.Tr>
                      <chakra.Th color={colors.textSecondary} border={0}>
                        Name
                      </chakra.Th>
                      <chakra.Th color={colors.textSecondary} border={0}>
                        Email
                      </chakra.Th>
                      <chakra.Th color={colors.textSecondary} border={0}>
                        Role
                      </chakra.Th>
                      <chakra.Th color={colors.textSecondary} border={0}>
                        Status
                      </chakra.Th>
                      <chakra.Th color={colors.textSecondary} border={0}>
                        Last Login
                      </chakra.Th>
                      <chakra.Th
                        color={colors.textSecondary}
                        width="80px"
                        textAlign="right"
                        border={0}
                      >
                        Actions
                      </chakra.Th>
                    </chakra.Tr>
                  </chakra.Thead>
                  <chakra.Tbody>
                    {users.length === 0 ? (
                      <chakra.Tr height={'full'}>
                        <chakra.Td
                          colSpan={6}
                          textAlign="center"
                          py={8}
                          color={colors.textSecondary}
                        >
                          <chakra.Flex
                            direction="column"
                            align="center"
                            justify="center"
                            as={motion.div}
                            initial={{ opacity: 0 }}
                            animate={{ opacity: 1 }}
                            transition={{ duration: 0.5 }}
                          >
                            <FaUser
                              size={30}
                              style={{ marginBottom: "12px", opacity: 0.5 }}
                            />
                            <chakra.Text fontWeight="medium" mb={1}>
                              No users found matching your criteria
                            </chakra.Text>
                            <chakra.Text
                              fontSize="sm"
                              color={colors.textMuted}
                              mb={4}
                            >
                              Try adjusting your filters or search query
                            </chakra.Text>
                            <chakra.Button
                              size="sm"
                              variant="outline"
                              colorScheme="blue"
                              onClick={resetFilters}
                              leftIcon={<FaSync />}
                            >
                              Reset Filters
                            </chakra.Button>
                          </chakra.Flex>
                        </chakra.Td>
                      </chakra.Tr>
                    ) : (
                      users.map((user, index) => (
                        <chakra.Tr
                          key={user.id}
                          _hover={{ bg: colors.backgroundHover }}
                          as={motion.tr}
                          initial={{ opacity: 0, y: 20 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ duration: 0.2, delay: index * 0.03 }}
                          minH='100vh'
                        >
                          <chakra.Td color={colors.textPrimary} border={0} >
                            <chakra.Flex alignItems="center">
                              <chakra.Avatar
                                border={0}
                                size="sm"
                                name={`${user.first_name} ${user.last_name}`}
                                mr={3}
                                bg={
                                  user.role === "global-administrator"
                                    ? "purple.500"
                                    : user.role === "administrator"
                                    ? "blue.500"
                                    : user.role === "supplier"
                                    ? "green.500"
                                    : "gray.500"
                                }
                              />
                              <chakra.Box>
                                <chakra.Text fontWeight="medium">
                                  {user.preferred_name ||
                                    `${user.first_name} ${user.last_name}`}
                                </chakra.Text>
                                <chakra.Text
                                  fontSize="xs"
                                  color={colors.textMuted}
                                >
                                  {user.phone_number || "No phone"}
                                </chakra.Text>
                              </chakra.Box>
                            </chakra.Flex>
                          </chakra.Td>
                          <chakra.Td color={colors.textSecondary} border={0}>
                            {user.email}
                          </chakra.Td>
                          <chakra.Td border={0}>
                            <chakra.Badge
                              colorScheme={
                                user.role === "global-administrator"
                                  ? "purple"
                                  : user.role === "administrator"
                                  ? "blue"
                                  : user.role === "supplier"
                                  ? "green"
                                  : "gray"
                              }
                              px={2}
                              py={1}
                              borderRadius="full"
                            >
                              {user.role}
                            </chakra.Badge>
                          </chakra.Td>
                          <chakra.Td border={0}>
                            <chakra.Flex direction="column" gap={1}>
                              {user.is_inactive && (
                                <chakra.Badge colorScheme="gray" fontSize="xs">
                                  Inactive
                                </chakra.Badge>
                              )}
                              {user.is_locked && (
                                <chakra.Badge colorScheme="red" fontSize="xs">
                                  Locked
                                </chakra.Badge>
                              )}
                              {user.is_suspicious && (
                                <chakra.Badge
                                  colorScheme="orange"
                                  fontSize="xs"
                                >
                                  Suspicious
                                </chakra.Badge>
                              )}
                              {user.is_verified && (
                                <chakra.Badge colorScheme="green" fontSize="xs">
                                  Verified
                                </chakra.Badge>
                              )}
                              {!user.is_inactive &&
                                !user.is_locked &&
                                !user.is_suspicious && (
                                  <chakra.Badge
                                    colorScheme="blue"
                                    fontSize="xs"
                                  >
                                    Active
                                  </chakra.Badge>
                                )}
                            </chakra.Flex>
                          </chakra.Td>
                          <chakra.Td
                            color={colors.textSecondary}
                            fontSize="sm"
                            border={0}
                          >
                            <chakra.Flex align="center">
                              <FaClock
                                size={12}
                                style={{ marginRight: "6px", opacity: 0.7 }}
                              />
                              {formatDate(user.last_login_time)}
                            </chakra.Flex>
                          </chakra.Td>
                          <chakra.Td
                            textAlign="right"
                            position="relative"
                            border={0}
                          >
                            <chakra.Box
                              ref={
                                activeActionMenu === user.id
                                  ? actionMenuRef
                                  : null
                              }
                              position="relative"
                            >
                              <chakra.Tooltip
                                label="User Actions"
                                placement="left"
                              >
                                <chakra.IconButton
                                  color="gray.400"
                                  aria-label="Actions"
                                  icon={<FaEllipsisV />}
                                  variant="ghost"
                                  size="sm"
                                  colorScheme="gray"
                                  onClick={() => toggleActionMenu(user.id)}
                                  _hover={{ bg: colors.backgroundActive }}
                                />
                              </chakra.Tooltip>

                              {/* Action Menu */}
                              {activeActionMenu === user.id && (
                                <chakra.Box
                                  as={motion.div}
                                  // initial={{ opacity: 0, y: -5 }}
                                  // animate={{ opacity: 1, y: 0 }}
                                  // exit={{ opacity: 0, y: -5 }}
                                  position="absolute"
                                  right={0}
                                  top="calc(100% + 5px)"
                                  zIndex={10}
                                  bg={colors.backgroundLight}
                                  borderRadius="md"
                                  boxShadow="lg"
                                  borderWidth="1px"
                                  borderColor={colors.borderColor}
                                  width="180px"
                                  height={"auto"}
                                  py={1}
                                >
                                  <ActionMenuItem
                                    label="Edit User"
                                    icon={<FaEdit />}
                                    onClick={() =>
                                      handleUserAction("edit", user.id)
                                    }
                                  />
                                  <ActionMenuItem
                                    label={
                                      user.is_locked
                                        ? "Unlock Account"
                                        : "Lock Account"
                                    }
                                    icon={<FaLock />}
                                    onClick={() =>
                                      handleUserAction("lock", user.id)
                                    }
                                    colorScheme={
                                      user.is_locked ? "green" : "orange"
                                    }
                                  />
                                  <ActionMenuItem
                                    label={
                                      user.is_inactive
                                        ? "Activate Account"
                                        : "Deactivate Account"
                                    }
                                    icon={<FaBan />}
                                    onClick={() =>
                                      handleUserAction("deactivate", user.id)
                                    }
                                    colorScheme={
                                      user.is_inactive ? "green" : "red"
                                    }
                                  />
                                  <ActionMenuItem
                                    label={
                                      user.is_suspicious
                                        ? "Clear Suspicious"
                                        : "Mark Suspicious"
                                    }
                                    icon={<FaExclamationTriangle />}
                                    onClick={() =>
                                      handleUserAction("suspicious", user.id)
                                    }
                                    colorScheme={
                                      user.is_suspicious ? "green" : "orange"
                                    }
                                  />
                                  <ActionMenuItem
                                    label={
                                      user.is_verified
                                        ? "Unverify User"
                                        : "Verify User"
                                    }
                                    icon={<FaCheck />}
                                    onClick={() =>
                                      handleUserAction("verify", user.id)
                                    }
                                    colorScheme={
                                      user.is_verified ? "red" : "green"
                                    }
                                  />
                                </chakra.Box>
                              )}
                            </chakra.Box>
                          </chakra.Td>
                        </chakra.Tr>
                      ))
                    )}
                  </chakra.Tbody>
                </chakra.Table>
              </chakra.Box>

              {/* Pagination - using our reusable component */}
              {totalPages > 1 && (
                <Pagination
                  currentPage={currentPage}
                  totalPages={totalPages}
                  onPageChange={handlePageChange}
                  showPageCount={true}
                  colorScheme="blue"
                />
              )}

              {/* Results summary */}
              <chakra.Text
                textAlign="center"
                color={colors.textMuted}
                fontSize="sm"
                mt={4}
              >
                Showing {users.length} of {totalItems} users
              </chakra.Text>
            </>
          )}
        </chakra.Box>
      </chakra.Box>
    </>
  );
}

// Stat Card Component
const StatCard = ({ title, value, icon, color = "blue", bg, borderColor }) => {
  return (
    <chakra.Box
      bg={bg}
      p={4}
      borderRadius="md"
      boxShadow="md"
      _hover={{ transform: "translateY(-2px)", boxShadow: "lg" }}
      borderWidth="1px"
      borderColor={borderColor}
      as={motion.div}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      <chakra.Flex align="center" justify="space-between">
        <chakra.Box>
          <chakra.Text color="gray.400" fontSize="sm">
            {title}
          </chakra.Text>
          <chakra.Text color="white" fontSize="2xl" fontWeight="bold">
            {value}
          </chakra.Text>
        </chakra.Box>
        <chakra.Box
          p={3}
          borderRadius="full"
          bg={`${color}.900`}
          color={`${color}.200`}
        >
          {icon}
        </chakra.Box>
      </chakra.Flex>
    </chakra.Box>
  );
};

// Action Menu Item Component
const ActionMenuItem = ({ label, icon, onClick, colorScheme = "gray" }) => {
  return (
    <chakra.Box
      as="button"
      display="flex"
      alignItems="center"
      width="100%"
      py={2}
      px={3}
      transition="background 0.2s"
      _hover={{ bg: "rgb(50,50,50)" }}
      onClick={onClick}
      textAlign="left"
    >
      <chakra.Box color={`${colorScheme}.400`} mr={2}>
        {icon}
      </chakra.Box>
      <chakra.Text color="white" fontSize="sm">
        {label}
      </chakra.Text>
    </chakra.Box>
  );
};

// For the sort icon
const FaChevronDown = ({ ...props }) => (
  <chakra.Box as="span" {...props}>
    <svg width="1em" height="1em" viewBox="0 0 320 512" fill="currentColor">
      <path d="M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z" />
    </svg>
  </chakra.Box>
);

const FaChevronUp = ({ ...props }) => (
  <chakra.Box as="span" {...props}>
    <svg width="1em" height="1em" viewBox="0 0 320 512" fill="currentColor">
      <path d="M177 159.7l136 136c9.4 9.4 9.4 24.6 0 33.9l-22.6 22.6c-9.4 9.4-24.6 9.4-33.9 0L160 255.9l-96.4 96.4c-9.4 9.4-24.6 9.4-33.9 0L7 329.7c-9.4-9.4-9.4-24.6 0-33.9l136-136c9.4-9.5 24.6-9.5 34-.1z" />
    </svg>
  </chakra.Box>
);

const FaSort = ({ ...props }) => (
  <chakra.Box as="span" {...props}>
    <svg width="1em" height="1em" viewBox="0 0 320 512" fill="currentColor">
      <path d="M41 288h238c21.4 0 32.1 25.9 17 41L177 448c-9.4 9.4-24.6 9.4-33.9 0L24 329c-15.1-15.1-4.4-41 17-41zm255-105L177 64c-9.4-9.4-24.6-9.4-33.9 0L24 183c-15.1 15.1-4.4 41 17 41h238c21.4 0 32.1-25.9 17-41z" />
    </svg>
  </chakra.Box>
);