// filepath: /Users/bashclay/Desktop/dev/as-solutions-fourniture-e-commerce-system/client/src/features/company/company-details/CompanyDetails.jsx

import React, { useState, useEffect, useCallback } from "react";
import { useParams, useNavigate } from "react-router-dom";
import {
  Box,
  Flex,
  Heading,
  Text,
  Badge,
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
  Button,
  useToast,
  Spinner,
  VStack,
  HStack,
  Divider,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  TableContainer,
  Avatar,
  Icon,
  Card,
  CardBody,
  CardHeader,
  Menu,
  MenuButton,
  MenuList,
  MenuItem,
  IconButton,
  Tooltip,
  useDisclosure,
  FormControl,
  FormLabel,
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
  Skeleton,
  SkeletonText,
  Tag,
  Center,
  SimpleGrid,
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  useColorModeValue,
  Stat,
  StatLabel,
  StatNumber,
  StatHelpText,
  Wrap,
  WrapItem,
  useBreakpointValue,
  Image,
} from "@chakra-ui/react";
import { motion } from "framer-motion";
import {
  FiEdit,
  FiCheckCircle,
  FiXCircle,
  FiActivity,
  FiUser,
  FiMail,
  FiPhone,
  FiMapPin,
  FiGlobe,
  FiHome,
  FiUsers,
  FiInfo,
  FiBriefcase,
  FiFileText,
  FiFolder,
  FiChevronDown,
  FiArrowLeft,
  FiMoreVertical,
  FiAlertTriangle,
  FiImage,
} from "react-icons/fi";
import { companiesService } from "../services/companiesService";
import { handleApiError } from "../../../commons/handleApiError";
import { useAuth } from "../../administration/authContext/authContext";
import { usePreferences } from "../../administration/authContext/preferencesProvider";
import Loader from "../../../commons/Loader";
import SidebarContent from "../../administration/layouts/SidebarContent";
import MobileNav from "../../administration/layouts/MobileNav";
import SettingsModal from "../../administration/components/settings/SettingsModal";
import CompanyUpdateModal from "../companies-management/CompanyUpdateModal";
import {
  formatRelativeTime,
  formatOptions,
  formatWithTimezone,
} from "../../../commons/formatOptions";

// Motion components with Chakra
const MotionBox = motion(Box);
const MotionFlex = motion(Flex);
const MotionCard = motion(Card);

// EmptyState component
const EmptyState = ({
  icon = FiFileText,
  title = "No Data Found",
  message = "There are no items to display.",
  action = null,
}) => {
  return (
    <Box
      p={8}
      textAlign="center"
      borderRadius="md"
      bg="gray.800"
      border="1px dashed"
      borderColor="gray.700"
    >
      <VStack spacing={3}>
        <Icon as={icon} fontSize="3xl" color="gray.400" />
        <Text fontWeight="bold" color="white">
          {title}
        </Text>
        <Text color="gray.400">{message}</Text>
        {action && <Box mt={2}>{action}</Box>}
      </VStack>
    </Box>
  );
};

const CompanyDetails = () => {
  const { companyId } = useParams();
  const navigate = useNavigate();
  const toast = useToast();
  const { account, isLoading: isAuthLoading } = useAuth();
  const { currentTimezone } = usePreferences();
  const [isSettingsOpen, setIsSettingsOpen] = useState(false);

  // State for company details
  const [companyDetails, setCompanyDetails] = useState(null);
  const [isLoadingDetails, setIsLoadingDetails] = useState(true);

  // State for users
  const [users, setUsers] = useState([]);
  const [isLoadingUsers, setIsLoadingUsers] = useState(false);

  // Modal states
  const {
    isOpen: isEditModalOpen,
    onOpen: onEditModalOpen,
    onClose: onEditModalClose,
  } = useDisclosure();

  // Page animations
  const fadeIn = {
    initial: { opacity: 0 },
    animate: { opacity: 1 },
    transition: { duration: 0.4 },
  };

  const slideUp = {
    initial: { opacity: 0, y: 20 },
    animate: { opacity: 1, y: 0 },
    transition: { duration: 0.4 },
  };

  const staggerContainer = {
    animate: { transition: { staggerChildren: 0.1 } },
  };

  // Responsive adjustments
  const avatarSize = useBreakpointValue({ base: "xl", md: "2xl" });

  // Fetch company details
  const fetchCompanyDetails = useCallback(async () => {
    if (!companyId) return;

    setIsLoadingDetails(true);
    try {
      const response = await companiesService.getCompanyInfo(companyId);
      setCompanyDetails(response.data.data);
    } catch (error) {
      handleApiError(error, toast);
      navigate("/companies");
    } finally {
      setIsLoadingDetails(false);
    }
  }, [companyId, navigate, toast]);

  // Fetch company users
  const fetchCompanyUsers = useCallback(async () => {
    if (!companyId) return;

    setIsLoadingUsers(true);
    try {
      const response = await companiesService.getAllUsersOfCompany(companyId);
      setUsers(response.data.data.administration || []);
    } catch (error) {
      handleApiError(error, toast);
    } finally {
      setIsLoadingUsers(false);
    }
  }, [companyId, toast]);

  // Handle status changes
  const handleActivateCompany = async () => {
    try {
      await companiesService.markCompanyActive(companyId);
      toast({
        description: "Company has been activated successfully.",
        status: "success",
        duration: 5000,
        isClosable: true,
      });
      fetchCompanyDetails();
    } catch (error) {
      handleApiError(error, toast);
    }
  };

  const handleDeactivateCompany = async () => {
    try {
      await companiesService.markCompanyInactive(companyId);
      toast({
        description: "Company has been deactivated successfully.",
        status: "success",
        duration: 5000,
        isClosable: true,
      });
      fetchCompanyDetails();
    } catch (error) {
      handleApiError(error, toast);
    }
  };

  // Handle edit company
  const handleEditCompany = () => {
    onEditModalOpen();
  };

  // Load data on mount
  useEffect(() => {
    if (companyId) {
      fetchCompanyDetails();
    }
  }, [companyId, fetchCompanyDetails]);

  // Load users when tab changes
  const handleTabChange = (index) => {
    if (index === 1 && users.length === 0) {
      // Users tab
      fetchCompanyUsers();
    }
  };

  if (isAuthLoading) {
    return <Loader />;
  }

  if (isLoadingDetails) {
    return (
      <Box minH="100vh" bg="rgb(25,25,25)">
        <SidebarContent onSettingsOpen={() => setIsSettingsOpen(true)} />
        <MobileNav onSettingsOpen={() => setIsSettingsOpen(true)} />
        <Box ml={{ base: 0, md: 60 }} p="5">
          <Skeleton height="50px" width="200px" mb={6} />
          <SkeletonText mt="4" noOfLines={6} spacing="4" skeletonHeight="4" />
        </Box>
      </Box>
    );
  }

  if (!companyDetails) {
    return (
      <Box minH="100vh" bg="rgb(25,25,25)">
        <SidebarContent onSettingsOpen={() => setIsSettingsOpen(true)} />
        <MobileNav onSettingsOpen={() => setIsSettingsOpen(true)} />
        <Box ml={{ base: 0, md: 60 }} p="5">
          <Alert status="error" variant="solid" borderRadius="md">
            <AlertIcon />
            <AlertTitle mr={2}>Company Not Found</AlertTitle>
            <AlertDescription>
              The requested company could not be found.
            </AlertDescription>
          </Alert>
          <Button
            mt={4}
            leftIcon={<FiArrowLeft />}
            onClick={() => navigate("/companies")}
          >
            Back to Companies List
          </Button>
        </Box>
      </Box>
    );
  }

  return (
    <Box minH="100vh" bg="rgb(25,25,25)">
      <SidebarContent onSettingsOpen={() => setIsSettingsOpen(true)} />
      <MobileNav onSettingsOpen={() => setIsSettingsOpen(true)} />
      <SettingsModal
        isOpen={isSettingsOpen}
        onClose={() => setIsSettingsOpen(false)}
      />

      <MotionBox ml={{ base: 0, md: 60 }} p={{ base: 4, md: 6 }} {...fadeIn}>
        {/* Breadcrumb Navigation */}
        <Breadcrumb
          fontSize="sm"
          color="gray.400"
          mb={6}
          separator={<Icon as={FiChevronDown} color="gray.600" />}
        >
          <BreadcrumbItem>
            <BreadcrumbLink as={Box} onClick={() => navigate("/")}>
              <Icon as={FiHome} mr={1} />
              Home
            </BreadcrumbLink>
          </BreadcrumbItem>
          <BreadcrumbItem>
            <BreadcrumbLink as={Box} onClick={() => navigate("/companies")}>
              <Icon as={FiBriefcase} mr={1} />
              Companies
            </BreadcrumbLink>
          </BreadcrumbItem>
          <BreadcrumbItem isCurrentPage>
            <BreadcrumbLink color="blue.400" fontWeight="medium">
              {companyDetails?.business_name || "Company Details"}
            </BreadcrumbLink>
          </BreadcrumbItem>
        </Breadcrumb>

        <MotionFlex direction="column" {...staggerContainer}>
          {/* Header Section */}
          <MotionFlex
            justify="space-between"
            align="center"
            mb={6}
            {...slideUp}
          >
            <Heading size="lg" color="white" fontWeight="semibold">
              Company Profile
            </Heading>
            <Button
              leftIcon={<FiArrowLeft />}
              onClick={() => navigate("/companies")}
              colorScheme="blue"
              variant="outline"
              size="sm"
              _hover={{ bg: "blue.800", borderColor: "blue.500" }}
            >
              Back to List
            </Button>
          </MotionFlex>

          {/* Company Info Card */}
          <MotionCard
            bg="rgb(36,36,36)"
            borderColor="gray.700"
            borderWidth="1px"
            borderRadius="xl"
            overflow="hidden"
            {...slideUp}
            transition={{ delay: 0.1 }}
            mb={6}
            boxShadow="lg"
          >
            {/* Card Header with background gradient */}
            <Box
              position="relative"
              h="100px"
              bgGradient="linear(to-r, blue.900, rgb(36,36,36))"
            >
              <Menu>
                <MenuButton
                  as={IconButton}
                  icon={<FiMoreVertical />}
                  variant="ghost"
                  aria-label="Options"
                  color="white"
                  position="absolute"
                  top={4}
                  right={4}
                  _hover={{ bg: "whiteAlpha.200" }}
                />
                <MenuList bg="rgb(36,36,36)" borderColor="gray.700">
                  <MenuItem
                    icon={<FiEdit />}
                    onClick={handleEditCompany}
                    color="gray.300"
                    bg="transparent"
                    _hover={{ bg: "gray.700" }}
                  >
                    Edit Company
                  </MenuItem>
                  {companyDetails?.is_inactive ? (
                    <MenuItem
                      icon={<FiCheckCircle />}
                      onClick={handleActivateCompany}
                      color="gray.300"
                      bg="transparent"
                      _hover={{ bg: "gray.700" }}
                    >
                      Activate Company
                    </MenuItem>
                  ) : (
                    <MenuItem
                      icon={<FiXCircle />}
                      onClick={handleDeactivateCompany}
                      color="gray.300"
                      bg="transparent"
                      _hover={{ bg: "gray.700" }}
                    >
                      Deactivate Company
                    </MenuItem>
                  )}
                </MenuList>
              </Menu>
            </Box>

            <CardBody pt={0} mt="-50px">
              <Flex
                direction={{ base: "column", md: "row" }}
                align={{ base: "center", md: "flex-start" }}
                gap={6}
              >
                {/* Logo Section */}
                <VStack spacing={3} align="center">
                  {companyDetails.logo_url ? (
                    <Box
                      borderRadius="xl"
                      overflow="hidden"
                      border="4px solid"
                      borderColor="rgb(36,36,36)"
                      boxShadow="xl"
                      width="150px"
                      height="150px"
                    >
                      <Image
                        src={`http://localhost:8086${companyDetails.logo_url}`}
                        alt={`${companyDetails.business_name} logo`}
                        width="100%"
                        height="100%"
                        objectFit="cover"
                        fallback={
                          <Center bg="blue.500" width="100%" height="100%">
                            <Icon
                              as={FiBriefcase}
                              fontSize="5xl"
                              color="white"
                            />
                          </Center>
                        }
                      />
                    </Box>
                  ) : (
                    <Center
                      bg="blue.500"
                      color="white"
                      borderRadius="xl"
                      width="150px"
                      height="150px"
                      border="4px solid"
                      borderColor="rgb(36,36,36)"
                      boxShadow="xl"
                    >
                      <Icon as={FiBriefcase} fontSize="5xl" />
                    </Center>
                  )}
                  <VStack spacing={1}>
                    <Text
                      fontWeight="bold"
                      fontSize={{ base: "xl", md: "2xl" }}
                      color="white"
                      textAlign="center"
                    >
                      {companyDetails.business_name}
                    </Text>
                    <Text color="gray.400" fontSize="md">
                      {companyDetails.market_name}
                    </Text>
                    <Tag
                      size="md"
                      colorScheme="blue"
                      borderRadius="full"
                      px={3}
                      py={1}
                    >
                      <Icon as={FiBriefcase} mr={1} />
                      {companyDetails.type_of_business || "Business"}
                    </Tag>
                    {/* Status Indicators */}
                    <HStack spacing={2} mt={2} wrap="wrap" justify="center">
                      <Badge
                        px={2}
                        py={0.5}
                        borderRadius="md"
                        colorScheme={
                          !companyDetails.is_inactive ? "green" : "red"
                        }
                        variant={
                          !companyDetails.is_inactive ? "solid" : "subtle"
                        }
                      >
                        <Icon
                          as={
                            !companyDetails.is_inactive
                              ? FiCheckCircle
                              : FiXCircle
                          }
                          mr={1}
                        />
                        {!companyDetails.is_inactive ? "Active" : "Inactive"}
                      </Badge>
                      <Badge
                        px={2}
                        py={0.5}
                        borderRadius="md"
                        colorScheme={
                          companyDetails.is_verified ? "teal" : "yellow"
                        }
                        variant={
                          companyDetails.is_verified ? "solid" : "subtle"
                        }
                      >
                        <Icon
                          as={
                            companyDetails.is_verified
                              ? FiCheckCircle
                              : FiAlertTriangle
                          }
                          mr={1}
                        />
                        {companyDetails.is_verified ? "Verified" : "Unverified"}
                      </Badge>
                    </HStack>
                  </VStack>
                </VStack>

                {/* Company details grid */}
                <Box
                  flex="1"
                  mt={{ base: 4, md: 0 }}
                  position="relative"
                  zIndex={1}
                >
                  {/* Company Stats */}
                  <SimpleGrid columns={{ base: 2, md: 3 }} spacing={4} mb={4}>
                    <StatCard
                      label="Total Orders"
                      value={companyDetails.total_orders || 0}
                      icon={FiActivity}
                      color="blue"
                    />
                    <StatCard
                      label="Rating"
                      value={companyDetails.average_rating?.toFixed(1) || 0}
                      icon={FiCheckCircle}
                      color="green"
                    />
                    <StatCard
                      label="Returns"
                      value={companyDetails.return_count || 0}
                      icon={FiXCircle}
                      color="red"
                    />
                  </SimpleGrid>

                  {/* Business Information */}
                  <SimpleGrid
                    columns={{ base: 1, sm: 2 }}
                    spacing={5}
                    bg="gray.800"
                    p={4}
                    borderRadius="lg"
                    boxShadow="inner"
                    mb={4}
                  >
                    <InfoItem
                      icon={FiBriefcase}
                      label="Business Type"
                      value={companyDetails.type_of_business || "Not specified"}
                    />
                    <InfoItem
                      icon={FiInfo}
                      label="Business ID"
                      value={
                        companyDetails.number_unique_identifier ||
                        "Not specified"
                      }
                    />
                    <InfoItem
                      icon={FiFileText}
                      label="Fiscal Number"
                      value={companyDetails.fiscal_number || "Not specified"}
                    />
                    <InfoItem
                      icon={FiGlobe}
                      label="Website"
                      value={companyDetails.website_url || "Not specified"}
                      isLink={!!companyDetails.website_url}
                    />
                  </SimpleGrid>

                  {/* Contact Information */}
                  <SimpleGrid
                    columns={{ base: 1, sm: 2 }}
                    spacing={5}
                    bg="gray.800"
                    p={4}
                    borderRadius="lg"
                    boxShadow="inner"
                  >
                    <InfoItem
                      icon={FiMapPin}
                      label="Location"
                      value={
                        companyDetails.city && companyDetails.country
                          ? `${companyDetails.city}, ${companyDetails.country}`
                          : companyDetails.country ||
                            companyDetails.city ||
                            "Not specified"
                      }
                    />
                    <InfoItem
                      icon={FiMapPin}
                      label="Address"
                      value={companyDetails.address || "Not specified"}
                    />
                    <InfoItem
                      icon={FiPhone}
                      label="Phone Number"
                      value={companyDetails.phone_number || "Not specified"}
                    />
                    <InfoItem
                      icon={FiMail}
                      label="Postal Code"
                      value={companyDetails.postal_code || "Not specified"}
                    />
                    <InfoItem
                      icon={FiUser}
                      label="Contact Person"
                      value={companyDetails.contact_person || "Not specified"}
                    />
                    <InfoItem
                      icon={FiMail}
                      label="Contact Email"
                      value={
                        companyDetails.contact_person_email || "Not specified"
                      }
                      isLink={!!companyDetails.contact_person_email}
                    />
                    <InfoItem
                      icon={FiPhone}
                      label="Contact Phone"
                      value={
                        companyDetails.contact_person_phone || "Not specified"
                      }
                    />
                  </SimpleGrid>
                </Box>
              </Flex>
            </CardBody>
          </MotionCard>

          {/* Tabs Section */}
          <MotionBox {...slideUp} transition={{ delay: 0.2 }}>
            <Tabs
              isLazy
              variant="soft-rounded"
              colorScheme="blue"
              onChange={handleTabChange}
              size="md"
            >
              <TabList borderColor="gray.700" mb={4} overflowX="auto" py={2}>
                <Tab
                  color="gray.300"
                  _selected={{ color: "white", bg: "blue.500" }}
                  fontWeight="medium"
                  mr={2}
                  px={5}
                >
                  <Icon as={FiInfo} mr={2} />
                  Company Info
                </Tab>
                <Tab
                  color="gray.300"
                  _selected={{ color: "white", bg: "blue.500" }}
                  fontWeight="medium"
                  mr={2}
                  px={5}
                >
                  <Icon as={FiUsers} mr={2} />
                  Users
                </Tab>
                <Tab
                  color="gray.300"
                  _selected={{ color: "white", bg: "blue.500" }}
                  fontWeight="medium"
                  mr={2}
                  px={5}
                >
                  <Icon as={FiImage} mr={2} />
                  Assets
                </Tab>
                <Tab
                  color="gray.300"
                  _selected={{ color: "white", bg: "blue.500" }}
                  fontWeight="medium"
                  px={5}
                >
                  <Icon as={FiFolder} mr={2} />
                  Documents
                </Tab>
              </TabList>

              <TabPanels>
                {/* Company Info Tab */}
                <TabPanel px={0}>
                  <MotionCard
                    bg="rgb(36,36,36)"
                    borderColor="gray.700"
                    borderWidth="1px"
                    borderRadius="lg"
                    overflow="hidden"
                    {...slideUp}
                    mb={6}
                  >
                    <CardHeader>
                      <Heading size="md" color="white" fontWeight="medium">
                        Detailed Information
                      </Heading>
                    </CardHeader>
                    <CardBody pt={0}>
                      <SimpleGrid columns={{ base: 1, md: 2 }} spacing={8}>
                        <Box>
                          <Heading size="sm" color="gray.300" mb={4}>
                            Business Details
                          </Heading>
                          <VStack align="stretch" spacing={4}>
                            <Field
                              label="Business Name"
                              value={companyDetails.business_name}
                            />
                            <Field
                              label="Market Name"
                              value={companyDetails.market_name}
                            />
                            <Field
                              label="Type of Business"
                              value={
                                companyDetails.type_of_business ||
                                "Not specified"
                              }
                            />
                            <Field
                              label="Business Identifier"
                              value={
                                companyDetails.number_unique_identifier ||
                                "Not specified"
                              }
                            />
                            <Field
                              label="Fiscal Number"
                              value={
                                companyDetails.fiscal_number || "Not specified"
                              }
                            />
                            <Field
                              label="Date of Registration"
                              value={
                                companyDetails.data_of_registration
                                  ? formatWithTimezone(
                                      companyDetails.data_of_registration,
                                      formatOptions.FULL_DATE,
                                      currentTimezone
                                    )
                                  : "Not specified"
                              }
                            />
                            <Field
                              label="Employees Count"
                              value={
                                companyDetails.employees_count ||
                                "Not specified"
                              }
                            />
                          </VStack>
                        </Box>

                        <Box>
                          <Heading size="sm" color="gray.300" mb={4}>
                            Contact Information
                          </Heading>
                          <VStack align="stretch" spacing={4}>
                            <Field
                              label="Country"
                              value={companyDetails.country || "Not specified"}
                            />
                            <Field
                              label="City"
                              value={companyDetails.city || "Not specified"}
                            />
                            <Field
                              label="Address"
                              value={companyDetails.address || "Not specified"}
                            />
                            <Field
                              label="Postal Code"
                              value={
                                companyDetails.postal_code || "Not specified"
                              }
                            />
                            <Field
                              label="Phone Number"
                              value={
                                companyDetails.phone_number || "Not specified"
                              }
                            />
                            <Field
                              label="Website"
                              value={
                                companyDetails.website_url || "Not specified"
                              }
                              isLink={!!companyDetails.website_url}
                            />
                          </VStack>
                        </Box>

                        <Box gridColumn={{ md: "span 2" }}>
                          <Heading size="sm" color="gray.300" mb={4}>
                            Primary Contact
                          </Heading>
                          <VStack align="stretch" spacing={4}>
                            <Field
                              label="Contact Person"
                              value={
                                companyDetails.contact_person || "Not specified"
                              }
                            />
                            <Field
                              label="Contact Email"
                              value={
                                companyDetails.contact_person_email ||
                                "Not specified"
                              }
                              isLink={!!companyDetails.contact_person_email}
                            />
                            <Field
                              label="Contact Phone"
                              value={
                                companyDetails.contact_person_phone ||
                                "Not specified"
                              }
                            />
                          </VStack>
                        </Box>

                        {companyDetails.notes_internal && (
                          <Box gridColumn={{ md: "span 2" }}>
                            <Heading size="sm" color="gray.300" mb={4}>
                              Internal Notes
                            </Heading>
                            <Box
                              bg="gray.700"
                              p={4}
                              borderRadius="md"
                              fontSize="sm"
                              color="gray.300"
                            >
                              {companyDetails.notes_internal}
                            </Box>
                          </Box>
                        )}
                      </SimpleGrid>
                    </CardBody>
                  </MotionCard>
                </TabPanel>

                {/* Users Tab */}
                <TabPanel px={0}>
                  <MotionCard
                    bg="rgb(36,36,36)"
                    borderColor="gray.700"
                    borderWidth="1px"
                    borderRadius="lg"
                    overflow="hidden"
                    {...slideUp}
                    mb={6}
                  >
                    <CardHeader>
                      <Heading size="md" color="white" fontWeight="medium">
                        Company Users
                      </Heading>
                    </CardHeader>
                    <CardBody pt={0}>
                      {isLoadingUsers ? (
                        <Center py={8}>
                          <VStack>
                            <Spinner
                              size="lg"
                              color="blue.400"
                              thickness="3px"
                              speed="0.8s"
                            />
                            <Text color="gray.400" mt={2}>
                              Loading users...
                            </Text>
                          </VStack>
                        </Center>
                      ) : users && users.length > 0 ? (
                        <UserList users={users} />
                      ) : (
                        <EmptyState
                          icon={FiUsers}
                          title="No Users Found"
                          message="This company doesn't have any registered users."
                        />
                      )}
                    </CardBody>
                  </MotionCard>
                </TabPanel>

                {/* Assets Tab */}
                <TabPanel px={0}>
                  <MotionCard
                    bg="rgb(36,36,36)"
                    borderColor="gray.700"
                    borderWidth="1px"
                    borderRadius="lg"
                    overflow="hidden"
                    {...slideUp}
                    mb={6}
                  >
                    <CardHeader>
                      <Heading size="md" color="white" fontWeight="medium">
                        Company Assets
                      </Heading>
                    </CardHeader>
                    <CardBody pt={0}>
                      <EmptyState
                        icon={FiImage}
                        title="Assets Feature Coming Soon"
                        message="The assets management feature is currently in development."
                      />
                    </CardBody>
                  </MotionCard>
                </TabPanel>

                {/* Documents Tab */}
                <TabPanel px={0}>
                  <MotionCard
                    bg="rgb(36,36,36)"
                    borderColor="gray.700"
                    borderWidth="1px"
                    borderRadius="lg"
                    overflow="hidden"
                    {...slideUp}
                    mb={6}
                  >
                    <CardHeader>
                      <Heading size="md" color="white" fontWeight="medium">
                        Company Documents
                      </Heading>
                    </CardHeader>
                    <CardBody pt={0}>
                      <EmptyState
                        icon={FiFolder}
                        title="Documents Feature Coming Soon"
                        message="The document management feature is currently in development."
                      />
                    </CardBody>
                  </MotionCard>
                </TabPanel>
              </TabPanels>
            </Tabs>
          </MotionBox>
        </MotionFlex>

        {/* Edit Company Modal */}
        <CompanyUpdateModal
          isOpen={isEditModalOpen}
          onClose={onEditModalClose}
          companyId={companyId}
          refreshList={fetchCompanyDetails}
        />
      </MotionBox>
    </Box>
  );
};

// Helper components
const InfoItem = ({ icon, label, value, tooltip, isLink = false }) => {
  return (
    <Box>
      <Text
        fontSize="xs"
        color="gray.500"
        mb={0.5}
        textTransform="uppercase"
        letterSpacing="wider"
      >
        {label}
      </Text>
      <HStack spacing={2} color="gray.300">
        <Icon as={icon} color="gray.400" />
        {tooltip ? (
          <Tooltip label={tooltip} placement="top" hasArrow>
            {isLink && value !== "Not specified" ? (
              <Text
                as="a"
                href={value.startsWith("http") ? value : `mailto:${value}`}
                target="_blank"
                color="blue.400"
              >
                {value}
              </Text>
            ) : (
              <Text>{value}</Text>
            )}
          </Tooltip>
        ) : isLink && value !== "Not specified" ? (
          <Text
            as="a"
            href={value.startsWith("http") ? value : `mailto:${value}`}
            target="_blank"
            color="blue.400"
          >
            {value}
          </Text>
        ) : (
          <Text>{value}</Text>
        )}
      </HStack>
    </Box>
  );
};

// Stat card component
const StatCard = ({ label, value, icon, color }) => {
  return (
    <Box
      bg="gray.800"
      p={3}
      borderRadius="lg"
      _hover={{ bg: "gray.750", transform: "translateY(-2px)" }}
      transition="all 0.2s"
      boxShadow="sm"
    >
      <Flex align="center">
        <Box
          p={2}
          borderRadius="md"
          bg={`${color}.900`}
          color={`${color}.200`}
          mr={3}
        >
          <Icon as={icon} boxSize={5} />
        </Box>
        <Box>
          <Text fontSize="xs" color="gray.500" textTransform="uppercase">
            {label}
          </Text>
          <Text fontSize="lg" fontWeight="bold" color="white">
            {value}
          </Text>
        </Box>
      </Flex>
    </Box>
  );
};

// Field component for detailed view
const Field = ({ label, value, isLink = false }) => {
  return (
    <Box>
      <Text color="gray.500" fontSize="xs" mb={1}>
        {label}
      </Text>
      {isLink && value !== "Not specified" ? (
        <Text
          color="blue.400"
          as="a"
          href={value.startsWith("http") ? value : `mailto:${value}`}
          target="_blank"
        >
          {value}
        </Text>
      ) : (
        <Text color="gray.200">{value}</Text>
      )}
    </Box>
  );
};

export default CompanyDetails;
